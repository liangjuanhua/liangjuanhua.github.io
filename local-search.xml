<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cobbler+kickstart实现批量全自动装机</title>
    <link href="/2025/04/16/Cobbler-kickstart%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%85%A8%E8%87%AA%E5%8A%A8%E8%A3%85%E6%9C%BA/"/>
    <url>/2025/04/16/Cobbler-kickstart%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%85%A8%E8%87%AA%E5%8A%A8%E8%A3%85%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p><strong>cobbler简介</strong><br>　　cobbler 是一个系统启动服务boot server,可以通过pxe得方式用来快速安装，重装系统，支持安装不同linux发行版和windows。这个工具是用python开发，方便小巧，15k行代码，使用简单得命令完成pxe网络安装环境配置，还可以管理dhcp，dns，yum包镜像。cobbler可以命令行，也可以web（cobbler-web）,还提供api接口，可以方便二次开发使用。其实就是多安装树的pxe环境，是pxe的高级应用</p><p><strong>cobbler支持的功能</strong><br>       1、pxe支持</p><p>　　2、dhcp管理</p><p>　　3、dns服务管理（bind，dnsmasq）</p><p>　　4、电源管理</p><p>　　5、kickstart支持</p><p>　　6、yum仓库管理</p><p>　　7、tftp（pxe启动时需要）</p><p>　　8、apache，提供ks得安装源，并提供定制化得ks配置，同时，它和apache做了深度整合，通过cobbler，可以师兄redhat&#x2F;centos&#x2F;fedora系统得快速部署，同时也支持suse、debian（ubuntu）系统，通过配置开可以支持windows</p><p><strong>cobbler架构及工作原理、核心框架</strong><br><strong>cobbler工作原理</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f7d7868539934ab9b74ae6fbe7762862.png" alt="在这里插入图片描述"><br>cobbler框架<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8ebcfa6d523145e8afdc6f9cac9be923.png" alt="在这里插入图片描述"><br>介绍一下profile核心，由三个组件组成</p><ul><li>repositories （安装树或安装源）<br>mirror 镜像，光盘或者网络中得安装源<br> import 导入</li><li>distribution（vmlinuz-内核，initrd.img-引导映像文件）<br>cobbler 自动从reporitories抽取出来生成<br> kickstart file 组成得完完整整得系统发行版</li></ul><p>cobbler就是较早pxe的升级版，优点容易配置，还自带web界面比较易于管理，但是中文资料少，（有人测试：cobbler不会应为在局域网中启动了dhcp而导致有些机器因为默认从pxe启动在重启服务器后加载tftp内容导致启动终止，这部分没有验证）</p><p>可以通过cobbler自动部署dhcp，tftp，http，在安装过程中加载ks无人值守安装应答文件实现无人值守，从客户端使用pxe引导启动安装</p><h2 id="一、准备Windows的ADK和win-PE"><a href="#一、准备Windows的ADK和win-PE" class="headerlink" title="一、准备Windows的ADK和win PE"></a>一、准备Windows的ADK和win PE</h2><p>ADK下载地址：<a href="https://go.microsoft.com/fwlink/?linkid=2026036">https://go.microsoft.com/fwlink/?linkid=2026036</a></p><p>win PE下载地址：<a href="https://go.microsoft.com/fwlink/?linkid=2022233">https://go.microsoft.com/fwlink/?linkid=2022233</a></p><p>注意，adk 的两个都要下载，这俩都是引导包，真正的安装程序会由这俩软件进行下载。</p><h2 id="二、安装-ADK-和-WinPE"><a href="#二、安装-ADK-和-WinPE" class="headerlink" title="二、安装 ADK 和 WinPE"></a>二、安装 ADK 和 WinPE</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/aebd29209beb5504ca5f1580a2c8acc1.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/602799dad7b31a1fd665eb8ee22940ac.png" alt="img"></p><p>安装完后，以管理员身份打开部署和映像工具环境</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/175d96b3f6859cb5615d1eaaf152710d.png" alt="img"></p><p>定制 Win 10 PE</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmd">copype amd64 C:\winpe<br><br>Dism /mount-image /imagefile:C:\winpe\media\sources\boot.wim /index:<span class="hljs-number">1</span> /mountdir:C:\winpe\mount<br><br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">net</span> use z: \\<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">253</span>\share &gt;&gt; C:\winpe\mount\Windows\System32\startnet.<span class="hljs-built_in">cmd</span><br><span class="hljs-built_in">echo</span> z:\win\setup.exe /unattend:z:\win\win10_x64_bios_auto.xml &gt;&gt; C:\winpe\mount\Windows\System32\startnet.<span class="hljs-built_in">cmd</span><br><br>Dism /unmount-image /mountdir:C:\winpe\mount /commit<br>MakeWinPEMedia /ISO C:\winpe C:\winpe\winpe_win10_amd64.iso<br></code></pre></td></tr></table></figure><ol><li>本地生成 winpe 文件目录</li><li>dism 挂载 winpe 的启动文件到 winpe 的 mount 目录</li><li>将启动命令硬编码写死到 winpe 的 startnet.cmd 文件里</li><li>无人值守安装</li><li>卸载 winpe 的挂载（一定要执行，否则直接强制删除文件夹会出一些稀奇古怪的问题）</li><li>制作 win10 镜像，名为 winpe_win10_amd64.iso</li></ol><h2 id="三、乌班图安装Cobbler"><a href="#三、乌班图安装Cobbler" class="headerlink" title="三、乌班图安装Cobbler"></a>三、乌班图安装Cobbler</h2><p><code>乌班图安装需要编译安装，建议使用centos安装</code></p><p>安装Apache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# apt update<br>[root@node1.local ~]# apt install apache2<br></code></pre></td></tr></table></figure><p>启用所需的 Apache 模块</p><p>使用 <code>a2enmod</code> 来启用 <code>proxy</code>、<code>proxy_http</code> 和 <code>rewrite</code> 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">a2enmod proxy<br>a2enmod proxy_http<br>a2enmod rewrite<br></code></pre></td></tr></table></figure><p>检查是否正确启用模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">apache2ctl -M | grep proxy<br><br>proxy_module (shared)<br>proxy_http_module (shared)<br></code></pre></td></tr></table></figure><p>创建 TFTP 根目录的符号链接</p><p>Cobbler 需要 TFTP 目录来进行 PXE 启动。创建一个符号链接，指向 <code>tftpboot</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# <span class="hljs-built_in">ln</span> -s /srv/tftp /var/lib/tftpboot<br></code></pre></td></tr></table></figure><p>重新启动 Apache 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# systemctl restart apache2<br></code></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# systemctl status apache2<br></code></pre></td></tr></table></figure><p>构建 <code>.deb</code> 包</p><p>下载 Cobbler 源代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# git <span class="hljs-built_in">clone</span> https://github.com/cobbler/cobbler.git<br>[root@node1.local ~]# <span class="hljs-built_in">cd</span> cobbler<br></code></pre></td></tr></table></figure><p>安装 <code>debuild</code> 和其他构建工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local cobbler]# apt update<br>[root@node1.local cobbler]# apt install devscripts build-essential fakeroot debhelper<br></code></pre></td></tr></table></figure><p>构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local cobbler]# make debs<br></code></pre></td></tr></table></figure><p>查看构建包位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# find ~ -iname <span class="hljs-string">&#x27;*.deb&#x27;</span><br>/root/cobbler/deb-build/cobbler-tests-containers_3.4.0_all.deb<br>/root/cobbler/deb-build/cobbler_3.4.0_all.deb<br>/root/cobbler/deb-build/cobbler-tests_3.4.0_all.deb<br>/root/cobbler-tests-containers_3.4.0_all.deb<br>/root/cobbler_3.4.0_all.deb<br>/root/cobbler-tests_3.4.0_all.deb<br><br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# dpkg -i /root/cobbler_3.4.0_all.deb<br><br><span class="hljs-comment">#安装的时候会提示以下缺少依赖</span><br>fence-agents<br>xorriso<br>python3-gunicorn<br>python3-pymong<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装依赖会报错</span><br>[root@node1.local ~]# apt-get install fence-agents xorriso python3-gunicorn python3-pymongo<br>eading package lists... Done<br>Building dependency tree... Done<br>Reading state information... Done<br>You might want to run <span class="hljs-string">&#x27;apt --fix-broken install&#x27;</span> to correct these.<br>The following packages have unmet dependencies:<br> cobbler : Depends: fence-agents but it is not going to be installed<br>           Depends: xorriso but it is not going to be installed<br>           Depends: python3-gunicorn but it is not going to be installed<br> python3-pymongo : Depends: python3-bson (= 3.11.0-1ubuntu0.24.04.1) but it is not going to be installed<br>                   Recommends: python3-gridfs (&gt;= 3.11.0-1ubuntu0.24.04.1) but it is not going to be installed<br>                   Recommends: python3-pymongo-ext but it is not going to be installed<br>E: Unmet dependencies. Try <span class="hljs-string">&#x27;apt --fix-broken install&#x27;</span> with no packages (or specify a solution).<br><br><br><span class="hljs-comment">#修复破损的依赖关系</span><br>[root@node1.local ~]# apt --fix-broken install<br><br><span class="hljs-comment">#安装成功</span><br>[root@node1.local ~]# apt-get install fence-agents xorriso python3-gunicorn python3-pymongo<br>Reading package lists... Done<br>Building dependency tree... Done<br>Reading state information... Done<br>fence-agents is already the newest version (4.12.1-2~exp1ubuntu4).<br>fence-agents <span class="hljs-built_in">set</span> to manually installed.<br>xorriso is already the newest version (1:1.5.6-1.1ubuntu3).<br>xorriso <span class="hljs-built_in">set</span> to manually installed.<br>python3-gunicorn is already the newest version (20.1.0-6).<br>python3-gunicorn <span class="hljs-built_in">set</span> to manually installed.<br>python3-pymongo is already the newest version (3.11.0-1ubuntu0.24.04.1).<br>python3-pymongo <span class="hljs-built_in">set</span> to manually installed.<br>0 upgraded, 0 newly installed, 0 to remove and 19 not upgraded.<br></code></pre></td></tr></table></figure><p>安装cobbler</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local cobbler]# dpkg -i /root/cobbler_3.4.0_all.deb<br>(Reading database ... 196119 files and directories currently installed.)<br>Preparing to unpack /root/cobbler_3.4.0_all.deb ...<br>Unpacking cobbler (3.4.0) over (3.4.0) ...<br>Setting up cobbler (3.4.0) ...<br>Processing triggers <span class="hljs-keyword">for</span> man-db (2.12.0-4build2) ...<br><br></code></pre></td></tr></table></figure><p>启动cobbler</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /etc/cobbler/cobblerd.service /etc/systemd/system/<br><br>systemctl daemon-reload<br>systemctl start cobblerd<br>systemctl <span class="hljs-built_in">enable</span> cobblerd<br> <br>cobblerd check<br></code></pre></td></tr></table></figure><h2 id="三、centos安装"><a href="#三、centos安装" class="headerlink" title="三、centos安装"></a>三、centos安装</h2><p>参考地址：<a href="https://blog.swireb.cn/archives/docs-011">https://blog.swireb.cn/archives/docs-011</a></p><p>准备工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#关闭防火墙和selinux</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>systemctl stop firewalld.service<br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=.*/SELINUX=disabled/g&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment">#关闭了selinux需要重启服务器生效</span><br>reboot<br></code></pre></td></tr></table></figure><p>安装 EPEL 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y epel-release<br></code></pre></td></tr></table></figure><p>更新仓库安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum update<br>yum install -y dhcp tftp-server xinetd debmirror pykickstart cobbler cobbler-web  <br><br><span class="hljs-comment">#组件作用简介</span><br>cobbler     <span class="hljs-comment">#基础组件</span><br>cobbler-web <span class="hljs-comment">#web组件</span><br>debmirror   <span class="hljs-comment">#镜像管理工具</span><br>pykickstart <span class="hljs-comment">#检查cobbler配置文件语法</span><br>httpd       <span class="hljs-comment">#发布镜像</span><br>syslinux    <span class="hljs-comment">#配置引导文件（生成pxelinux.0）</span><br>tftp-server <span class="hljs-comment">#为PXE的客户端提供引导文件</span><br>dhcp        <span class="hljs-comment">#为PXE的客户端提供IP地址、告知tftp的服务地址</span><br></code></pre></td></tr></table></figure><p>Cobbler目录文件简介</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ql cobbler<br>/etc/cobbler                  <span class="hljs-comment">#配置文件目录</span><br>/etc/cobbler/settings         <span class="hljs-comment">#cobbler主配置文件</span><br>/etc/cobbler/dhcp.template    <span class="hljs-comment">#dhcp服务的配置模板</span><br>/etc/cobbler/tftpd.template   <span class="hljs-comment">#tftp服务的配置模板</span><br>/etc/cobbler/rsync.template   <span class="hljs-comment">#rsync服务的配置模板</span><br>/etc/cobbler/iso              <span class="hljs-comment">#iso模板配置文件目录</span><br>/etc/cobbler/pxe              <span class="hljs-comment">#pxe模板文件目录</span><br>/etc/cobbler/power            <span class="hljs-comment">#电源的配置文件目录</span><br>/etc/cobbler/users.conf       <span class="hljs-comment">#web服务授权配置文件</span><br>/etc/cobbler/users.digest     <span class="hljs-comment">#用于web访问的用户名密码配置文件</span><br>/etc/cobbler/dnsmasq.template <span class="hljs-comment">#dns服务的配置模板</span><br>/etc/cobbler/modules.conf     <span class="hljs-comment">#cobbler模块配置文件</span><br>/var/lib/cobbler              <span class="hljs-comment">#cobbler数据目录</span><br>/var/lib/cobbler/config       <span class="hljs-comment">#配置文件</span><br>/var/lib/cobbler/kickstarts   <span class="hljs-comment">#默认存放kickstart文件</span><br>/var/lib/cobbler/loaders      <span class="hljs-comment">#存放的各种引导程序</span><br>/var/www/cobbler              <span class="hljs-comment">#系统安装镜像目录</span><br>/var/www/cobbler/ks_mirror    <span class="hljs-comment">#导入的系统镜像列表</span><br>/var/www/cobbler/images       <span class="hljs-comment">#导入的系统镜像启动文件</span><br>/var/www/cobbler/repo_mirror  <span class="hljs-comment">#YUM源存储目录</span><br>/var/log/cobbler              <span class="hljs-comment">#日志目录</span><br>/var/log/cobbler/install.log  <span class="hljs-comment">#客户端系统安装日志</span><br>/var/log/cobbler/cobbler.log  <span class="hljs-comment">#cobbler日志 </span><br></code></pre></td></tr></table></figure><p>Cobbler主配置文件修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#生成密文密码</span><br>openssl passwd -1<br><br><span class="hljs-comment">#设置root密码</span><br>sed -i <span class="hljs-string">&#x27;s|^default_password_crypted.*|default_password_crypted: &quot;$1$Nrt/tXCR$BrRthh4tFphGyCunrGWzi/&quot;|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#设置指定tftp服务IP地址</span><br>sed -i <span class="hljs-string">&#x27;s|^next_server.*|next_server: 192.1.1.211|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#设置cobbler服务地址</span><br>sed -i <span class="hljs-string">&#x27;s|^server.*|server: 192.1.1.211|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#cobbler接管dhcp（0为关闭 1为开启）</span><br>sed -i <span class="hljs-string">&#x27;s|^manage_dhcp.*|manage_dhcp: 0|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#cobbler接管tftp（0为关闭 1为开启）</span><br>sed -i <span class="hljs-string">&#x27;s|^manage_tftpd.*|manage_tftpd: 1|g&#x27;</span> /etc/cobbler/settings<br>      <br><span class="hljs-comment">#cobbler启动服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now httpd.service<br>systemctl <span class="hljs-built_in">enable</span> --now cobblerd.service<br></code></pre></td></tr></table></figure><p>Cobbler首次检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">cobbler check<br>1 : change <span class="hljs-string">&#x27;disable&#x27;</span> to <span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-keyword">in</span> /etc/xinetd.d/tftp<br>2 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> to download them, or, <span class="hljs-keyword">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="hljs-keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> <span class="hljs-built_in">command</span> is the easiest way to resolve these requirements. <span class="hljs-comment">#可以忽略（确保系统已经安装pxelinux）</span><br>3 : <span class="hljs-built_in">enable</span> and start rsyncd.service with systemctl<br>4 : comment out <span class="hljs-string">&#x27;dists&#x27;</span> on /etc/debmirror.conf <span class="hljs-keyword">for</span> proper debian support<br>5 : comment out <span class="hljs-string">&#x27;arches&#x27;</span> on /etc/debmirror.conf <span class="hljs-keyword">for</span> proper debian support<br>6 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them <span class="hljs-comment">#可以忽略</span><br></code></pre></td></tr></table></figure><p>解决Cobbler检查报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#报错1问题解决</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF | tee /etc/xinetd.d/tftp</span><br><span class="hljs-string">service tftp</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">        socket_type             = dgram</span><br><span class="hljs-string">        protocol                = udp</span><br><span class="hljs-string">        wait                    = yes </span><br><span class="hljs-string">        user                    = root</span><br><span class="hljs-string">        server                  = /usr/sbin/in.tftpd</span><br><span class="hljs-string">        server_args             = -s /var/lib/tftpboot</span><br><span class="hljs-string">        disable                 = no</span><br><span class="hljs-string">        per_source              = 11</span><br><span class="hljs-string">        cps                     = 100 2</span><br><span class="hljs-string">        flags                   = IPv4</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#报错3问题解决</span><br>systemctl <span class="hljs-built_in">enable</span> --now rsyncd.service<br><br><span class="hljs-comment">#报错4、5问题解决</span><br>sed -i <span class="hljs-string">&#x27;s|@dists=.*|# @dists=|&#x27;</span> /etc/debmirror.conf <br>sed -i <span class="hljs-string">&#x27;s|@arches=.*|# @arches=|&#x27;</span> /etc/debmirror.conf<br></code></pre></td></tr></table></figure><p>Cobbler首次同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#再次运行检查</span><br>cobbler check<br>1 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> to download them, or, <span class="hljs-keyword">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="hljs-keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> <span class="hljs-built_in">command</span> is the easiest way to resolve these requirements.<br><br><span class="hljs-comment">#cobbler首次同步</span><br>cobbler <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><h2 id="四、配置dhcp服务"><a href="#四、配置dhcp服务" class="headerlink" title="四、配置dhcp服务"></a><strong>四、配置dhcp服务</strong></h2><p>Cobbler接管dhcp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/cobbler/dhcp.template  <br>subnet 10.99.88.0 netmask 255.255.255.0 &#123;<br>     <span class="hljs-comment"># option routers             10.99.88.55;</span><br>     <span class="hljs-comment"># option domain-name-servers 127.0.0.1;</span><br>     option subnet-mask         255.255.255.0;<br>     range dynamic-bootp        10.99.88.100 10.99.88.254;<br>     default-lease-time         21600;<br>     max-lease-time             43200;<br>     next-server                <span class="hljs-variable">$next_server</span>;<br>     class <span class="hljs-string">&quot;pxeclients&quot;</span> &#123;<br>          match <span class="hljs-keyword">if</span> substring (option vendor-class-identifier, 0, 9) = <span class="hljs-string">&quot;PXEClient&quot;</span>;<br>          <span class="hljs-keyword">if</span> option pxe-system-type = 00:02 &#123;<br>                  filename <span class="hljs-string">&quot;ia64/elilo.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:06 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:07 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:09 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>                  filename <span class="hljs-string">&quot;pxelinux.0&quot;</span>;<br>          &#125;<br>     &#125;<br><br>&#125;<br>    <br><span class="hljs-comment">#cobbler主配置文件开启dhcp接管</span><br>sed -i <span class="hljs-string">&#x27;s|^manage_dhcp.*|manage_dhcp: 1|g&#x27;</span> /etc/cobbler/settings <br><br><span class="hljs-comment">#重新同步</span><br>systemctl restart cobblerd.service<br>cobbler <span class="hljs-built_in">sync</span>  <br><br><span class="hljs-comment">#启动dhcp服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now dhcpd.service <br>systemctl restart dhcpd.service<br></code></pre></td></tr></table></figure><p>使用现有dhcp服务器–&gt;定义了上面的模板下面会自动获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改dhcp配置文件</span><br>vim /etc/dhcp/dhcpd.conf <br>subnet 10.99.88.0 netmask 255.255.255.0 &#123;<br>     <span class="hljs-comment"># option routers             10.99.88.55;</span><br>     <span class="hljs-comment"># option domain-name-servers 127.0.0.1;</span><br>     option subnet-mask         255.255.255.0;<br>     range dynamic-bootp        10.99.88.100 10.99.88.254;<br>     default-lease-time         21600;<br>     max-lease-time             43200;<br>     next-server                192.1.1.211;<br>     class <span class="hljs-string">&quot;pxeclients&quot;</span> &#123;<br>          match <span class="hljs-keyword">if</span> substring (option vendor-class-identifier, 0, 9) = <span class="hljs-string">&quot;PXEClient&quot;</span>;<br>          <span class="hljs-keyword">if</span> option pxe-system-type = 00:02 &#123;<br>                  filename <span class="hljs-string">&quot;ia64/elilo.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:06 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:07 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:09 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>                  filename <span class="hljs-string">&quot;pxelinux.0&quot;</span>;<br>          &#125;<br>     &#125;<br><br>&#125;<br><span class="hljs-comment">#启动dhcp服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now dhcpd.service <br>systemctl restart dhcpd.service<br></code></pre></td></tr></table></figure><h2 id="五、其他相关服务配置"><a href="#五、其他相关服务配置" class="headerlink" title="五、其他相关服务配置"></a><strong>五、其他相关服务配置</strong></h2><p>配置tftp服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#确保tftp的站点目录存在引导文件（cobbler检查问题的过程中已经修了tftp的配置文件）</span><br>ll /var/lib/tftpboot/<br>drwxr-xr-x  3 root root   4096 Mar  1 23:54 boot<br>drwxr-xr-x. 2 root root   4096 Oct 15  2019 etc<br>drwxr-xr-x. 2 root root   4096 Mar  1 23:54 grub  <span class="hljs-comment">#UEFI启动菜单目录</span><br>drwxr-xr-x. 7 root root   4096 Mar  1 23:54 images<br>drwxr-xr-x. 2 root root   4096 Oct 15  2019 images2<br>-rw-r--r--. 2 root root  26140 Oct 31  2018 memdisk<br>-rw-r--r--. 2 root root  54964 Mar  1 23:54 menu.c32<br>drwxr-xr-x. 2 root root   4096 Oct 15  2019 ppc<br>-rw-r--r--. 2 root root  16794 Mar  1 23:54 pxelinux.0<br>drwxr-xr-x. 2 root root   4096 Mar  1 23:56 pxelinux.cfg <span class="hljs-comment">#BIOS启动菜单目录</span><br>drwxr-xr-x. 2 root root   4096 Mar  1 23:54 s390x<br>-rw-r--r--  2 root root 198236 Feb  8 15:17 yaboot<br><br><span class="hljs-comment">#启动tftp服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now tftp.service  <br>systemctl <span class="hljs-built_in">enable</span> --now xinetd.service<br>systemctl restart tftp.service <br>systemctl restart xinetd.service<br></code></pre></td></tr></table></figure><h2 id="六、配置-Cobbler-Server"><a href="#六、配置-Cobbler-Server" class="headerlink" title="六、配置 Cobbler Server"></a>六、配置 Cobbler Server</h2><p>参考地址：<a href="https://anjia0532.github.io/2019/02/22/cobbler-win10-win-server-2019/">https://anjia0532.github.io/2019/02/22/cobbler-win10-win-server-2019/</a></p><h4 id="导入-Cobbler"><a href="#导入-Cobbler" class="headerlink" title="导入 Cobbler"></a>导入 Cobbler</h4><p>使用 WinScp 等工具，将 winpe_win10_amd64.iso 上传到 Cobbler 服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# cobbler distro add --name=windows_10_x64 --kernel=/var/lib/tftpboot/memdisk --initrd=/root/winpe_win10_amd64.iso --kopts=<span class="hljs-string">&quot;raw iso&quot;</span><br>[root@localhost ~]# <span class="hljs-built_in">touch</span> /var/lib/cobbler/kickstarts/winpe.xml<br>[root@localhost ~]# cobbler profile add --name=windows_10_x64 --distro=windows_10_x64 --kickstart=/var/lib/cobbler/kickstarts/winpe.xml<br></code></pre></td></tr></table></figure><h4 id="创建自动应答文件"><a href="#创建自动应答文件" class="headerlink" title="创建自动应答文件"></a>创建自动应答文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost kickstarts]# <span class="hljs-built_in">pwd</span><br>/var/lib/cobbler/kickstarts<br><br>[root@localhost kickstarts]# vim winpe.xml<br>&lt;!--*************************************************<br>Windows 10 Answer File Generator<br>Created using Windows AFG found at:<br>;http://www.windowsafg.com<br><br>Installation Notes<br>Location: zh-CN<br>Notes: Enter your comments here...<br>**************************************************--&gt;<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;unattend<br>    xmlns=<span class="hljs-string">&quot;urn:schemas-microsoft-com:unattend&quot;</span>&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;windowsPE&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core-WinPE&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SetupUILanguage&gt;<br>                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;<br>            &lt;/SetupUILanguage&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core-WinPE&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SetupUILanguage&gt;<br>                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;<br>            &lt;/SetupUILanguage&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;DiskConfiguration&gt;<br>                &lt;Disk wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;CreatePartitions&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                            &lt;Size&gt;100&lt;/Size&gt;<br>                        &lt;/CreatePartition&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Extend&gt;<span class="hljs-literal">true</span>&lt;/Extend&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                        &lt;/CreatePartition&gt;<br>                    &lt;/CreatePartitions&gt;<br>                    &lt;ModifyPartitions&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;System Reserved&lt;/Label&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;<br>                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;OS&lt;/Label&gt;<br>                            &lt;Letter&gt;C&lt;/Letter&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                    &lt;/ModifyPartitions&gt;<br>                    &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                    &lt;WillWipeDisk&gt;<span class="hljs-literal">true</span>&lt;/WillWipeDisk&gt;<br>                &lt;/Disk&gt;<br>            &lt;/DiskConfiguration&gt;<br>            &lt;ImageInstall&gt;<br>                &lt;OSImage&gt;<br>                    &lt;InstallTo&gt;<br>                        &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                    &lt;/InstallTo&gt;<br>                    &lt;InstallToAvailablePartition&gt;<span class="hljs-literal">false</span>&lt;/InstallToAvailablePartition&gt;<br>                &lt;/OSImage&gt;<br>            &lt;/ImageInstall&gt;<br>            &lt;UserData&gt;<br>                &lt;AcceptEula&gt;<span class="hljs-literal">true</span>&lt;/AcceptEula&gt;<br>                &lt;FullName&gt;AnJia&lt;/FullName&gt;<br>                &lt;Organization&gt;AnJia&lt;/Organization&gt;<br>                &lt;ProductKey&gt;<br>                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;<br>                &lt;/ProductKey&gt;<br>            &lt;/UserData&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;DiskConfiguration&gt;<br>                &lt;Disk wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;CreatePartitions&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                            &lt;Size&gt;100&lt;/Size&gt;<br>                        &lt;/CreatePartition&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Extend&gt;<span class="hljs-literal">true</span>&lt;/Extend&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                        &lt;/CreatePartition&gt;<br>                    &lt;/CreatePartitions&gt;<br>                    &lt;ModifyPartitions&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;System Reserved&lt;/Label&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;<br>                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;OS&lt;/Label&gt;<br>                            &lt;Letter&gt;C&lt;/Letter&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                    &lt;/ModifyPartitions&gt;<br>                    &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                    &lt;WillWipeDisk&gt;<span class="hljs-literal">true</span>&lt;/WillWipeDisk&gt;<br>                &lt;/Disk&gt;<br>            &lt;/DiskConfiguration&gt;<br>            &lt;ImageInstall&gt;<br>                &lt;OSImage&gt;<br>                    &lt;InstallTo&gt;<br>                        &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                    &lt;/InstallTo&gt;<br>                    &lt;InstallToAvailablePartition&gt;<span class="hljs-literal">false</span>&lt;/InstallToAvailablePartition&gt;<br>                &lt;/OSImage&gt;<br>            &lt;/ImageInstall&gt;<br>            &lt;UserData&gt;<br>                &lt;AcceptEula&gt;<span class="hljs-literal">true</span>&lt;/AcceptEula&gt;<br>                &lt;FullName&gt;AnJia&lt;/FullName&gt;<br>                &lt;Organization&gt;AnJia&lt;/Organization&gt;<br>                &lt;ProductKey&gt;<br>                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;<br>                &lt;/ProductKey&gt;<br>            &lt;/UserData&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;offlineServicing&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-LUA-Settings&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;EnableLUA&gt;<span class="hljs-literal">false</span>&lt;/EnableLUA&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;offlineServicing&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-LUA-Settings&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;EnableLUA&gt;<span class="hljs-literal">false</span>&lt;/EnableLUA&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;generalize&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;generalize&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;specialize&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP-UX&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipAutoActivation&gt;<span class="hljs-literal">true</span>&lt;/SkipAutoActivation&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP-UX&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipAutoActivation&gt;<span class="hljs-literal">true</span>&lt;/SkipAutoActivation&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-SQMApi&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-SQMApi&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;<br>            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;<br>            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;oobeSystem&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;AutoLogon&gt;<br>                &lt;Password&gt;<br>                    &lt;Value&gt;&lt;/Value&gt;<br>                    &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                &lt;/Password&gt;<br>                &lt;Enabled&gt;<span class="hljs-literal">true</span>&lt;/Enabled&gt;<br>                &lt;Username&gt;AnJia&lt;/Username&gt;<br>            &lt;/AutoLogon&gt;<br>            &lt;OOBE&gt;<br>                &lt;HideEULAPage&gt;<span class="hljs-literal">true</span>&lt;/HideEULAPage&gt;<br>                &lt;HideOEMRegistrationScreen&gt;<span class="hljs-literal">true</span>&lt;/HideOEMRegistrationScreen&gt;<br>                &lt;HideOnlineAccountScreens&gt;<span class="hljs-literal">true</span>&lt;/HideOnlineAccountScreens&gt;<br>                &lt;HideWirelessSetupInOOBE&gt;<span class="hljs-literal">true</span>&lt;/HideWirelessSetupInOOBE&gt;<br>                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;<br>                &lt;SkipUserOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipUserOOBE&gt;<br>                &lt;SkipMachineOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipMachineOOBE&gt;<br>                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;<br>            &lt;/OOBE&gt;<br>            &lt;UserAccounts&gt;<br>                &lt;LocalAccounts&gt;<br>                    &lt;LocalAccount wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                        &lt;Password&gt;<br>                            &lt;Value&gt;&lt;/Value&gt;<br>                            &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                        &lt;/Password&gt;<br>                        &lt;Description&gt;AnJia&lt;/Description&gt;<br>                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;<br>                        &lt;Group&gt;Administrators&lt;/Group&gt;<br>                        &lt;Name&gt;AnJia&lt;/Name&gt;<br>                    &lt;/LocalAccount&gt;<br>                &lt;/LocalAccounts&gt;<br>            &lt;/UserAccounts&gt;<br>            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;<br>            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;<br>            &lt;DisableAutoDaylightTimeSet&gt;<span class="hljs-literal">false</span>&lt;/DisableAutoDaylightTimeSet&gt;<br>            &lt;FirstLogonCommands&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Description&gt;Control Panel View&lt;/Description&gt;<br>                    &lt;Order&gt;1&lt;/Order&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">true</span>&lt;/RequiresUserInput&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;2&lt;/Order&gt;<br>                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;3&lt;/Order&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class="hljs-built_in">where</span> name=<span class="hljs-string">&quot;AnJia&quot;</span> <span class="hljs-built_in">set</span> PasswordExpires=<span class="hljs-literal">false</span>&lt;/CommandLine&gt;<br>                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;<br>                &lt;/SynchronousCommand&gt;<br>            &lt;/FirstLogonCommands&gt;<br>            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;AutoLogon&gt;<br>                &lt;Password&gt;<br>                    &lt;Value&gt;&lt;/Value&gt;<br>                    &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                &lt;/Password&gt;<br>                &lt;Enabled&gt;<span class="hljs-literal">true</span>&lt;/Enabled&gt;<br>                &lt;Username&gt;AnJia&lt;/Username&gt;<br>            &lt;/AutoLogon&gt;<br>            &lt;OOBE&gt;<br>                &lt;HideEULAPage&gt;<span class="hljs-literal">true</span>&lt;/HideEULAPage&gt;<br>                &lt;HideOEMRegistrationScreen&gt;<span class="hljs-literal">true</span>&lt;/HideOEMRegistrationScreen&gt;<br>                &lt;HideOnlineAccountScreens&gt;<span class="hljs-literal">true</span>&lt;/HideOnlineAccountScreens&gt;<br>                &lt;HideWirelessSetupInOOBE&gt;<span class="hljs-literal">true</span>&lt;/HideWirelessSetupInOOBE&gt;<br>                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;<br>                &lt;SkipUserOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipUserOOBE&gt;<br>                &lt;SkipMachineOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipMachineOOBE&gt;<br>                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;<br>            &lt;/OOBE&gt;<br>            &lt;UserAccounts&gt;<br>                &lt;LocalAccounts&gt;<br>                    &lt;LocalAccount wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                        &lt;Password&gt;<br>                            &lt;Value&gt;&lt;/Value&gt;<br>                            &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                        &lt;/Password&gt;<br>                        &lt;Description&gt;AnJia&lt;/Description&gt;<br>                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;<br>                        &lt;Group&gt;Administrators&lt;/Group&gt;<br>                        &lt;Name&gt;AnJia&lt;/Name&gt;<br>                    &lt;/LocalAccount&gt;<br>                &lt;/LocalAccounts&gt;<br>            &lt;/UserAccounts&gt;<br>            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;<br>            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;<br>            &lt;DisableAutoDaylightTimeSet&gt;<span class="hljs-literal">false</span>&lt;/DisableAutoDaylightTimeSet&gt;<br>            &lt;FirstLogonCommands&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Description&gt;Control Panel View&lt;/Description&gt;<br>                    &lt;Order&gt;1&lt;/Order&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">true</span>&lt;/RequiresUserInput&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;2&lt;/Order&gt;<br>                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;3&lt;/Order&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class="hljs-built_in">where</span> name=<span class="hljs-string">&quot;AnJia&quot;</span> <span class="hljs-built_in">set</span> PasswordExpires=<span class="hljs-literal">false</span>&lt;/CommandLine&gt;<br>                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;<br>                &lt;/SynchronousCommand&gt;<br>            &lt;/FirstLogonCommands&gt;<br>            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>&lt;/unattend&gt;<br></code></pre></td></tr></table></figure><h2 id="七、配置-samba"><a href="#七、配置-samba" class="headerlink" title="七、配置 samba"></a>七、配置 samba</h2><h4 id="安装-samba"><a href="#安装-samba" class="headerlink" title="安装 samba"></a>安装 samba</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install samba -y<br></code></pre></td></tr></table></figure><h4 id="修改-smb-config"><a href="#修改-smb-config" class="headerlink" title="修改 smb config"></a>修改 smb config</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# vi /etc/samba/smb.conf<br><br><span class="hljs-comment"># /etc/samba/smb.conf</span><br>[global]<br><span class="hljs-built_in">log</span> file = /var/log/samba/log.%m<br>max <span class="hljs-built_in">log</span> size = 5000<br>security = user<br>guest account = nobody<br>map to guest = Bad User<br>load printers = <span class="hljs-built_in">yes</span><br>cups options = raw<br><br>[share]<br>comment = share directory目录<br>path = /smb/<br>directory mask = 0755<br>create mask = 0755<br>guest ok=<span class="hljs-built_in">yes</span><br>writable=<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h4 id="启动-smb-服务"><a href="#启动-smb-服务" class="headerlink" title="启动 smb 服务"></a>启动 smb 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# service smb start<br>[root@localhost ~]# systemctl <span class="hljs-built_in">enable</span> smb<br><br></code></pre></td></tr></table></figure><h4 id="挂载-win10-系统"><a href="#挂载-win10-系统" class="headerlink" title="挂载 win10 系统"></a>挂载 win10 系统</h4><p>通过 winscp 等软件将 cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso 上传到 cobbler 服务器上,并将创建的应答文件，上传到 cobbler <code>/smb/win/win10_x64_bios_auto.xml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# <span class="hljs-built_in">mkdir</span> -p /smb/win<br>[root@localhost ~]# mount -o loop,ro zh-cn_windows_10_enterprise_ltsc_2021_x64_dvd_033b7312.iso /mnt/<br>[root@localhost ~]# <span class="hljs-built_in">cp</span> -r /mnt/* /smb/win<br>[root@localhost ~]# umount /mnt/<br></code></pre></td></tr></table></figure><h2 id="八、装-Windows10"><a href="#八、装-Windows10" class="headerlink" title="八、装 Windows10"></a>八、装 Windows10</h2><p>从 vmware 创建一台内存 4G，cpu2 核，磁盘 60G 的空盘，win10 虚拟机，然后开机。记得选 BIOS，别选 UEFI。<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6e56c329fdea4466add490819b39036e.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3b43708c6eab44819bbcb57010aa3f81.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4516113a6b4347578738dae115e4a254.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>封装一个专属自己的Windows 系统</title>
    <link href="/2025/04/16/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E8%87%AA%E5%B7%B1%E7%9A%84Windows-%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/04/16/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E8%87%AA%E5%B7%B1%E7%9A%84Windows-%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>​     因为我们公司属于零售行业，每次有新的门店开店，我们都需要安装大量我们自己软件和打印机驱动等，为了简化这种繁琐的工作和统一化管理，我们选择封装自己的iso镜像。插入u盘，即可安装我们自定义的iso镜像，并实现开机自动激活操作系统。废话不多说，直接上教程。本次以vmware虚拟机为案例，实体机操作也大差不差。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>准备干净系统</li><li>加入需要的软件</li><li>实现开机自动激活Windows</li><li>dism生成install.wim文件</li><li>anyburn替换install.wim文件</li><li>anyburn生成新的iso镜像</li><li>烧录镜像到u盘</li></ul><h1 id="一、准备Windows系统"><a href="#一、准备Windows系统" class="headerlink" title="一、准备Windows系统"></a><strong>一、准备Windows系统</strong></h1><p>1.虚拟机添加硬盘</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/44500211ea6b406e89329a537e0479ac.png" alt="img"></p><p>2.Windows添加磁盘</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4e908b5765384ef6a77cdcb1b5c24dd0.png" alt="img"></p><p>3.查看卷 </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8f0680eb1ab14ce8ad7a07706026567e.png" alt="img"></p><p>4.加入自己需要封装的软件 </p><p>5.关机，按F2进入biso，修改启动项CD-ROM为第一启动项【实体机修改UEFI为U盘启动或者直接进PE界面操作】</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/21ecbdf8e10b4317b5eb4d047bed1b5c.png" alt="img"></p><p> 6.按照以下步骤新增启动文件，也可以选择进入PE界面制作制作.wim启动文件。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/71279447b14f40a18dbb6c4bd9359c9c.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/34b638cf3c0743b0aa52d169981da9ab.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d3db2fcbcf4b4e8a86821c9dacb8866b.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/05ce4b65f54449709a99756f42382746.png" alt="img"></p><p>7.使用dism生成install.wim文件</p><p>这里系统盘是E盘</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a0d638875ef04f4a8930c20c176aba0d.png" alt="img"></p><p> 8.生成.win文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dism <span class="hljs-string">/capture-image</span> <span class="hljs-string">/imagefile</span><span class="hljs-function">:D</span>:\install.wim <span class="hljs-string">/capturedir</span><span class="hljs-function">:E</span>:\ <span class="hljs-string">/Name</span><span class="hljs-function">:Windows10_kezhihua</span><br></code></pre></td></tr></table></figure><ul><li>**<code>dism</code>**：调用 DISM 工具。</li><li>**<code>/capture-image</code>**：指定要捕获一个映像文件（<code>install.wim</code>）。</li><li>**<code>/imagefile:D:\install.wim</code>**：指定捕获的映像文件的保存路径和名称（在此示例中，保存到 <code>D:</code> 驱动器的 <code>install.wim</code> 文件中）。</li><li>**<code>/capturedir:E:\</code>**：指定要捕获的源目录。<code>E:</code> 是源系统所在的驱动器或分区。</li><li>**<code>/Name:Windows10_kezhihua</code>**：给捕获的映像文件指定一个名称（此例中，名称为 <code>Windows10_kezhihua</code>）。</li></ul><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/aee6e64b9d774947bb7515da2fb82507.png" alt="img"></p><p> 9.关闭命令行界面，点击继续</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/82a34ec080024db4848790c2a329a0ff.png" alt="img"><br>10.查看生成的install.wim文件</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5af42ac11a6b4fefbb7b686b2a540690.png" alt="img"></p><h1 id="二、实现Windows开机永久激活"><a href="#二、实现Windows开机永久激活" class="headerlink" title="二、实现Windows开机永久激活"></a><strong>二、实现Windows开机永久激活</strong></h1><p>使用数字许可证，加入Windows定时任务，开机执行。执行完成之后再自删。大概就是这个思路</p><p>参考地址：</p><p><a href="https://github.com/TGSAN/CMWTAT_Digital_Edition/issues/81">https://github.com/TGSAN/CMWTAT_Digital_Edition/issues/81</a></p><p>直接使用脚本无法实现免交互自动激活，需要手动输入1</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172651905.png" alt="image-20250416172651905"></p><p>修改脚本内容，实现免交互自动激活</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172710159.png" alt="image-20250416172710159"></p><p>使用bat脚本开机自动激活</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>:: 设置文件路径<br><span class="hljs-built_in">set</span> &quot;activation_script=C:\Microsoft-Activation-Scripts-master\MAS\Separate-Files-Version\Activators\HWID_Activation.<span class="hljs-built_in">cmd</span>&quot;<br><br>:: 检查文件是否存在<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> &quot;<span class="hljs-variable">%activation_script%</span>&quot; (<br>    <span class="hljs-built_in">echo</span> Running HWID Activation script...<br>    :: 执行 HWID_Activation.<span class="hljs-built_in">cmd</span> 文件<br>    <span class="hljs-keyword">call</span> &quot;<span class="hljs-variable">%activation_script%</span>&quot;<br>) <span class="hljs-keyword">else</span> (<br>    <span class="hljs-built_in">echo</span> Error: HWID_Activation.<span class="hljs-built_in">cmd</span> file <span class="hljs-keyword">not</span> found!<br>)<br><br>:: 等待用户按键后退出<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><p>加入Windows任务计划</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172756740.png" alt="image-20250416172756740"></p><p>创建基本任务</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172809175.png" alt="image-20250416172809175"></p><p>创建任务名称</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172821507.png" alt="image-20250416172821507"></p><p>选择计算机启动时</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172838445.png" alt="image-20250416172838445"></p><p>添加上面所写bat脚本路径</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172849228.png" alt="image-20250416172849228"></p><p>完成</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172902047.png" alt="image-20250416172902047"></p><p>因为脚本需要联网激活。所有更改计算机属性。选择联网时启动</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172915961.png" alt="image-20250416172915961"></p><p>这样就实现了开机自动永久激活Windows操作系统</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172929292.png" alt="image-20250416172929292"></p><h1 id="三、编辑iso镜像"><a href="#三、编辑iso镜像" class="headerlink" title="三、编辑iso镜像"></a><strong>三、编辑iso镜像</strong></h1><p>这里我们使用anyburn工具，将生成的install.wim加入镜像里面</p><p>anyburn地址：<a href="https://www.anyburn.com/download.php">Download AnyBurn</a></p><p>编辑镜像</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d249d2303afa4beca3337f6a12e8b51c.png" alt="img"></p><p>在sources目录中添加install.wim（有些Windows官方镜像中包含install.esd文件，需要删除这个文件）</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/343bbd5335ce419a8d79219d26b3db70.png" alt="img"></p><p>生成镜像</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e67d15ab6f2549be85af906a9c6d2194.png" alt="img"></p><h1 id="四、烧录镜像"><a href="#四、烧录镜像" class="headerlink" title="四、烧录镜像"></a><strong>四、烧录镜像</strong></h1><p>地址：<a href="https://rufus.ie/en/">Rufus - Create bootable USB drives the easy way</a></p><p>使用rufus烧录镜像，大于4G需要使用NTFS文件格式</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d2008ae8a7f7452a91418a1812d40ab8.png" alt="img"></p><p>实际工作中可以配合Windows的WDS服务,这个需要解决DHCP中继问题，实现远程一站式部署。</p><p>还可以使用Cobbler+kickstart配合，也可以实现全自动一站式远程装机，感兴趣小伙伴可以参考我这篇博文：<a href="https://blog.csdn.net/m0_69326428/article/details/144848007">Cobbler+kickstart实现批量全自动装机_cobbler批量安装-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s故障案例</title>
    <link href="/2025/04/16/k8s%E6%95%85%E9%9A%9C%E6%A1%88%E4%BE%8B/"/>
    <url>/2025/04/16/k8s%E6%95%85%E9%9A%9C%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题现象与背景"><a href="#一、问题现象与背景" class="headerlink" title="一、问题现象与背景"></a><strong>一、问题现象与背景</strong></h1><p>某电商平台生产环境的Kubernetes集群在促销活动期间突发大规模Pod驱逐，具体表现如下：</p><ol><li><p><strong>Pod频繁重启</strong>：超过30%的Pod进入<code>Evicted</code>状态，核心服务（如订单支付、购物车）的Pod被反复驱逐。</p></li><li><p><strong>节点资源耗尽</strong>：多个Worker节点的内存使用率超过95%，kubelet日志持续输出<code>MemoryPressure</code>警告。</p></li><li><p><strong>监控告警</strong>：<br>   Prometheus触发<code>node_memory_available_bytes &lt; 10%</code>告警。<br>   Grafana面板显示部分节点的<code>kubelet_evictions</code>指标飙升。</p></li><li><p><strong>业务影响</strong>：用户支付失败率从0.1%上升至15%，直接影响营收。</p></li></ol><h1 id="二、问题根因分析"><a href="#二、问题根因分析" class="headerlink" title="二、问题根因分析"></a><strong>二、问题根因分析</strong></h1><h5 id="1-初步排查：节点与Pod状态"><a href="#1-初步排查：节点与Pod状态" class="headerlink" title="1. 初步排查：节点与Pod状态"></a><strong>1. 初步排查：节点与Pod状态</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看节点资源使用情况（按内存排序）</span><br>kubectl top nodes --sort-by=memory<br><br><span class="hljs-comment"># 输出示例：</span><br>NAME           CPU(cores)  CPU%   MEMORY(bytes)  MEMORY%<br>worker-node-1  5800m       72%    6143Mi         98%<br>worker-node-2  4200m       52%    5892Mi         95%<br>worker-node-3  3800m       47%    4321Mi         70%<br><br><span class="hljs-comment"># 检查被驱逐的Pod</span><br>kubectl get pods -A -o wide | grep Evicted | <span class="hljs-built_in">wc</span> -l  <span class="hljs-comment"># 输出：47</span><br><br><span class="hljs-comment"># 查看某个被驱逐Pod的详细事件</span><br>kubectl describe pod payment-service-abcde -n production<br></code></pre></td></tr></table></figure><p><strong>关键日志</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Events:<br>  Type     Reason     Age   From               Message<br>  ----     ------     ----  ----               -------<br>  Warning  Evicted    2m    kubelet            The node was low on resource: memory.<br>  Normal   Killing    2m    kubelet            Stopping container payment-service<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：节点内存不足触发kubelet的主动驱逐机制。</p><h5 id="2-深入定位：资源消耗来源"><a href="#2-深入定位：资源消耗来源" class="headerlink" title="2. 深入定位：资源消耗来源"></a><strong>2. 深入定位：资源消耗来源</strong></h5><p><strong>步骤1：识别高内存消耗Pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 按内存使用量排序所有Pod</span><br>kubectl top pods -A --sort-by=memory --use-protocol-buffers<br><br><span class="hljs-comment"># 输出示例：</span><br>NAMESPACE    POD_NAME                     MEMORY(Mi)<br>production   recommendation-service-xyz   1024<br>production   payment-service-abc          896<br>logging      fluentd-7k8jh                512<br></code></pre></td></tr></table></figure><p><strong>发现</strong>：<code>recommendation-service</code>的Pod内存占用异常高。</p><p><strong>步骤2：检查Pod资源限制配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pod recommendation-service-xyz -n production -o yaml | grep -A 5 resources<br><br><span class="hljs-comment"># 输出示例：</span><br>resources:<br>  requests:<br>    cpu: <span class="hljs-string">&quot;500m&quot;</span><br>  limits:<br>    cpu: <span class="hljs-string">&quot;1000m&quot;</span><br></code></pre></td></tr></table></figure><p><strong>问题</strong>：该Pod未设置内存限制（<code>limits.memory</code>缺失），导致内存泄漏时无约束。</p><p><strong>步骤3：分析容器内存使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入节点查看容器级内存占用（需SSH登录节点）</span><br>docker stats --format <span class="hljs-string">&quot;table &#123;&#123;.Container&#125;&#125;\t&#123;&#123;.Name&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 输出示例：</span><br>CONTAINER   NAME                      MEM USAGE<br>a1b2c3d4    recommendation-service    1.2GiB / 1.2GiB<br></code></pre></td></tr></table></figure><p><strong>发现</strong>：容器内存占用已突破1GiB，但未配置<code>limits.memory</code>，导致节点内存耗尽。</p><h1 id="三、紧急处理措施"><a href="#三、紧急处理措施" class="headerlink" title="三、紧急处理措施"></a><strong>三、紧急处理措施</strong></h1><h5 id="1-快速扩容与负载分流"><a href="#1-快速扩容与负载分流" class="headerlink" title="1. 快速扩容与负载分流"></a><strong>1. 快速扩容与负载分流</strong></h5><ul><li><strong>横向扩展节点</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用Cluster Autoscaler自动扩容（假设配置了节点组）</span><br>kubectl scale deployment cluster-autoscaler --replicas=3 -n kube-system<br></code></pre></td></tr></table></figure><p>• <strong>临时调整Pod副本数</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 减少非核心服务副本数，释放资源</span><br>kubectl scale deployment batch-job-processor --replicas=0 -n background<br><br><span class="hljs-comment"># 增加核心服务副本数，分散负载</span><br>kubectl scale deployment payment-service --replicas=10 -n production<br></code></pre></td></tr></table></figure><h5 id="2-手动驱逐问题Pod"><a href="#2-手动驱逐问题Pod" class="headerlink" title="2. 手动驱逐问题Pod"></a><strong>2. 手动驱逐问题Pod</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 强制删除高内存占用的Pod（触发重新调度）</span><br>kubectl delete pod recommendation-service-xyz -n production --force --grace-period=0<br><br><span class="hljs-comment"># 观察Pod重建后的内存使用</span><br>watch -n 1 <span class="hljs-string">&quot;kubectl top pods -n production | grep recommendation-service&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-动态调整kubelet驱逐阈值"><a href="#3-动态调整kubelet驱逐阈值" class="headerlink" title="3. 动态调整kubelet驱逐阈值"></a><strong>3. 动态调整kubelet驱逐阈值</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时修改kubelet配置（避免更多Pod被驱逐）</span><br><span class="hljs-built_in">sudo</span> vi /etc/kubernetes/kubelet.conf<br><span class="hljs-comment"># 添加参数：</span><br>evictionHard:<br>  memory.available: <span class="hljs-string">&quot;10%&quot;</span><br>  nodefs.available: <span class="hljs-string">&quot;5%&quot;</span><br><br><span class="hljs-comment"># 重启kubelet</span><br><span class="hljs-built_in">sudo</span> systemctl restart kubelet<br></code></pre></td></tr></table></figure><h1 id="四、根因修复与长期优化"><a href="#四、根因修复与长期优化" class="headerlink" title="四、根因修复与长期优化"></a><strong>四、根因修复与长期优化</strong></h1><h5 id="1-资源配额规范化"><a href="#1-资源配额规范化" class="headerlink" title="1. 资源配额规范化"></a><strong>1. 资源配额规范化</strong></h5><ul><li><strong>为所有Pod添加内存限制</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># deployment.yaml示例</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: recommendation-service<br>spec:<br>  template:<br>    spec:<br>      containers:<br>      - name: app<br>        resources:<br>          requests:<br>            memory: <span class="hljs-string">&quot;512Mi&quot;</span><br>            cpu: <span class="hljs-string">&quot;500m&quot;</span><br>          limits:<br>            memory: <span class="hljs-string">&quot;1024Mi&quot;</span>  <span class="hljs-comment"># 硬性限制内存上限</span><br>            cpu: <span class="hljs-string">&quot;2000m</span><br></code></pre></td></tr></table></figure><p>• <strong>启用命名空间级ResourceQuota</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: ResourceQuota<br>metadata:<br>  name: production-quota<br>  namespace: production<br>spec:<br>  hard:<br>    requests.memory: <span class="hljs-string">&quot;100Gi&quot;</span><br>    limits.memory: <span class="hljs-string">&quot;200Gi&quot;</span><br>    pods: <span class="hljs-string">&quot;200&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-自动化弹性伸缩"><a href="#2-自动化弹性伸缩" class="headerlink" title="2. 自动化弹性伸缩"></a><strong>2. 自动化弹性伸缩</strong></h5><ul><li><strong>配置HPA（基于内存）</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl autoscale deployment recommendation-service -n production \<br>  --cpu-percent=70 \<br>  --memory-percent=80 \<br>  --min=3 \<br>  --max=20<br></code></pre></td></tr></table></figure><p>• <strong>使用VPA（垂直扩缩容）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: autoscaling.k8s.io/v1<br>kind: VerticalPodAutoscaler<br>metadata:<br>  name: recommendation-service-vpa<br>spec:<br>  targetRef:<br>    apiVersion: <span class="hljs-string">&quot;apps/v1&quot;</span><br>    kind: Deployment<br>    name: recommendation-service<br>  updatePolicy:<br>    updateMode: <span class="hljs-string">&quot;Auto&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-内存泄漏根治"><a href="#3-内存泄漏根治" class="headerlink" title="3. 内存泄漏根治"></a><strong>3. 内存泄漏根治</strong></h5><ul><li><strong>使用pprof进行堆分析</strong>（以Go服务为例）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">import _ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br><br>func <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>  go <span class="hljs-function"><span class="hljs-title">func</span></span>() &#123;<br>    log.Println(http.ListenAndServe(<span class="hljs-string">&quot;:6060&quot;</span>, nil))<br>  &#125;()<br>  // 业务代码<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成堆内存快照</span><br>go tool pprof http://localhost:6060/debug/pprof/heap<br><br><span class="hljs-comment"># 分析内存分配</span><br>(pprof) top 10<br>(pprof) list leakFunction<br></code></pre></td></tr></table></figure><ul><li><strong>优化代码逻辑</strong>：修复循环引用、缓存未释放等问题。</li></ul><h1 id="五、监控与告警体系升级"><a href="#五、监控与告警体系升级" class="headerlink" title="五、监控与告警体系升级"></a><strong>五、监控与告警体系升级</strong></h1><h5 id="1-Prometheus监控规则"><a href="#1-Prometheus监控规则" class="headerlink" title="1. Prometheus监控规则"></a><strong>1. Prometheus监控规则</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># prometheus-rules.yaml</span><br><span class="hljs-built_in">groups</span>:<br>- name: Kubernetes-Resource<br>  rules:<br>  - alert: NodeMemoryPressure<br>    <span class="hljs-built_in">expr</span>: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 &gt; 85<br>    <span class="hljs-keyword">for</span>: 5m<br>    labels:<br>      severity: critical<br>    annotations:<br>      summary: <span class="hljs-string">&quot;节点内存不足 (&#123;&#123; <span class="hljs-variable">$labels</span>.instance &#125;&#125;)&quot;</span><br>      description: <span class="hljs-string">&quot;节点 &#123;&#123; <span class="hljs-variable">$labels</span>.instance &#125;&#125; 内存使用率超过85%，当前值 &#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;%&quot;</span><br><br>  - alert: PodEvictionRateHigh<br>    <span class="hljs-built_in">expr</span>: rate(kube_pod_status_evicted[1h]) &gt; 0<br>    <span class="hljs-keyword">for</span>: 10m<br>    labels:<br>      severity: warning<br></code></pre></td></tr></table></figure><h5 id="2-Grafana可视化面板"><a href="#2-Grafana可视化面板" class="headerlink" title="2. Grafana可视化面板"></a><strong>2. Grafana可视化面板</strong></h5><ul><li><p><strong>关键面板配置</strong>：</p></li><li><ul><li><strong>节点资源视图</strong>：<code>node_memory_available_bytes</code>、<code>node_cpu_usage</code></li><li><strong>Pod驱逐统计</strong>：<code>sum(kube_pod_status_evicted) by (namespace)</code></li><li><strong>HPA伸缩历史</strong>：<code>kube_horizontalpodautoscaler_status_current_replicas</code></li></ul></li></ul><h5 id="3-日志聚合分析"><a href="#3-日志聚合分析" class="headerlink" title="3. 日志聚合分析"></a><strong>3. 日志聚合分析</strong></h5><ul><li><strong>Fluentd + Elasticsearch配置</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;match kube.**&gt;<br>  @<span class="hljs-built_in">type</span> elasticsearch<br>  host elasticsearch.production.svc<br>  port 9200<br>  logstash_format <span class="hljs-literal">true</span><br>  logstash_prefix k8s<br>&lt;/match&gt;<br></code></pre></td></tr></table></figure><p>• <strong>关键日志筛选</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Kibana查询被驱逐Pod的日志</span><br>kubernetes.labels.app: <span class="hljs-string">&quot;payment-service&quot;</span> AND message: <span class="hljs-string">&quot;Evicted&quot;</span><br></code></pre></td></tr></table></figure><h1 id="六、预防与容灾演练"><a href="#六、预防与容灾演练" class="headerlink" title="六、预防与容灾演练"></a><strong>六、预防与容灾演练</strong></h1><h5 id="1-混沌工程实践"><a href="#1-混沌工程实践" class="headerlink" title="1. 混沌工程实践"></a><strong>1. 混沌工程实践</strong></h5><ul><li><strong>模拟节点故障</strong>（使用Chaos Mesh）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: chaos-mesh.org/v1alpha1<br>kind: NodeFailure<br>metadata:<br>  name: node-failure-test<br>spec:<br>  action: shutdown<br>  duration: <span class="hljs-string">&quot;10m&quot;</span><br>  selector:<br>    nodes:<br>    - worker-node-1<br></code></pre></td></tr></table></figure><ul><li><p><strong>验证集群自愈能力</strong>：</p></li><li><p>观察Pod是否自动迁移到健康节点。</p></li><li><p>检查HPA是否按负载自动扩展。</p></li></ul><h5 id="2-定期压力测试"><a href="#2-定期压力测试" class="headerlink" title="2. 定期压力测试"></a><strong>2. 定期压力测试</strong></h5><ul><li><strong>使用Locust模拟流量高峰</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">from locust import HttpUser, task<br><br>class PaymentUser(HttpUser):<br>    @task<br>    def create_order(self):<br>        self.client.post(<span class="hljs-string">&quot;/api/order&quot;</span>, json=&#123;<span class="hljs-string">&quot;items&quot;</span>: [...]&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">locust -f load_test.py --headless -u 1000 -r 100<br></code></pre></td></tr></table></figure><h5 id="3-架构优化"><a href="#3-架构优化" class="headerlink" title="3. 架构优化"></a><strong>3. 架构优化</strong></h5><ul><li><strong>服务网格化</strong>：通过Istio实现熔断和降级。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: networking.istio.io/v1alpha3<br>kind: DestinationRule<br>metadata:<br>  name: payment-service<br>spec:<br>  host: payment-service.production.svc.cluster.local<br>  trafficPolicy:<br>    outlierDetection:<br>      consecutiveErrors: 5<br>      interval: 1m<br>      baseEjectionTime: 3m<br></code></pre></td></tr></table></figure><h1 id="七、总结与经验"><a href="#七、总结与经验" class="headerlink" title="七、总结与经验"></a><strong>七、总结与经验</strong></h1><p><strong>解决效果</strong>：</p><ul><li>紧急措施在30分钟内恢复核心服务，Pod驱逐率降至0。</li><li>通过内存限制和HPA配置，集群资源利用率稳定在70%-80%。</li><li>后续3个月未发生类似事件，故障MTTR（平均修复时间）从4小时缩短至15分钟。</li></ul><p><strong>关键经验</strong>：</p><ol><li><strong>防御性编码</strong>：所有服务必须设置资源<code>limits</code>，并在CI&#x2F;CD流水线中强制检查。</li><li><strong>监控全覆盖</strong>：从节点到Pod层级的资源监控需实现100%覆盖。</li><li><strong>自动化优先</strong>：依赖Cluster Autoscaler、HPA等自动化工具，减少人工干预。</li><li><strong>定期演练</strong>：通过混沌工程暴露系统脆弱点，持续优化架构韧性。</li></ol><p>通过系统化的故障处理与架构优化，Kubernetes集群的稳定性达到99.99% SLA，支撑了后续多次大促活动。</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOM排查思路</title>
    <link href="/2025/04/16/OOM%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/"/>
    <url>/2025/04/16/OOM%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p> K8S + 容器的云原生生态，改变了服务的交付方式，自愈能力和自动扩缩等功能简直不要太好用。</p><p>有好的地方咱要夸，不好的地方咱也要说，真正的业务是部署于容器内部，而容器之外，又有一逻辑层 Pod 。</p><p>对于容器和 K8S 不怎么熟悉的人，一旦程序发生了问题，排查问题就是个头疼的问题。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>事情的主角是 kubevirt 的一个开源项目叫 cdi，它的用途是在虚拟机启动之前将虚拟机的镜像导入到系统盘中。</p><p>在使用过程中，我们发现 cdi 在导入数据时会占用大量的内存空间。</p><p>而 cdi-controller 在创建 cdi-importer 的 pod 时，默认限定其最高只能使用 600M 的内存，到最后呢，pod 就发生了 OOMKilled</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># kubectl get po</span><br>NAME                               READY   STATUS      RESTARTS   AGE<br>importer-wbm-vda          <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     OOMKilled   <span class="hljs-number">1</span>          <span class="hljs-number">76</span>s<br></code></pre></td></tr></table></figure><h2 id="一、查看-Pod-状态"><a href="#一、查看-Pod-状态" class="headerlink" title="一、查看 Pod 状态"></a><strong>一、查看 Pod 状态</strong></h2><p>首先，检查相关 Pod 的状态，确定是否因为内存超限被杀死。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[root@master01 ~]<span class="hljs-meta"># kubectl describe pod <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>定位关键词</strong></p><p>如果容器因为 OOM 被杀死，通常会显示如下信息</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">State:</span>     Terminated<br><span class="hljs-symbol">Reason:</span>    OOMKilled<br></code></pre></td></tr></table></figure><p><strong>查看 <code>Events</code> 部分：</strong></p><p>如果 Pod 因为内存不足而被 OOM Killer 杀死，你会在事件中看到类似的提示</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">Warning</span>  OOMKilling  kubelet, &lt;node-<span class="hljs-type">name</span>&gt;  Memory cgroup <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> memory: Kill process<br></code></pre></td></tr></table></figure><h2 id="二、查看容器日志"><a href="#二、查看容器日志" class="headerlink" title="二、查看容器日志"></a>二、查看容器日志</h2><p>如果 Pod 被杀死，可以通过查看容器日志，了解容器在发生 OOM 之前的行为。这有助于判断是否存在内存泄漏或内存使用过高的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[root@master01 ~]<span class="hljs-meta"># kubectl logs <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span> --previous</span><br></code></pre></td></tr></table></figure><ul><li>使用 <code>--previous</code> 参数查看被终止容器的日志。</li><li>如果容器在 OOM 之前没有记录错误信息，通常表示容器已经用尽了可用内存，导致进程直接被杀死。</li></ul><h2 id="三、查看-Kubelet-和-Node-日志"><a href="#三、查看-Kubelet-和-Node-日志" class="headerlink" title="三、查看 Kubelet 和 Node 日志"></a>三、查看 Kubelet 和 Node 日志</h2><p><strong>查看 Kubelet 日志</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># journalctl -u kubelet -f</span><br></code></pre></td></tr></table></figure><p><strong>或者直接查找与 OOM 相关的日志</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># journalctl -u kubelet | grep -i <span class="hljs-string">&#x27;oom&#x27;</span></span><br></code></pre></td></tr></table></figure><p><strong>查看 Node 上的 <code>dmesg</code> 日志，确认是否存在 OOM Killer 杀死进程的记录</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># dmesg | grep -i <span class="hljs-string">&#x27;oom&#x27;</span></span><br></code></pre></td></tr></table></figure><h2 id="四、查看资源限制（CPU-和内存）"><a href="#四、查看资源限制（CPU-和内存）" class="headerlink" title="四、查看资源限制（CPU 和内存）"></a>四、查看资源限制（CPU 和内存）</h2><p>确保 Pod 的资源限制配置正确。如果 Pod 的内存限制（<code>memory limit</code>）设置得太低，可能会导致 OOM 错误</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[root@master01 ~]<span class="hljs-meta"># kubectl get pod <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span> -o yaml</span><br></code></pre></td></tr></table></figure><p>检查 <code>resources</code> 配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">resources:</span><br><span class="hljs-symbol">  requests:</span><br><span class="hljs-symbol">    memory:</span> <span class="hljs-string">&quot;256Mi&quot;</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-string">&quot;250m&quot;</span><br><span class="hljs-symbol">  limits:</span><br><span class="hljs-symbol">    memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br></code></pre></td></tr></table></figure><h2 id="五、分析容器内存使用"><a href="#五、分析容器内存使用" class="headerlink" title="五、分析容器内存使用"></a>五、分析容器内存使用</h2><p>查看容器的内存使用情况，确认容器是否超过了内存限制。可以使用 <strong><code>kubectl top</code></strong> 来查看资源使用情况</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[root@master01 ~]<span class="hljs-meta"># kubectl top pod <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>该命令会显示容器当前的内存和 CPU 使用情况。</li><li>比较容器的 <code>memory usage</code> 和 <code>memory limit</code>，如果容器接近其内存限制，就可能发生 OOM 错误。</li></ul><h2 id="六、分析节点内存压力"><a href="#六、分析节点内存压力" class="headerlink" title="六、分析节点内存压力"></a>六、分析节点内存压力</h2><p>OOM 错误可能不仅仅是由于容器本身的内存使用高导致的，也可能是因为节点的整体内存资源不足</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@master01 ~]<span class="hljs-comment"># kubectl describe node &lt;node-name&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、检查内存泄漏"><a href="#七、检查内存泄漏" class="headerlink" title="七、检查内存泄漏"></a>七、检查内存泄漏</h2><p>如果某个容器频繁 OOM，并且它的内存使用量持续增长，可能是程序中存在内存泄漏</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-title">[</span><span class="hljs-comment">root@master01 ~</span><span class="hljs-title">]</span><span class="hljs-comment"># vmstat 1</span><br><span class="hljs-comment">procs</span> <span class="hljs-literal">-----------</span><span class="hljs-comment">memory</span><span class="hljs-literal">----------</span> <span class="hljs-literal">---</span><span class="hljs-comment">swap</span><span class="hljs-literal">--</span> <span class="hljs-literal">-----</span><span class="hljs-comment">io</span><span class="hljs-literal">----</span> <span class="hljs-literal">-</span><span class="hljs-comment">system</span><span class="hljs-literal">--</span> <span class="hljs-literal">-------</span><span class="hljs-comment">cpu</span><span class="hljs-literal">-------</span><br> <span class="hljs-comment">r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st gu</span><br> <span class="hljs-comment">1  0      0 3099200 590472 1748204    0    0     3    37  527    1  0  0 99  0  0  0</span><br> <span class="hljs-comment">0  0      0 3100144 590472 1748244    0    0     0     0  580  501  0  0 100  0  0  0</span><br> <span class="hljs-comment">0  0      0 3100708 590472 1748244    0    0     0     0  627  478  0  0 100  0  0  0</span><br> <span class="hljs-comment">0  0      0 3096128 590472 1748244    0    0     0     0 1628 1672  1  1 98  0  0  0</span><br></code></pre></td></tr></table></figure><h2 id="八、设置合理的资源限制"><a href="#八、设置合理的资源限制" class="headerlink" title="八、设置合理的资源限制"></a>八、设置合理的资源限制</h2><p>为了避免 OOM 问题的再次发生，确保设置合理的内存请求（<code>requests</code>）和限制（<code>limits</code>）</p><ul><li>**<code>requests</code>**：表示容器启动时需要的最小内存。Kubernetes 会根据 <code>requests</code> 为容器分配内存，确保容器有足够的资源启动。</li><li>**<code>limits</code>**：表示容器可以使用的最大内存。容器使用超过该限制的内存会被 OOM Killer 杀死。</li></ul><h2 id="九、缓存问题"><a href="#九、缓存问题" class="headerlink" title="九、缓存问题"></a>九、缓存问题</h2><p>通过不断的 Google 搜索，我查到了 kubectl top 得到的内存使用数据原来是这么计算的</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">memory</span>.usage_in_bytes-total_inactive_file<br></code></pre></td></tr></table></figure><p>从这个公式可以看出， kubectl top 得到的内存使用数据原来是包含 cache 的。</p><p>正常的 cache 可以提高磁盘数据的读写数据，在读的时候，会拷贝一份文件数据放到内存中，这部分是可回收的，一旦程序内存不足了，会回收部分 cache 的空间，保证程序的正常运行。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/cd1012d805b44daca936117c8b9876aa.png" alt="img"></p><p>可见读文件的缓存，不会影响内存的申请，更别说 OOM，但在写的时候，情况就不一样了</p><p>在写的时候，由于进程处理数据的速度，可能会远大于数据落盘的速度，所以为提高格式转化和数据导入的速度，一般会先将转化好的数据存入缓存中，存入缓存后，进程可以立马 return 回去继续下一堆数据的处理，不用傻傻地等待数据全写入磁盘。</p><p>而存在于缓存之中的数据，则由操作系统同步写入磁盘，这样一来，数据落盘就变成了一个异步的过程，大大提高了写入的速度。</p><p>如果 qemu-img 处理数据的速度远大于 cache 存入磁盘的速度，就会出现内存不足。</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于服务器挖矿处理思路</title>
    <link href="/2025/04/16/%E5%85%B3%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%96%E7%9F%BF%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF/"/>
    <url>/2025/04/16/%E5%85%B3%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%96%E7%9F%BF%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h3><p>起因是有开发人员报障，程序在发布后无法正常运行，一直处于在重启的状态。</p><p>一开始我以为是程序本身的问题，但在查看服务日志后，并未发现程序有任何错误。</p><p>在查看监控系统时，发现该服务器节点CPU 利用率达到了100%，难怪程序已经无法运行。并且，还发现有这种情况的节点不止一个，整个环境中有好几台服务器都是CPU 100%的情况</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/54b89b99fe603651bad5853bf18f8247.png"></p><h3 id="一、查看进程"><a href="#一、查看进程" class="headerlink" title="一、查看进程"></a>一、查看进程</h3><p>使用Top命令查看进程 ，可以看到CPU的使用率已经跑满。但在进程列表中却未发现有异常进程 。除有个别业务程序占用CPU较多，但关掉后情况并未改善。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e00d13399b5798d88997449ce2f10757.png"></p><h3 id="二、查看网络访问"><a href="#二、查看网络访问" class="headerlink" title="二、查看网络访问"></a>二、查看网络访问</h3><p>此时，怀疑是机器被入侵了，因此通过下面命令查看网络连接的情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -an |grep ESTABLISHED<br></code></pre></td></tr></table></figure><p>在查看几台机器后，发现有问题的机器都有一个外网连接，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcp        0      0 10.12.15.7:39410        86.107.101.103:7643     ESTABLISHED<br><br>虽然每台机器连接的外网IP地址不同，但端口号统一都是 7643，并且查询地址后发现都是国外地址。<br>由于相关的服务器并没有国外的业务，因此可以确定被病毒入侵无疑了。<br></code></pre></td></tr></table></figure><h3 id="三、查看启动项"><a href="#三、查看启动项" class="headerlink" title="三、查看启动项"></a>三、查看启动项</h3><p>使用下面命令查看开机启动项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl list-unit-files |grep enabled<br></code></pre></td></tr></table></figure><p>在启动项中，发现有一个名为OOlmeN2R.service 的可疑服务，怀疑就是病毒。（注：该病毒在不同机器的服务名称皆不同，随机的。但特点是乱码，有大小写或数字。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">auditd.service                                enabled<br>autovt@.service                               enabled<br>crond.service                                 enabled<br>docker.service                                enabled<br>OOlmeN2R.service                              enabled   &lt;-------<br>rhel-autorelabel.service                      enabled<br>rhel-configure.service                        enabled<br>rhel-dmesg.service                            enabled<br>rhel-domainname.service                       enabled<br>rhel-import-state.service                     enabled<br>rhel-loadmodules.service                      enabled<br>rhel-readonly.service                         enabled<br>rsyslog.service                               enabled<br>sshd.service                                  enabled<br></code></pre></td></tr></table></figure><p>通过下面命令，查看服务的启动状态以及启动文件的存放位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status OOlmeN2R.service<br></code></pre></td></tr></table></figure><p>接着，找到该启动文件，并查看文件内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> /usr/lib/systemd/system/OOlmeN2R.service<br>[Unit]<br>Description=service<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/bin/eWqAVtbn<br>RemainAfterExit=<span class="hljs-built_in">yes</span><br>Restart=always<br>RestartSec=60s<br></code></pre></td></tr></table></figure><p>可以看到，服务在启动时调用了一个&#x2F;bin&#x2F;eWqAVtbn 文件，这应该是就病毒的执行文件了。</p><h3 id="四、清除病毒"><a href="#四、清除病毒" class="headerlink" title="四、清除病毒"></a>四、清除病毒</h3><p>在发现病毒文件后，现在我们可以开始来清除病毒了。</p><p>停止病毒服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop OOlmeN2R.service<br>systemctl <span class="hljs-built_in">disable</span> OOlmeN2R.service<br></code></pre></td></tr></table></figure><p>删除相关病毒文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /bin/eWqAVtbn   <span class="hljs-comment">#删除执行文件</span><br><span class="hljs-built_in">rm</span> /usr/lib/systemd/system/OOlmeN2R.service  <span class="hljs-comment"># 删除启动文件</span><br></code></pre></td></tr></table></figure><p>删除完成后，重启服务器。</p><p>完成上述步骤后，再次查看该网络链接，发现该链接已消失。同时，服务器CPU使用率恢复到正常状态 ，病毒被清除了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该病毒有可能是挖矿类的病毒，占用机器资源进行任务，因此导致CPU使用率暴涨。同时，病毒较为狡猾，具有以下特点：</p><p>1.隐藏自己的进程，无法通过TOP命令来发现。<br>2.加入开机启动项，保证重启服务器后依然会生效。<br>3.文件名随机，在不同机器上都不一样，增大了排查难度。</p><p>目前，通过本文档记录的方法，可以有效清除病毒。已知经过处理后的机器未再出现重复中毒情况。</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排查 Pod 状态异常</title>
    <link href="/2025/04/16/%E6%8E%92%E6%9F%A5-Pod-%E7%8A%B6%E6%80%81%E5%BC%82%E5%B8%B8/"/>
    <url>/2025/04/16/%E6%8E%92%E6%9F%A5-Pod-%E7%8A%B6%E6%80%81%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#terminating">Terminating</a></li><li><a href="#pending">Pending</a></li><li><a href="#containercreating-waiting">ContainerCreating-Waiting</a></li><li><a href="#crashloopbackoff">CrashLoopBackOff</a></li><li><a href="#imagepullbackoff">ImagePullBackOff</a></li></ul><h1 id="Terminating"><a href="#Terminating" class="headerlink" title="Terminating"></a>Terminating</h1><p>有时候删除 Pod 一直卡在 Terminating 状态，一直删不掉，可以从以下方面进行排查。</p><p><strong>分析思路</strong><br>一、首先我们先了解下pod的删除流程：</p><ul><li>APIServer 收到删除 Pod 的请求，Pod 被标记删除，处于 Terminating 状态。</li><li>节点上的 kubelet watch 到了 Pod 被删除，开始销毁 Pod。</li><li>Kubelet 调用运行时接口，清理相关容器。</li><li>所有容器销毁成功，通知 APIServer。</li><li>APIServer 感知到 Pod 成功销毁，检查 metadata 是否还有 finalizers，如果有就等待其它控制器清理完，如果没有就直接从 etcd 中删除 Pod 记录。</li></ul><p>可以看出来，删除 Pod 流程涉及到的组件包含: APIServer, etcd, kubelet 与容器运行时 (如 docker、containerd)。<br>既然都能看到 Pod 卡在 Terminating 状态，说明 APIServer 能正常响应，也能正常从 etcd 中获取数据，一般不会有什么问题，有问题的地方主要就是节点上的操作。</p><p>二、排查思路<br>检查pod节点是否异常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找 Terminating 的 Pod 及其所在 Node</span><br>$ kubectl get pod -o wide | grep Terminating<br>grafana-5d7ff8cb89-8gdtz                         1/1     Terminating   1          97d    10.10.7.150   172.20.32.15   &lt;none&gt;           &lt;none&gt;<br><br><span class="hljs-comment"># 检查 Node 是否异常</span><br>$ kubectl get node 172.20.32.15<br>NAME           STATUS      ROLES    AGE    VERSION<br>172.20.32.15   NotReady    &lt;none&gt;   182d   v1.20.6<br><br><span class="hljs-comment"># 查看 Node 相关事件</span><br>$ kubectl describe node 172.20.32.15<br></code></pre></td></tr></table></figure><p><strong>检查内核日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg<br><span class="hljs-comment"># journalctl -k</span><br></code></pre></td></tr></table></figure><p><strong>存在i文件属性</strong><br>如果容器的镜像本身或者容器启动后写入的文件存在 “i” 文件属性，此文件就无法被修改删除，而删除 Pod 时会清理容器目录，但里面包含有不可删除的文件，就一直删不了，Pod 状态也将一直保持 Terminating，kubelet 报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Sep 27 14:37:21 VM_0_7_centos kubelet[14109]: E0927 14:37:21.922965   14109 remote_runtime.go:250] RemoveContainer <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span> from runtime service failed: rpc error: code = Unknown desc = failed to remove container <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span>: Error response from daemon: container 19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257: driver <span class="hljs-string">&quot;overlay2&quot;</span> failed to remove root filesystem: remove /data/docker/overlay2/b1aea29c590aa9abda79f7cf3976422073fb3652757f0391db88534027546868/diff/usr/bin/bash: operation not permitted<br>Sep 27 14:37:21 VM_0_7_centos kubelet[14109]: E0927 14:37:21.923027   14109 kuberuntime_gc.go:126] Failed to remove container <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span>: rpc error: code = Unknown desc = failed to remove container <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span>: Error response from daemon: container 19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257: driver <span class="hljs-string">&quot;overlay2&quot;</span> failed to remove root filesystem: remove /data/docker/overlay2/b1aea29c590aa9abda79f7cf3976422073fb3652757f0391db88534027546868/diff/usr/bin/bash: operation not permitted<br></code></pre></td></tr></table></figure><p><strong>docker 17 的 bug</strong><br>docker hang 住，没有任何响应，看 event:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Warning FailedSync 3m (x408 over 1h) kubelet, 10.179.80.31 error determining status: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br></code></pre></td></tr></table></figure><p><strong>mount 的目录被其它进程占用</strong><br>dockerd 报错 device or resource busy:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">May 09 09:55:12 VM_0_21_centos dockerd[6540]: <span class="hljs-keyword">time</span>=<span class="hljs-string">&quot;2020-05-09T09:55:12.774467604+08:00&quot;</span> level=error msg=<span class="hljs-string">&quot;Handler for DELETE /v1.38/containers/b62c3796ea2ed5a0bd0eeed0e8f041d12e430a99469dd2ced6f94df911e35905 returned error: container b62c3796ea2ed5a0bd0eeed0e8f041d12e430a99469dd2ced6f94df911e35905: driver \&quot;overlay2\&quot; failed to remove root filesystem: remove /data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/merged: device or resource busy&quot;</span><br><br>查找还有谁在<span class="hljs-string">&quot;霸占&quot;</span>此目录:<br>$ grep 8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59 /proc/*/mountinfo<br>/proc/27187/mountinfo:4500 4415 0:898 / /var/lib/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/merged rw,relatime - overlay overlay rw,lowerdir=/data/docker/overlay2/l/DNQH6VPJHFFANI36UDKS262BZK:/data/docker/overlay2/l/OAYZKUKWNH7GPT4K5MFI6B7OE5:/data/docker/overlay2/l/ANQD5O27DRMTZJG7CBHWUA65YT:/data/docker/overlay2/l/G4HYAKVIRVUXB6YOXRTBYUDVB3:/data/docker/overlay2/l/IRGHNAKBHJUOKGLQBFBQTYFCFU:/data/docker/overlay2/l/6QG67JLGKMFXGVB5VCBG2VYWPI:/data/docker/overlay2/l/O3X5VFRX2AO4USEP2ZOVNLL4ZK:/data/docker/overlay2/l/H5Q5QE6DMWWI75ALCIHARBA5CD:/data/docker/overlay2/l/LFISJNWBKSRTYBVBPU6PH3YAAZ:/data/docker/overlay2/l/JSF6H5MHJEC4VVAYOF5PYIMIBQ:/data/docker/overlay2/l/7D2F45I5MF2EHDOARROYPXCWHZ:/data/docker/overlay2/l/OUJDAGNIZXVBKBWNYCAUI5YSGG:/data/docker/overlay2/l/KZLUO6P3DBNHNUH2SNKPTFZOL7:/data/docker/overlay2/l/O2BPSFNCVXTE4ZIWGYSRPKAGU4,upperdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/diff,workdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/work<br>/proc/27187/mountinfo:4688 4562 0:898 / /var/lib/docker/overlay2/81c322896bb06149c16786dc33c83108c871bb368691f741a1e3a9bfc0a56ab2/merged/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/merged rw,relatime - overlay overlay rw,lowerdir=/data/docker/overlay2/l/DNQH6VPJHFFANI36UDKS262BZK:/data/docker/overlay2/l/OAYZKUKWNH7GPT4K5MFI6B7OE5:/data/docker/overlay2/l/ANQD5O27DRMTZJG7CBHWUA65YT:/data/docker/overlay2/l/G4HYAKVIRVUXB6YOXRTBYUDVB3:/data/docker/overlay2/l/IRGHNAKBHJUOKGLQBFBQTYFCFU:/data/docker/overlay2/l/6QG67JLGKMFXGVB5VCBG2VYWPI:/data/docker/overlay2/l/O3X5VFRX2AO4USEP2ZOVNLL4ZK:/data/docker/overlay2/l/H5Q5QE6DMWWI75ALCIHARBA5CD:/data/docker/overlay2/l/LFISJNWBKSRTYBVBPU6PH3YAAZ:/data/docker/overlay2/l/JSF6H5MHJEC4VVAYOF5PYIMIBQ:/data/docker/overlay2/l/7D2F45I5MF2EHDOARROYPXCWHZ:/data/docker/overlay2/l/OUJDAGNIZXVBKBWNYCAUI5YSGG:/data/docker/overlay2/l/KZLUO6P3DBNHNUH2SNKPTFZOL7:/data/docker/overlay2/l/O2BPSFNCVXTE4ZIWGYSRPKAGU4,upperdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/diff,workdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/work<br><br>找到进程号后查看此进程更多详细信息:<br>ps -f 27187<br></code></pre></td></tr></table></figure><h1 id="Pending"><a href="#Pending" class="headerlink" title="Pending"></a>Pending</h1><p>Pod 一直 Pending 一般是调度失败，调度失败的原因一般包含以下内容:<br><strong>一、节点没有足够资源分配pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl describe node &lt;node-name&gt;<br></code></pre></td></tr></table></figure><p><strong>二、不满足节点亲和</strong><br>如果 Pod 包含 affinity（亲和性）的配置，调度器根据调度算法也可能算出没有满足条件的 Node，从而无法调度。affinity 有以下几类:<br>nodeAffinity: 节点亲和性，可以看成是增强版的 nodeSelector，用于限制 Pod 只允许被调度到某一部分 Node。<br>podAffinity:   Pod亲和性，用于将一些有关联的 Pod 调度到同一个地方，同一个地方可以是指同一个节点或同一个可用区的节点等。<br>podAntiAffinity: Pod 反亲和性，用于避免将某一类 Pod 调度到同一个地方避免单点故障，比如将集群 DNS 服务的 Pod 副本都调度到不同节点，避免一个节点挂了造成整个集群 DNS 解析失败，使得业务中断</p><p><strong>三、污点</strong><br>节点如果被打上了污点，Pod 必须要容忍污点才能调度上去:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0/5 nodes are available: 3 node(s) had taints that the pod didn<span class="hljs-string">&#x27;t tolerate, 2 Insufficient memory.</span><br></code></pre></td></tr></table></figure><p>通过 describe node 可以看下 Node 有哪些 Taints:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl describe nodes host1<br>...<br>Taints:             special=<span class="hljs-literal">true</span>:NoSchedule<br>...<br></code></pre></td></tr></table></figure><p>如果希望 Pod 可以调度上去，通常解决方法有两个:<br>1.删除污点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl taint nodes host1 special-<br></code></pre></td></tr></table></figure><p>2.给pod加上污点容忍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tolerations:<br>- key: <span class="hljs-string">&quot;special&quot;</span><br>  operator: <span class="hljs-string">&quot;Equal&quot;</span><br>  value: <span class="hljs-string">&quot;true&quot;</span><br>  effect: <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><p><strong>四、kube-scheduler没有正常运行</strong><br>检查 maser 上的 kube-scheduler 是否运行正常，异常的话可以尝试重启临时恢复。</p><h1 id="ContainerCreating-Waiting"><a href="#ContainerCreating-Waiting" class="headerlink" title="ContainerCreating-Waiting"></a>ContainerCreating-Waiting</h1><p><strong>一、镜像问题</strong></p><p><strong>二、configmap&#x2F;secret挂载问题</strong></p><p><strong>三、limit 设置太小或者单位不对</strong></p><p><strong>四、存在同名容器</strong></p><h1 id="CrashLoopBackOff"><a href="#CrashLoopBackOff" class="headerlink" title="CrashLoopBackOff"></a>CrashLoopBackOff</h1><p>Pod 如果处于 CrashLoopBackOff 状态说明之前是启动了，只是又异常退出了。</p><p><strong>一、容器进程主动退出</strong><br>如果是容器进程主动退出，退出状态码一般在 0-128 之间，除了可能是业务程序 BUG，还有其它许多可能原因。内部程序崩溃或者依赖缺失等。</p><p><strong>二、系统 OOM</strong><br>如果是系统oom溢出，容器状态码是137，表示被 SIGKILL 信号杀死，同时内核会报错: Out of memory: Kill process。大概率是节点上部署了其它非 K8S 管理的进程消耗了比较多的内存</p><p><strong>三、cgroup OOM</strong><br>如果是 cgrou OOM 杀掉的进程，从 Pod 事件的下 Reason 可以看到是 OOMKilled，说明容器实际占用的内存超过 limit 了，同时内核日志会报: Memory cgroup out of memory。 可以根据需求调整下 limit。</p><p><strong>四、探针问题，健康检查失败</strong><br>Liveness 和 Readiness 探针配置不正确，导致容器不断重启。</p><h1 id="ImagePullBackOff"><a href="#ImagePullBackOff" class="headerlink" title="ImagePullBackOff"></a>ImagePullBackOff</h1><p><strong>一、私有镜像仓库认证失败</strong><br>仓库需要认证，配置的 Secret 不存在或者有误都会认证失败，可以先在调度的Node节点中执行docker pull命令，验证镜像是否可以拉取</p><p><strong>二、镜像文件损坏</strong><br>如果 push 的镜像文件损坏了，下载下来也用不了，需要重新 push 镜像文件</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务网关，如何选择？</title>
    <link href="/2025/04/16/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%EF%BC%9F/"/>
    <url>/2025/04/16/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p> 什么是API网关</p><p>API网关（API Gateway）是<a href="https://docs.ihr360.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1">微服务</a>架构中的一个关键组件，它充当了客户端与后端服务之间的中间层。其主要功能包括请求路由、协议转换、负载均衡、安全认证、限流熔断等。通过API网关，客户端无需直接与多个微服务交互，而是通过统一的入口访问后端服务，从而简化了系统的复杂性。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/564755fc62824849b499c01cc7bf8c7d.png" alt="img"></p><p>API 网关的主要功能</p><p><strong>路由功能</strong>：路由是微服务网关的核心能力。通过路由功能微服务网关可以将请求转发到目标微服务。在微服务架构中，网关可以结合注册中心的动态服务发现，实现对后端服务的发现，调用方只需要知道网关对外暴露的服务API就可以透明地访问后端微服务。</p><p><strong>负载均衡</strong>：API网关结合负载均衡技术，利用Eureka或者Consul等服务发现工具，通过轮询、指定权重、IP地址哈希等机制实现下游服务的负载均衡。</p><p><strong>统一鉴权</strong>：一般而言，无论对内网还是外网的接口都需要做用户身份认证，而用户认证在一些规模较大的系统中都会采用统一的单点登录（Single Sign On）系统，如果每个微服务都要对接单点登录系统，那么显然比较浪费资源且开发效率低。API网关是统一管理安全性的绝佳场所，可以将认证的部分抽取到网关层，微服务系统无须关注认证的逻辑，只关注自身业务即可。</p><p><strong>协议转换</strong>：API网关的一大作用在于构建异构系统，API网关作为单一入口，通过协议转换整合后台基于REST、AMQP、Dubbo等不同风格和实现技术的微服务，面向Web Mobile、开放平台等特定客户端提供统一服务。</p><p><strong>指标监控</strong>：网关可以统计后端服务的请求次数，并且可以实时地更新当前的流量健康状态，可以对URL粒度的服务进行延迟统计，也可以使用Hystrix Dashboard查看后端服务的流量状态及是否有熔断发生。</p><p><strong>限流熔断</strong>：在某些场景下需要控制客户端的访问次数和访问频率，一些高并发系统有时还会有限流的需求。在网关上可以配置一个阈值，当请求数超过阈值时就直接返回错误而不继续访问后台服务。当出现流量洪峰或者后端服务出现延迟或故障时，网关能够主动进行熔断，保护后端服务，并保持前端用户体验良好。</p><p><strong>黑白名单</strong>：微服务网关可以使用系统黑名单，过滤HTTP请求特征，拦截异常客户端的请求，例如DDoS攻击等侵蚀带宽或资源迫使服务中断等行为，可以在网关层面进行拦截过滤。比较常见的拦截策略是根据IP地址增加黑名单。在存在鉴权管理的路由服务中可以通过设置白名单跳过鉴权管理而直接访问后端服务资源。</p><p><strong>灰度发布</strong>：微服务网关可以根据HTTP请求中的特殊标记和后端服务列表元数据标识进行流量控制，实现在用户无感知的情况下完成灰度发布。</p><p><strong>流量染色</strong>：和灰度发布的原理相似，网关可以根据HTTP请求的Host、Head、Agent等标识对请求进行染色，有了网关的流量染色功能，我们可以对服务后续的调用链路进行跟踪，对服务延迟及服务运行状况进行进一步的链路分析。</p><p><strong>文档中心</strong>：网关结合Swagger，可以将后端的微服务暴露给网关，网关作为统一的入口给接口的使用方提供查看后端服务的API规范，不需要知道每一个后端微服务的Swagger地址，这样网关起到了对后端API聚合的效果。</p><p><strong>日志审计</strong>：微服务网关可以作为统一的日志记录和收集器，对服务URL粒度的日志请求信息和响应信息进行拦截。</p><p>API 网关的架构和工作原理</p><p>在微服务架构中，每个微服务可能负责不同的业务功能，而每个微服务又可能会有多个实例。当客户端发起请求时，API 网关作为所有请求的统一入口，接收并处理这些请求。API 网关的工作原理可以大致描述为：</p><p><strong>接收请求</strong>：客户端向 API 网关发送请求，而不是直接访问各个微服务。</p><p><strong>请求处理</strong>：API 网关根据请求内容决定将请求路由到哪个微服务。如果请求需要经过认证，API 网关会先验证请求的合法性。</p><p><strong>转发请求</strong>：API 网关将请求转发到适当的微服务或服务实例。如果请求需要经过多个微服务的协作，API 网关可能会发起多个请求并聚合结果。</p><p><strong>返回响应</strong>：API 网关收集微服务的响应，并将它们汇总后返回给客户端。</p><p>API网关选型</p><p>这些 API 网关是从云原生软件基金会（CNCF）的全景图中摘选的</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d359e4681eff4f60bcbd4bda9b2993a7.png" alt="img"></p><p> 先简单看一下市面上常用的API网关：</p><table><thead><tr><th>特性</th><th>Traefik</th><th>Kong</th><th>APISIX (API6)</th><th>Zuul</th></tr></thead><tbody><tr><td>架构</td><td>轻量级，基于 Go 和 Docker&#x2F;K8s 集成</td><td>高性能，基于 Lua 和 Nginx</td><td>高性能，基于 Nginx 和 Lua</td><td>基于 Java，Spring Cloud 集成</td></tr><tr><td>协议支持</td><td>HTTP, HTTPS, WebSocket, gRPC</td><td>HTTP, HTTPS, gRPC, TCP, UDP</td><td>HTTP, HTTPS, WebSocket, gRPC</td><td>HTTP, HTTPS</td></tr><tr><td>自动化&#x2F;集成</td><td>自动发现服务，易于容器化环境集成</td><td>高度可扩展，支持 Kubernetes</td><td>动态路由，云原生支持</td><td>集成 Spring Cloud，适用于 Java</td></tr><tr><td>插件支持</td><td>少量插件支持</td><td>丰富的插件生态，支持认证、安全等</td><td>丰富的插件支持，功能强大</td><td>支持过滤器机制，集成 Spring Cloud</td></tr><tr><td>易用性</td><td>易于配置，自动化程度高</td><td>配置复杂，但功能强大</td><td>高度可定制，配置灵活</td><td>适合 Java 开发者，集成容易</td></tr><tr><td>社区支持</td><td>社区活跃，受 Kubernetes 支持</td><td>企业级解决方案，活跃的社区</td><td>新兴的高性能网关，社区活跃</td><td>主要用于 Java 环境，Spring Cloud 支持</td></tr></tbody></table><p><strong>选择建议：</strong></p><p>如果在 <strong>Kubernetes</strong> 或容器化环境中工作，<strong>Traefik</strong> 可能是一个最合适的选择。</p><p>如果需要一个功能强大、可扩展并支持高并发的 <strong>API 网关</strong>，<strong>Kong</strong> 和 <strong>APISIX</strong> 都是非常优秀的选择，Kong 提供了更多的插件支持，而 APISIX 可能在高性能方面略有优势。</p><p>如果使用 <strong>Spring Cloud</strong> 或 <strong>Java</strong> 技术栈，<strong>Zuul</strong> 可能是更好的选择，Zuul由于与Spring Cloud深度集成，使用度也很高，近年来Istio服务网格的流行，Ambassador因为能够和Istio无缝集成也是相当大的优势。</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章带你搞定docker</title>
    <link href="/2025/04/16/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%90%9E%E5%AE%9Adocker/"/>
    <url>/2025/04/16/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%90%9E%E5%AE%9Adocker/</url>
    
    <content type="html"><![CDATA[<blockquote><p> Docker 是一个客户端-服务器（C&#x2F;S）架构程序。Docker 客户端只需要向 Docker 服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker 提供了一个命令行工具 Docker 以及一整套 RESTful API。</p></blockquote><p>通过下图可以得知，Docker 在运行时分为 Docker 引擎（服务端守护进程） 和 客户端工具，我们日常使用各种 docker 命令，其实就是在使用 客户端工具 与 Docker 引擎 进行交互。</p><h1 id="一、架构图"><a href="#一、架构图" class="headerlink" title="一、架构图"></a>一、架构图</h1><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1aa02be9df9c4e31b33d5df8f80c2b63.png" alt="img"></p><p> <strong>Client 客户端</strong></p><p>Docker 是一个客户端-服务器（C&#x2F;S）架构程序。Docker 客户端只需要向 Docker 服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker 提供了一个命令行工具 Docker 以及一整套 RESTful API。你可以在同一台宿主机上运行 Docker 守护进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程。</p><p><strong>Image 镜像</strong></p><p>什么是 Docker 镜像？简单的理解，Docker 镜像就是一个 Linux 的文件系统（Root FileSystem），这个文件系统里面包含可以运行在 Linux 内核的程序以及相应的数据。<br> 通过镜像启动一个容器，一个镜像就是一个可执行的包，其中包括运行应用程序所需要的所有内容：包含代码，运行时间，库，环境变量和配置文件等。<br> Docker 把 App 文件打包成为一个镜像，并且采用类似多次快照的存储技术，可以实现：</p><p> 多个 App 可以共用相同的底层镜像（初始的操作系统镜像）；<br> App 运行时的 IO 操作和镜像文件隔离；<br> 通过挂载包含不同配置&#x2F;数据文件的目录或者卷（Volume），单个 App 镜像可以用来运行无数个不同业务的容器。</p><p><strong>Container 容器</strong></p><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p><strong>repostory仓库</strong></p><p>仓库是集中存储镜像文件的沧桑，registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为两种，公有参考，和私有仓库，最大的公开仓库是docker Hub，存放了数量庞大的镜像供用户下周，国内的docker pool，这里仓库的概念与Git类似，registry可以理解为github这样的托管服务</p><h1 id="二、docker部署"><a href="#二、docker部署" class="headerlink" title="二、docker部署"></a>二、docker部署</h1><p><strong>下载软件包</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://download.docker.com/linux/static/stable/x86_64/docker-<span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">24</span>.tgz<br></code></pre></td></tr></table></figure><p><strong>解压软件包</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@docker101:~# tar xf docker-<span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">24</span>.tgz<br></code></pre></td></tr></table></figure><p><strong>拷贝到PATH变量</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># cp docker/* /usr/bin/</span><br></code></pre></td></tr></table></figure><p><strong>启动docker</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># dockerd </span><br>root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># dockerd &amp;  #后台运行</span><br></code></pre></td></tr></table></figure><p><strong>查看docker版本号</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker version</span><br></code></pre></td></tr></table></figure><h1 id="三、卸载docker环境"><a href="#三、卸载docker环境" class="headerlink" title="三、卸载docker环境"></a><strong>三、卸载docker环境</strong></h1><p><strong>停止docker环境</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># pkill dockerd</span><br></code></pre></td></tr></table></figure><p><strong>卸载</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@docker101:~# <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> docker`;<span class="hljs-keyword">do</span> <span class="hljs-built_in">rm</span> -f /usr/bin/<span class="hljs-variable">$i</span> ;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>验证</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@docker101</span>:~<span class="hljs-meta"># docker</span><br>Command <span class="hljs-string">&#x27;docker&#x27;</span> <span class="hljs-literal">not</span> found, but can be installed <span class="hljs-keyword">with</span>:<br></code></pre></td></tr></table></figure><h1 id="四、docker常用命令"><a href="#四、docker常用命令" class="headerlink" title="四、docker常用命令"></a>四、docker常用命令</h1><h3 id="Docker基础命令"><a href="#Docker基础命令" class="headerlink" title="Docker基础命令"></a>Docker基础命令</h3><p>启动&#x2F;停止&#x2F;重启docker</p><blockquote><p># 启动<br> systemctl start docker<br> # 停止<br> systemctl stop docker<br> # 重启<br> systemctl restart docker</p></blockquote><p>设置开机自启动</p><blockquote><p># 设置<br> systemctl enable docker<br> # 取消开机自启动<br> systemctl disable docker</p></blockquote><p>查看docker状态</p><blockquote><p>systemctl status docker</p></blockquote><p>查看版本信息</p><blockquote><p>docker version</p><p>#该命令显示当前安装的Docker客户端和服务器版本信息。</p></blockquote><p>显示Docker系统信息</p><blockquote><p>docker info</p></blockquote><p>查看帮助</p><blockquote><p>docker –help </p></blockquote><h3 id="镜像管理命令"><a href="#镜像管理命令" class="headerlink" title="镜像管理命令"></a>镜像管理命令</h3><p>搜索镜像</p><blockquote><p>docker search [镜像名]</p></blockquote><p>下载镜像</p><blockquote><p>docker pull [镜像名]:[标签] </p></blockquote><p>列出本地镜像</p><blockquote><p>docker images </p></blockquote><p>删除镜像</p><blockquote><p>docker rmi [镜像ID或镜像名] </p></blockquote><p>删除全部镜像</p><blockquote><p>docker rmi -f $(docker images -aq)</p><p>-a 意思为显示全部,</p><p>-q 意思为只显示ID </p></blockquote><p>构建镜像</p><blockquote><p>docker build -t [镜像名]:[标签] [Dockerfile所在路径]</p></blockquote><p>导入镜像 </p><blockquote><p>docker load -i &#x2F;data&#x2F;nginx.tar</p></blockquote><p>保存镜像</p><blockquote><p>docker save -o &#x2F;data&#x2F;nginx.tar nginx </p></blockquote><p>给镜像打标签</p><blockquote><p>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]<br> docker tag nginx 10.10.10.200&#x2F;software&#x2F;nginx:1.26 </p></blockquote><h3 id="容器管理命令"><a href="#容器管理命令" class="headerlink" title="容器管理命令"></a>容器管理命令</h3><p>创建并运行容器</p><blockquote><p>docker run [选项] [镜像名]</p><p>-d 后台运行容器</p><p>-p 端口映射</p><p>–name 指定容器名称</p><p>-v 挂载卷 主机路径:容器路径</p></blockquote><p>在后台运行一个名为mynginx的nginx容器，并映射端口：</p><blockquote><p>docker run -d -p 8080:80 –name mynginx nginx</p></blockquote><p> 查看运行中的容器</p><blockquote><p>docker ps</p></blockquote><p>查看所有容器（包括停止的）</p><blockquote><p> docker ps -a</p></blockquote><p> 启动和停止容器</p><blockquote><p># 启动容器<br> docker start [容器ID或容器名]</p><p> # 停止容器<br> docker stop [容器ID或容器名]</p></blockquote><p>重启容器</p><blockquote><p>docker restart [容器ID或容器名] </p></blockquote><p>删除容器</p><blockquote><p>docker rm [容器ID或容器名] </p></blockquote><p>进入容器</p><blockquote><p>docker exec -it [容器ID或容器名] &#x2F;bin&#x2F;bash </p></blockquote><p>查看容器日志</p><blockquote><p>1.查看实时日志<br> docker container logs -f  c1</p><p>2.查看20分钟之内的日志<br> docker container logs -f  –since 20m c1</p><p>3.查看20分钟之前的日志<br> docker container logs -f  –until 20m c1</p></blockquote><p>查看容器内部细节</p><blockquote><p>docker inspect [容器ID或容器名] </p></blockquote><h3 id="数据卷管理命令"><a href="#数据卷管理命令" class="headerlink" title="数据卷管理命令"></a>数据卷管理命令</h3><p>数据卷（Volume）是Docker中持久化数据的关键，通过数据卷可以将容器内的数据持久化到宿主机中 。</p><p>创建数据卷</p><blockquote><p>docker volume create [卷名]<br> docker volume create data</p></blockquote><p> 查看数据卷</p><blockquote><p>docker volume ls</p></blockquote><p>删除数据卷</p><blockquote><p>docker volume rm [卷名]<br> docker volume rm data </p></blockquote><p> 查看数据卷详情</p><blockquote><p>docker volume inspect [卷名]</p></blockquote><h3 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h3><p>创建网络</p><blockquote><p>docker network create [网络名]</p></blockquote><p>查看网络</p><blockquote><p>docker network ls </p></blockquote><p> 查看网络详情</p><blockquote><p>docker network inspect [网络名]</p></blockquote><p>删除网络</p><blockquote><p>docker network rm [网络名]</p></blockquote><p>将容器连接到网络</p><blockquote><p>docker network connect [网络名] [容器名或容器ID] </p></blockquote><p>将容器从网络断开</p><blockquote><p>docker network disconnect [网络名] [容器名或容器ID] </p></blockquote><h3 id="Docker-Compose命令"><a href="#Docker-Compose命令" class="headerlink" title="Docker Compose命令"></a>Docker Compose命令</h3><blockquote><p>编译镜像<br> docker-compose build</p><p>后台创建并启动容器<br> docker-compose up -d</p><p>查看容器状态<br> docker-compose ps</p><p>停止所有服务<br> docker-compose stop -t </p><p>启动所有服务<br> docker-compose start</p><p>重启指定服务<br> docker-compose restart doudizhu</p><p>删除并停止容器<br> docker-compose down -t 0</p></blockquote><h3 id="常用清理命令"><a href="#常用清理命令" class="headerlink" title="常用清理命令"></a>常用清理命令</h3><p>删除所有已停止的容器</p><blockquote><p>docker container prune</p></blockquote><p> 删除未使用的镜像</p><blockquote><p>docker image prune</p></blockquote><p>删除所有未使用的数据卷</p><blockquote><p>docker volume prune </p></blockquote><p> 删除所有未使用的网络</p><blockquote><p>docker network prune</p></blockquote><p> 清理所有未使用的资源（包括镜像、容器、卷和网络）</p><blockquote><p>docker system prune</p></blockquote><h1 id="五、docker网络原理"><a href="#五、docker网络原理" class="headerlink" title="五、docker网络原理"></a>五、docker网络原理</h1><p> docker默认使用的单机容器网络模型。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/03dd15f5ef154a0dbaf235e37f886edd.png" alt="img"></p><ol><li>每个容器（Container）分别拥有自己的Network Namespace。</li><li>容器通过对设备，连接到宿主机的Host Network Namespace。对设备在容器Network Namespace这一端的“网卡”是eth0，eth0配置的ip即容器的ip。对设备连接Host Namespace的那一端挂载到网桥设备docker0。</li><li>网桥设备docker0，挂载着所有容器的对设备的Host Namespace这一端。并且，挂载在网桥上的设备，会被降级成网桥上的一个端口，端口的唯一作用就是转发网桥或另一端对设备的数据包。</li><li>从Container1发送到Container2的数据包，首先经过Container1中的eth0，到达docker0网桥，docker0网桥经过二层转发，将数据包发送到Container2对应的端口（Container2对设备的docker0网桥这一端），这样数据包就被直接送到Container2中了。</li></ol><h1 id="六、docker网络类型"><a href="#六、docker网络类型" class="headerlink" title="六、docker网络类型"></a>六、docker网络类型</h1><p><strong>单机网络类型</strong></p><blockquote><p>brdge    #默认网络类型，网桥模式，docker在宿主机创建docker 0网桥<br> none    #容器将没有网络连接，用于不需要网络功能的容器<br> host     #容器直接使用宿主机的端口，不需要知道端口<br> contianer #与另一个运行中的容器共享Network Namespace<br> 自定义网络 #相当于内置dns，基于容器名称访问彼此</p></blockquote><p><strong>跨主机网络类型</strong></p><blockquote><p>macvlan       #手动分配ip，绑定物理网卡<br> overlay+consul  #创建overlay网络，利用consul服务发现<br> flannel+etcd<br> calica+etcd</p></blockquote><p><strong>macvlan和overlay的区别</strong></p><p>相同点: 都可以实现网络的互相通信</p><p>不同点:</p><ul><li>macvlan是内核支持模块，无需安装第三方插件，只需加载模块即可，overlay需要安装第三方插件consul;</li><li>macvlan需要手动分配IP地址，而overlay网络无需手动分配IP地址;</li><li>macvlan默认无法访问外网，需要手动配置桥接网络，而overlay默认可以访问外网;</li></ul><p><strong>docker网络不足的总结</strong></p><ul><li>1.docker在网络互联上存在缺陷，比如overlay网络各节点实现IP地址通信，当容器挂掉时，会自动为该容器分配IP地址。若容器重 启后，IP地址可能发生变化;</li><li>2.若配置文件写的都是IP地址，则容器重启后IP地址发生变化，可能导致服务不可用;</li></ul><h1 id="七、docker底层使用的linux技术"><a href="#七、docker底层使用的linux技术" class="headerlink" title="七、docker底层使用的linux技术"></a>七、docker底层使用的linux技术</h1><p> Docker 是用Go 编程语言编写的，并利用 Linux 内核的几个特性来提供其功能。</p><p> Docker 使用一种称为容器 <code>namespaces </code>的技术来提供隔离的工作空间。当您运行容器时，      Docker 会为该容器创建一组 命名空间<em>。</em></p><p> 这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且它的访问权限仅限于该命名空间。</p><p> Docker底层的核心技术包括</p><ul><li>Linux 上的名字空间（Namespaces）</li><li>控制组（Control groups）</li><li>Union 文件系统（Union file systems）</li><li>容器格式（Container format）</li></ul><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>NameSpace 是 Linux 内核一个强大的特性。每个容器都有自己单独的名字空间，运行在其中的应用都像是在独立的操作系统中运行一样。名字空间保证了容器之间彼此互不影响。</p><ul><li>pid 名字空间<br> 不同用户的进程就是通过 pid 名字空间隔离开的，且不同名字空间中可以有相同 pid。所有的 LXC 进程在Docker 中的父进程为Docker进程，每个 LXC 进程具有不同的名字空间。同时由于允许嵌套，因此可以很方便的实现嵌套的 Docker 容器。</li><li>net 名字空间<br> 有了 pid 名字空间, 每个名字空间中的 pid 能够相互隔离，但是网络端口还是共享 host 的端口。网络隔离是通过 net 名字空间实现的， 每个 net 名字空间有独立的 网络设备, IP 地址, 路由表, &#x2F;proc&#x2F;net 目录。这样每个容器的网络就能隔离开来。Docker 默认采用 veth 的方式，将容器中的虚拟网卡同 host 上的一 个Docker网桥 docker0 连接在一起。</li><li>ipc 名字空间<br> 容器中进程交互还是采用了 Linux 常见的进程间交互方法(interprocess communication – IPC), 包括信号量、消息队列和共享内存等。然而同 VM 不同的是，容器的进程间交互实际上还是 host 上具有相同 pid 名字空间中的进程间交互，因此需要在 IPC 资源申请时加入名字空间信息，每个 IPC 资源有一个唯一的 32位 id。</li><li>mnt 名字空间<br> 类似 chroot，将一个进程放到一个特定的目录执行。mnt 名字空间允许不同名字空间的进程看到的文件结构不同，这样每个名字空间 中的进程所看到的文件目录就被隔离开了。同 chroot 不同，每个名字空间中的容器在 &#x2F;proc&#x2F;mounts 的信息只包含所在名字空间的 mount point。</li><li>uts 名字空间<br> UTS(“UNIX Time-sharing System”) 名字空间允许每个容器拥有独立的 hostname 和 domain name, 使其在网络上可以被视作一个独立的节点而非 主机上的一个进程。</li><li>user 名字空间<br> 每个容器可以有不同的用户和组 id, 也就是说可以在容器内用容器内部的用户执行程序而非主机上的用户。</li></ul><h3 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a>cgroups</h3><p>cgroups 是 Linux 内核的一个特性，主要用来对共享资源进行隔离、限制、审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时的对系统资源的竞争。</p><p>cgroups 技术最早是由 Google 的程序员 2006 年起提出，Linux 内核自 2.6.24 开始支持。</p><p>cgroups 可以提供对容器的内存、CPU、磁盘 IO 等资源的限制和审计管理。</p><h3 id="unionfs"><a href="#unionfs" class="headerlink" title="unionfs"></a>unionfs</h3><p>联合文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)。</p><p>联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>另外，不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。</p><p>Docker 中使用的 AUFS（AnotherUnionFS）就是一种联合文件系统。 AUFS 支持为每一个成员目录（类似 Git 的分支）设定只读（readonly）、读写（readwrite）和写出（whiteout-able）权限, 同时 AUFS 里有一个类似分层的概念, 对只读权限的分支可以逻辑上进行增量地修改(不影响只读部分的)。</p><p>Docker 目前支持的联合文件系统种类包括 AUFS, btrfs, vfs 和 DeviceMapper。</p><h3 id="容器格式"><a href="#容器格式" class="headerlink" title="容器格式"></a>容器格式</h3><p>最初，Docker 采用了 LXC 中的容器格式。自 1.20 版本开始，Docker 也开始支持新的 libcontainer 格式，并作为默认选项。</p><h1 id="八、dockerfile"><a href="#八、dockerfile" class="headerlink" title="八、dockerfile"></a>八、dockerfile</h1><p>Dockerfile是用来快速创建自定义镜像的一种文本格式的配置文件，在持续集成和持续部署时，需要使用Dockerfile生成相关应用程序的镜像。</p><h3 id="Dockerfile的常用命令"><a href="#Dockerfile的常用命令" class="headerlink" title="Dockerfile的常用命令"></a><strong>Dockerfile的常用命令</strong></h3><blockquote><p>FROM：继承基础镜像<br> MAINTAINER：镜像制作作者的信息，已弃用，使用LABEL替代<br> LABEL：k&#x3D;v形式，将一些元数据添加至镜像<br> RUN：用来执行shell命令<br> EXPOSE：暴露端口号<br> CMD：启动容器默认执行的命令，会被覆盖<br> ENTRYPOINT：启动容器真正执行的命令，不会被覆盖<br> VOLUME：创建挂载点ENV：配置环境变量<br> ADD：复制文件到容器，一般复制文件，压缩包自动解压<br> COPY：复制文件到容器，一般复制目录<br> WORKDIR：设置容器的工作目录<br> USER：容器使用的用户ARG：设置编译镜像时传入的参数</p></blockquote><h3 id="jar包打镜像案例"><a href="#jar包打镜像案例" class="headerlink" title="jar包打镜像案例"></a><strong>jar包打镜像案例</strong></h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:graalvm-ce-java8-<span class="hljs-number">21.2</span>.<span class="hljs-number">0</span><br><br><span class="hljs-keyword">ENV</span> LANG C.UTF-<span class="hljs-number">8</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> contract-online-sign-server/target/*.jar /app.jar</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="env和arg指令有什么区别？"><a href="#env和arg指令有什么区别？" class="headerlink" title="env和arg指令有什么区别？"></a><strong>env和arg指令有什么区别？</strong></h3><blockquote><p>都是向容器传递环境变量<br> - arg是基于构建阶段传递环境变量<br> - env不仅可以用于构建阶段传递环境变量还可以用于容器运行时传递环境变量</p></blockquote><h3 id="CMD和ENTRYPOINT有啥区别？"><a href="#CMD和ENTRYPOINT有啥区别？" class="headerlink" title="CMD和ENTRYPOINT有啥区别？"></a><strong>CMD和ENTRYPOINT有啥区别？</strong></h3><blockquote><p>都可以作为容器启动命令<br> - entrypoint指定可以将指定启动命令作为参数传递<br> - 他们两个一块使用的时候，cmd将作为传递参数，当然如果用户在运行时指定了启动命令，会覆盖cmd的add和copy区别？默认值</p></blockquote><h3 id="add和copy区别？"><a href="#add和copy区别？" class="headerlink" title="add和copy区别？"></a><strong>add和copy区别？</strong></h3><blockquote><p>都可以拷贝文件<br> - add在拷贝tar包文件会自动解压<br> - copy指令在多阶段构建的时候可以从其他节点拷贝数据</p></blockquote><h3 id="镜像优化思路？"><a href="#镜像优化思路？" class="headerlink" title="镜像优化思路？"></a>镜像优化思路？</h3><blockquote><p>编译速度:<br>   1.Dockefile在编译时，如果对应的指令记录被执行过，就可以直接使用缓存，因此将不频繁修改的指令往上放，将经常修改的指令往下放，以达到利用缓存的目的;<br>   2.忽略Docker编译时不必要文件;<br>   3.使用国内的软件源或本地仓库，以提示网络的下载速度;<br>   4.将比较大的软件包放在本地或内网的文件站点，避免下载;</p><p>镜像大小:<br>   1.删除缓存，无用的软件包以减少镜像大小;<br>   2.能够合并的指令，尽量合并，减少不必要的镜像分层，每一个Dockerfile指令都会产生一个中间层镜像(docker image ls -a);<br>   3.使用较小的基础镜像</p><p>  4.使用多阶段构建</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s部署nginx+sshd实现文件上传下载</title>
    <link href="/2025/04/16/k8s%E9%83%A8%E7%BD%B2nginx-sshd%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <url>/2025/04/16/k8s%E9%83%A8%E7%BD%B2nginx-sshd%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>要通过 <code>nginx</code> 和 <code>sshd</code> 实现文件的上传和下载，通常的做法是结合 SSH 协议和 HTTP 协议，使用 <code>nginx</code> 提供 Web 服务器功能，同时使用 <code>sshd</code>（即 SSH 服务）来处理通过 SSH 协议进行的文件传输。</p><ul><li><p>SSH 实现文件的上传和下载： 通过 <code>sshd</code> 实现文件上传和下载通常使用 SCP 或 SFTP 协议。你可以通过 SSH 客户端将文件上传到服务器，或从服务器下载文件。这个过程不依赖于 <code>nginx</code>，但你可以通过 <code>nginx</code> 提供 Web 界面来管理文件传输。</p></li><li><p>nginx 提供 Web 界面进行文件上传和下载： <code>nginx</code> 本身并不直接处理文件上传功能，但你可以配合一些后端服务（如 PHP、Python、Node.js 等）来实现文件上传和下载的 Web 界面。</p></li></ul><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p><strong>思路</strong></p><p>在同个pod部署nginx和sshd服务，然后共享一个存储卷即可</p><p><strong>准备nginx和ssd的镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx:stable-alpine<br>docker pull circleci/sshd:0.1<br></code></pre></td></tr></table></figure><p> <strong>共享目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/share/nginx/html<br></code></pre></td></tr></table></figure><p><strong>示意图</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4a2031994d8c4329b0a1d1bccacec958.png" alt="在这里插入图片描述"></p><h3 id="二、配置共享存储"><a href="#二、配置共享存储" class="headerlink" title="二、配置共享存储"></a>二、配置共享存储</h3><p><strong>创建一个 PVC 来请求共享存储</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# nginx-ssh-pvc.yaml<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: shared-pvc<br>spec:<br>  accessModes:<br>    - ReadWriteMany  <span class="hljs-comment"># 允许多个容器读写同一存储</span><br>  resources:<br>    requests:<br>      storage: 5Gi  <span class="hljs-comment"># 存储大小可以根据需要调整</span><br><br></code></pre></td></tr></table></figure><p><strong>部署 PVC</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f nginx-ssh-pvc.yaml<br></code></pre></td></tr></table></figure><h3 id="三、sshd打docker镜像"><a href="#三、sshd打docker镜像" class="headerlink" title="三、sshd打docker镜像"></a><strong>三、sshd打docker镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看目录</span><br>[root@node1.local sshd]# ll<br>total 20<br>drwxr-xr-x  2 root root 4096 Dec 24 13:50 ./<br>drwx------ 33 root root 4096 Dec 30 16:52 ../<br>-rw-r--r--  1 root root  174 Dec 24 12:00 Dockerfile<br>-rw-r--r--  1 root root  591 Dec 24 11:48 shadow<br>-rw-r--r--  1 root root  140 Dec 24 13:32 sshd_config<br><br><span class="hljs-comment">#生成加密密码</span><br>[root@node1.local sshd]# openssl passwd -6<br>Password: <br>Verifying - Password: <br>$6$YiALKQwJcDubTbBn<span class="hljs-variable">$OEKLYvJfA8vkXAbgCGqTonP</span>.hz5v4/gDcdvDJx0xHGiHlU.Obqpgji0m5tt1vHcTsUlqnFaMSzNiBlnn0USQZ0<br><br><span class="hljs-comment">#设置root密码</span><br>[root@node1.local sshd]# <span class="hljs-built_in">cat</span> shadow <br>root:$6$YiALKQwJcDubTbBn<span class="hljs-variable">$OEKLYvJfA8vkXAbgCGqTonP</span>.hz5v4/gDcdvDJx0xHGiHlU.Obqpgji0m5tt1vHcTsUlqnFaMSzNiBlnn0USQZ0:20081:0:::::<br>bin:!::0:::::<br>...<br><br><span class="hljs-comment">#将配置文件添加到容器</span><br>[root@node1.local sshd]# <span class="hljs-built_in">cat</span> sshd_config <br>UsePAM <span class="hljs-built_in">yes</span><br>PasswordAuthentication <span class="hljs-built_in">yes</span><br>PermitEmptyPasswords no<br>ChallengeResponseAuthentication no<br>PermitRootLogin <span class="hljs-built_in">yes</span><br>AllowTcpForwarding <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p><strong>编写dockerfile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local sshd]# <span class="hljs-built_in">cat</span> Dockerfile <br>FROM harbor.cherry.com/sshd/sshd:0.1<br><br>COPY shadow /etc/shadow<br>COPY sshd_config /etc/ssh/sshd_config<br><br>ENV TZ=Asia/Shanghai<br><br>RUN <span class="hljs-built_in">chmod</span> 640 /etc/shadow<br></code></pre></td></tr></table></figure><p><strong>打镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t . sshd:v2<br></code></pre></td></tr></table></figure><p><strong>推送harbor仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker tag sshd:v2 harbor.cherry.com/sshd/sshd:2<br>docker push harbor.cherry.com/sshd/sshd:2<br></code></pre></td></tr></table></figure><h3 id="四、部署-Nginx-和-SSH"><a href="#四、部署-Nginx-和-SSH" class="headerlink" title="四、部署 Nginx 和 SSH"></a>四、部署 Nginx 和 SSH</h3><p>在同个pod中来运行 Nginx 和 SSH 服务，并使用共享的 PVC 挂载文件存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# nginx-ssh-pod.yaml<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: nginx-ssh-pod<br>spec:<br>  containers:<br>  - name: nginx<br>    image: nginx:stable-alpine  <span class="hljs-comment"># 使用官方 Nginx 镜像</span><br>    ports:<br>      - containerPort: 80<br>    volumeMounts:<br>      - name: shared-storage<br>        mountPath: /usr/share/nginx/html  <span class="hljs-comment"># 共享目录，用于提供文件下载</span><br>  - name: ssh<br>    image: harbor.cherry.com/sshd/sshd:2  <span class="hljs-comment"># 使用自定义的 SSH 镜像</span><br>    ports:<br>      - containerPort: 22<br>    volumeMounts:<br>      - name: shared-storage<br>        mountPath: /usr/share/nginx/html  <span class="hljs-comment"># 共享目录，用于文件上传</span><br>  volumes:<br>    - name: shared-storage<br>      persistentVolumeClaim:<br>        claimName: shared-pvc  <span class="hljs-comment"># 使用上面创建的 PVC</span><br><br></code></pre></td></tr></table></figure><p>此配置文件定义了一个包含两个容器的 Pod：</p><ul><li>Nginx 容器：它提供文件下载服务，将 <code>/usr/share/nginx/html</code> 目录挂载到共享存储。</li><li>SSH 容器：它提供文件上传服务，将<code>/usr/share/nginx/html</code>目录挂载到共享存储</li></ul><p><strong>部署pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f nginx-ssh-pod.yaml<br></code></pre></td></tr></table></figure><h3 id="五、暴露-Nginx-和-SSH-服务"><a href="#五、暴露-Nginx-和-SSH-服务" class="headerlink" title="五、暴露 Nginx 和 SSH 服务"></a>五、暴露 Nginx 和 SSH 服务</h3><p><strong>创建 Nginx Service</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# nginx-service.yaml<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-service<br>spec:<br>  selector:<br>    app: nginx-ssh-pod<br>  ports:<br>    - protocol: TCP<br>      port: 80<br>      targetPort: 80<br>  <span class="hljs-built_in">type</span>: LoadBalancer<br></code></pre></td></tr></table></figure><p><strong>创建 SSH Service</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# ssh-service.yaml<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: ssh-service<br>spec:<br>  selector:<br>    app: nginx-ssh-pod<br>  ports:<br>    - protocol: TCP<br>      port: 22<br>      targetPort: 22<br>  <span class="hljs-built_in">type</span>: LoadBalancer <br></code></pre></td></tr></table></figure><h3 id="六、访问使用"><a href="#六、访问使用" class="headerlink" title="六、访问使用"></a>六、访问使用</h3><ul><li><strong>文件下载</strong>：可以通过直接访问web界面 http:&#x2F;&#x2F;<nginx-service-ip>&#x2F;files&#x2F;来下载文件。</li><li><strong>文件上传</strong>：可以通过winscp来实现上传文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s 网络机制</title>
    <link href="/2025/04/16/K8s-%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%88%B6/"/>
    <url>/2025/04/16/K8s-%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Service 作为 K8s 中的一等公民，其承载了核心容器网络的访问管理能力，包括：</p><ul><li>暴露&#x2F;访问一组 Pod 的能力</li><li>Pod 访问集群内、集群外服务</li><li>集群外客户端访问集群内 Pod 的服务</li></ul><p>无论是作为应用的开发者还是使用者，一般都需要先经过 Service 才会访问到真正的目标 Pod。因此熟悉 Service 网络管理机制将会使我们更加深入理解 K8s 的容器编排原理，</p><p>本文将从 K8s 中容器网络、Service&#x2F;Pod 关联、Service 类型、kube-proxy 模式、Ingress 等方面，说明 Service 的网络机制。</p><h1 id="一、Service类型"><a href="#一、Service类型" class="headerlink" title="一、Service类型"></a>一、Service类型</h1><table><thead><tr><th>类型</th><th>应用场景</th></tr></thead><tbody><tr><td>CLusterIP</td><td>K8S集群内部相互访问</td></tr><tr><td>NodePort</td><td>K8S集群外部实现访问</td></tr><tr><td>LoadBalancer</td><td>云环境中使用，比如K8S在阿里云，腾讯云，京东云，华为云等。对应的云产品都有自己的负载均衡器产品</td></tr><tr><td>ExternerName</td><td>SVC代理的服务并不在K8S集群内部，而是在K8S集群外部</td></tr></tbody></table><p> <img src="https://gitee.com/ljh00928/csdn/raw/master/img/7dd7d9de57bd46bda0f4f2fba82e6ad5.png" alt="img"> <strong>ClusterIP</strong></p><p>ClusterIP 表示在 K8s 集群内部通过 service.spec.clusterIP 进行访问，之后经过 kube-proxy 负载均衡到目标 Pod。</p><p>无头服务 (Headless Service)：<br> 当指定 Service 的 ClusterIP &#x3D; None 时，则创建的 Service 不会生成 ClusterIP，这样 Service 域名在解析的时候，将直接解析到对应的后端 Pod (一个或多个)，某些业务如果不想走 Service 默认的负载均衡，则可采用此种方式 直连 Pod。</p><blockquote><p>&#x2F;&#x2F; service.spec.publishNotReadyAddresses：表示是否将没有 ready 的 Pods 关联到 Service，默认为 false。设置此字段的主要场景是为 StatefulSet 的 Service 提供支持，使之能够为其 Pod 传播 SRV DNS 记录，以实现对等发现。</p></blockquote><p> 当没有指定 service.type 时，默认类型为 ClusterIP。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> <span class="hljs-params">Servicemetadata:</span>  <span class="hljs-params">name:</span> <span class="hljs-params">headless-servicespec:</span>  <span class="hljs-params">selector:</span>    <span class="hljs-params">app:</span> nginx  <span class="hljs-params">ports:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">protocol:</span> TCP      <span class="hljs-params">port:</span> <span class="hljs-number">80</span>      <span class="hljs-params">targetPort:</span> <span class="hljs-number">80</span>  <span class="hljs-params">type:</span> ClusterIP <span class="hljs-comment"># 默认类型，可省略  clusterIP: None # 指定 ClusterIP = None  publishNotReadyAddresses: true # 是否关联未 ready pods</span><br></code></pre></td></tr></table></figure><h2 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h2><p>当业务需要从 K8s 集群外访问内部服务时，通过 NodePort 方式可以先将访问流量转发到对应的 Node IP，然后再通过 service.spec.ports[].nodePort 端口，通过 kube-proxy 负载均衡到目标 Pod。</p><blockquote><p>Service NodePort 默认端口范围：30000-32767，共 2768 个端口。<br> 可通过 kube-apiserver 组件的 <code>--service-node-port-range</code> 参数进行配置。</p><p>[root@master231 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml<br> …<br> spec:<br>  containers:<br>  - command:<br>   - kube-apiserver<br>   - –service-node-port-range&#x3D;3000-50000  # 进行添加这一行即可</p></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> <span class="hljs-params">Servicemetadata:</span>  <span class="hljs-params">name:</span> <span class="hljs-params">nodeport-servicespec:</span>  <span class="hljs-params">selector:</span>    <span class="hljs-params">app:</span> nginx  <span class="hljs-params">ports:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">nodePort:</span> <span class="hljs-number">30800</span>   <span class="hljs-comment">#worker节点的端口映射      port: 8080        #对应的svc的port端口      protocol: TCP           targetPort: 80    #对应的pod端口  type: NodePort</span><br></code></pre></td></tr></table></figure><h2 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a><strong>LoadBalancer</strong></h2><p>上面的 NodePort 方式访问内部服务，需要依赖具体的 Node 高可用，如果节点挂了则会影响业务访问，LoadBalancer 可以解决此问题。</p><p>具体来说，LoadBalancer 类型的 Service 创建后，由具体是云厂商或用户实现 externalIP (service.status.loadBalancer) 的分配，业务直接通过访问 externalIP，然后负载均衡到目标 Pod。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> <span class="hljs-params">Servicemetadata:</span>  <span class="hljs-params">name:</span> <span class="hljs-params">my-servicespec:</span>  <span class="hljs-params">selector:</span>    app.kubernetes.io<span class="hljs-operator">/</span><span class="hljs-params">name:</span> MyApp  <span class="hljs-params">ports:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">protocol:</span> TCP      <span class="hljs-params">nodePort:</span> <span class="hljs-number">30931</span>      <span class="hljs-params">port:</span> <span class="hljs-number">80</span>      <span class="hljs-params">targetPort:</span> <span class="hljs-number">9376</span>  <span class="hljs-params">clusterIP:</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">171.239</span>  <span class="hljs-params">type:</span> <span class="hljs-params">LoadBalancerstatus:</span>  <span class="hljs-params">loadBalancer:</span>    <span class="hljs-params">ingress:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">ip:</span> <span class="hljs-number">192.0</span>.<span class="hljs-number">2.127</span><br></code></pre></td></tr></table></figure><h2 id="ExternalName"><a href="#ExternalName" class="headerlink" title="ExternalName"></a>ExternalName</h2><p>当业务需要从 K8s 内部访问外部服务的时候，可以通过 ExternalName 的方式实现。Demo 如下</p><p>具体来说，service.spec.externalName 字段值会被解析为 DNS 对应的 CNAME 记录，之后就可以访问到外部对应的服务了</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> Service  <span class="hljs-comment">#无selector，无endpointsmetadata:  name: my-service    namespace: prodspec:  type: ExternalName  externalName: my.database.example.com</span><br></code></pre></td></tr></table></figure><h1 id="二、容器网络机制"><a href="#二、容器网络机制" class="headerlink" title="二、容器网络机制"></a>二、容器网络机制</h1><p>K8s 将一组逻辑上紧密相关的容器，统一抽象为 Pod 概念，以共享 Pod Sandbox 的基础信息，如 Namespace 命名空间、IP 分配、Volume 存储（如 hostPath&#x2F;emptyDir&#x2F;PVC）等，因此讨论容器的网络访问机制，实际上可以用 Pod 访问机制代替。</p><p>根据 Pod 在集群内的分布情况，可将 Pod 的访问方式主要分为两种：</p><ul><li>同一个 Node 内 Pod 访问</li><li>跨 Node 间 Pod 访问</li></ul><h2 id="同一个-Node-内访问"><a href="#同一个-Node-内访问" class="headerlink" title="同一个 Node 内访问"></a>同一个 Node 内访问</h2><p>同一个 Node 内访问，表示两个或多个 Pod 落在同一个 Node 宿主机上，这种 Pod 彼此间访问将不会跨 Node，通过本机网络即可完成通信。</p><p>具体来说，Node 上的运行时如 Docker&#x2F;containerd 会在启动后创建默认的网桥 cbr0 (custom bridge)，以连接当前 Node 上管理的所有容器 (containers)。当 Pod 创建后，会在 Pod Sandbox 初始化基础网络时，调用 CNI bridge 插件创建 veth-pair（两张虚拟网卡），一张默认命名 eth0 (如果 hostNetwork &#x3D; false，则后续调用 CNI ipam 插件分配 IP)。另一张放在 Host 的 Root Network Namespace 内，然后连接到 cbr0。当 Pod 在同一个 Node 内通信访问的时候，直接通过 cbr0 即可完成网桥转发通信。</p><blockquote><p>访问流程：</p><ul><li>首先运行时如 Docker&#x2F;containerd 创建 cbr0；</li><li>Pod Sandbox 初始化调用 CNI bridge 插件创建 veth-pair（两张虚拟网卡）；</li><li>一张放在 Pod Sandbox 所在的 Network Namespace 内（CRI containerd 默认传的参数为 eth0）；</li><li>另一张放在 Host 的 Root Network Namespace 内，然后连接到 cbr0；</li><li>Pod 在同一个 Node 内访问直接通过 cbr0 网桥转发；</li></ul><p>&#x2F;&#x2F; docker中默认网桥名为docker 0，k8s中默认网桥名为cni 0</p></blockquote><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e61a893bdeb7451aad260b4a5e15fa91.png" alt="img"></p><h2 id="跨-Node-间-Pod-访问"><a href="#跨-Node-间-Pod-访问" class="headerlink" title="跨 Node 间 Pod 访问"></a>跨 Node 间 Pod 访问</h2><p>跨 Node 间访问，Pod 访问流量通过 veth-pair 打到 cbr0，之后转发到宿主机 eth0，之后通过 Node 之间的路由表 Route Table 进行转发。到达目标 Node 后进行相同的过程，最终转发到目标 Pod 上。</p><blockquote><p>访问流程：</p><ul><li>用户访问某个 Pod 时，首先访问的是 Kubernetes 服务。</li><li>服务通过 kube-proxy 将请求转发到后端的 Pod。</li><li>由于服务是跨节点的，kube-proxy 会根据不同的访问策略（如 iptables 或 IPVS）选择后端的 Pod。如果 Pod 位于不同的节点，流量会通过节点之间的网络进行转发。</li></ul></blockquote><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/eb084beaad664485a2bd7de0f97c0d46.png" alt="img"></p><h2 id="Pod-的定义"><a href="#Pod-的定义" class="headerlink" title="Pod 的定义"></a>Pod 的定义</h2><p>Pod 是 Kubernetes 中最小的部署单位。Pod 中包含一个或多个容器（通常是单个容器）。这些容器共享同一个网络命名空间。</p><blockquote><p>特点：</p><ul><li>每个 Pod 会被 Kubernetes 分配一个 唯一的 IP 地址，这个 IP 地址仅在集群内部有效。</li><li>Pod 的生命周期是短暂的，一个 Pod 会随着应用的部署而创建，随着应用的销毁而被删除。</li><li>Pod 通常由 Deployment、StatefulSet 或 DaemonSet 等控制器进行管理，控制器负责确保</li><li>Pod 的数量和健康状态。</li></ul></blockquote><h2 id="Service-的定义"><a href="#Service-的定义" class="headerlink" title="Service 的定义"></a><strong>Service 的定义</strong></h2><p>Service 是一个抽象，它定义了一组具有相同功能的 Pod，并为这些 Pod 提供一个固定的访问入口。Pod 的 IP 地址是动态的，可能会因为 Pod 的重启或者节点的变动而变化，Service 通过对外提供一个稳定的访问接口来解决这个问题。 </p><blockquote><p>特点：</p><ul><li>ClusterIP：这是最常见的类型，它为 Service 分配一个虚拟 IP 地址，Pod 通过该 IP 地址暴露给其他 Pod 或客户端。</li><li>NodePort：在 ClusterIP 的基础上，Service 会在每个节点上开放一个静态端口，从而使服务可以通过 NodeIP:NodePort 进行访问。</li><li>LoadBalancer：在 NodePort 的基础上，Service 会向云提供商请求创建一个外部负载均衡器，从而为外部客户端提供访问。</li><li>Headless Service：如果没有为 Service 提供 ClusterIP（即 clusterIP: None），则 Service 仅提供一组 Pod 的 DNS 名称而没有虚拟 IP。这种类型常用于 StatefulSet 等需要稳定 DNS 的场景。</li></ul></blockquote><h2 id="两者之间关系"><a href="#两者之间关系" class="headerlink" title="两者之间关系"></a>两者之间关系</h2><p>Service 通过指定选择器 (selector) 去选择与目标 Pod 匹配的标签 (labels)，找到目标 Pod 后，建立对应的 Endpoints 对象。当感知到 Service&#x2F;Endpoints&#x2F;Pod 对象变化时，创建或更新 Service 对应的 Endpoints，使得 Service selector 与 Pod labels 始终达到匹配的状态。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a993fc7a1e934a389aa83b4fdc735b55.png" alt="img"></p><h1 id="四、Kube-proxy多种模式"><a href="#四、Kube-proxy多种模式" class="headerlink" title="四、Kube-proxy多种模式"></a>四、Kube-proxy多种模式</h1><p> 在 Kubernetes 中，kube-proxy 是一种负责服务代理和负载均衡的关键组件，它允许 Kubernetes 集群中的 Pod 通过 Service 访问其他 Pod。kube-proxy 在多个网络模式下工作，控制流量如何从客户端发送到 Service 以及 Service 后端的 Pod。</p><p>Kubernetes 提供了三种 kube-proxy 的工作模式，每种模式使用不同的方式来管理流量的路由和负载均衡。以下是这三种模式的详细解释：</p><ul><li>Userspace 模式</li><li>iptables 模式</li><li>ipvs 模式</li></ul><h2 id="Userspace-模式"><a href="#Userspace-模式" class="headerlink" title="Userspace 模式"></a><strong>Userspace 模式</strong></h2><p>这是kube-proxy的最早版本，也是 Kubernetes 在早期版本中使用的默认模式，这里不多讲解，感兴趣小伙伴可以自行百度。</p><h2 id="iptables-模式"><a href="#iptables-模式" class="headerlink" title="iptables 模式"></a><strong>iptables 模式</strong></h2><p>K8s 中当前默认的 kube-proxy 模式，核心逻辑是使用 iptables 中 PREROUTING 链 nat 表，实现 Service &#x3D;&gt; Endpoints (Pod IP) 的负载均衡。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1a22d7a413db450193c1e612fc587486.png" alt="img"></p><blockquote><p>工作原理：</p><ul><li>在 iptables 模式下，kube-proxy 会通过管理 iptables 规则来处理流量的路由。当客户端请求一个 Service 时，kube-proxy 会将流量重定向到后端的 Pod。每个 Service 在 iptables 中都有一条规则，客户端的请求会根据规则被路由到某个 Pod。</li><li>iptables 可以将请求直接转发到 Pod，而不需要经过用户空间进程，因此性能得到了显著提高。</li></ul></blockquote><h2 id="ipvs-模式"><a href="#ipvs-模式" class="headerlink" title="ipvs 模式"></a><strong>ipvs 模式</strong></h2><p>ipvs是 Linux 内核提供的一个虚拟服务器模块，专门用于高效的负载均衡。相比iptables，ipvs提供了更强大、灵活的负载均衡能力。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/dd08f07685384e34bc52763b4510bf37.png" alt="img"></p><blockquote><p>工作原理：</p><ul><li>在 ipvs 模式下，kube-proxy 使用ipvs来实现负载均衡。ipvs为每个 Service 创建虚拟的 IP 地址（VIP），然后将流量根据负载均衡算法转发到后端的 Pod。</li><li>ipvs支持多种负载均衡算法，如轮询（Round Robin）、最少连接（Least Connection）、加权轮询（Weighted Round Robin）等。</li></ul></blockquote><table><thead><tr><th>模式</th><th>工作原理</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td>iptables</td><td>使用 Linux 内核的 <code>iptables</code> 规则来进行流量路由和负载均衡。</td><td>性能优越，简化配置。</td><td>随着规则数增多，性能会下降。负载均衡算法简单，通常是轮询。</td><td>中小规模的集群，适合大多数生产环境。</td></tr><tr><td>ipvs</td><td>使用 Linux 内核的 <code>ipvs</code> 模块来进行高效的负载均衡，支持多种负载均衡算法。</td><td>高效负载均衡，支持更多的调度算法，性能优秀。</td><td>配置复杂，需要内核支持 <code>ipvs</code> 模块。</td><td>大规模集群，高流量环境，复杂负载均衡需求</td></tr></tbody></table><h1 id="五、Ingress"><a href="#五、Ingress" class="headerlink" title="五、Ingress"></a>五、Ingress</h1><p>之前学习的svc资源，如果遇到多个服务要监听80端口时很明显无论哪种类型都无法实现，如果非要实现，就得在K8S集群外部部署一个LB设备，来代理到对应svc资源。而ingress就可以很好的解决这个问题。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5b1151206cd2452c824e6c99189bd104.png" alt="img"></p><h2 id="什么是ingress呢？"><a href="#什么是ingress呢？" class="headerlink" title="什么是ingress呢？"></a><strong>什么是ingress呢？</strong></h2><blockquote><ul><li>所谓的ingress指的是一种规则，基于用户访问的请求头路由到正确的svc。说白了就是7层代理</li><li>可惜K8S只是实现了ingress定义规则，这个规则被记录到etcd中，但并没有具体实现此功能，因此需要自行安装相应的附加组件(ingress-nginx,trafik,…)</li></ul></blockquote><h2 id="svc和ingress的区别？"><a href="#svc和ingress的区别？" class="headerlink" title="svc和ingress的区别？"></a><strong>svc和ingress的区别？</strong></h2><blockquote><ul><li>ingress和svc的区别是，svc只能实现4层的代理。而ingress实现了7层的代理。</li></ul></blockquote><h2 id="Ingress-Controller和ingress区别？"><a href="#Ingress-Controller和ingress区别？" class="headerlink" title="Ingress Controller和ingress区别？"></a><strong>Ingress Controller和ingress区别？</strong></h2><blockquote><ul><li>ingress是定义域名到svc的解析规则，好比nginx.conf配置文件。</li><li>而ingress-controller适用于执行规则的程序，好比nginx程序。</li></ul></blockquote><h2 id="Ingress-Controller和内置的Pod控制器有啥区别呢？"><a href="#Ingress-Controller和内置的Pod控制器有啥区别呢？" class="headerlink" title="Ingress Controller和内置的Pod控制器有啥区别呢？"></a><strong>Ingress Controller和内置的Pod控制器有啥区别呢？</strong></h2><blockquote><ul><li>内置的Pod控制器，比如ds,sts,deploy,jobs,cj,rs,rc等都是用来控制Pod的副本数量。</li><li>而Ingress Controller是用来解析ingress规则的，两者并没有任何关系</li></ul></blockquote><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a><strong>demo</strong></h2><p>创建工作负载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master231</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># cat deploy-apps.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deployment-apps-v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">apps:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">apps:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">c1</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.26.2</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-apps</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">apps:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>创建ingress资源</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@master231 ~]<span class="hljs-comment"># cat 01-apps-ingress.yaml </span><br><span class="hljs-params">apiVersion:</span> networking.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Ingress<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> apps-ingress<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">rules:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">host:</span> apps.cherry.com<br>    <span class="hljs-params">http:</span><br>      <span class="hljs-params">paths:</span><br>      <span class="hljs-operator">-</span> <span class="hljs-params">backend:</span><br>          <span class="hljs-params">service:</span><br>            <span class="hljs-params">name:</span> svc-apps<br>            <span class="hljs-params">port:</span><br>              <span class="hljs-params">number:</span> <span class="hljs-number">80</span><br>        <span class="hljs-params">path:</span> <span class="hljs-symbol">/</span><br>        <span class="hljs-params">pathType:</span> ImplementationSpecific<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 常用的网络插件</title>
    <link href="/2025/04/16/Kubernetes-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/"/>
    <url>/2025/04/16/Kubernetes-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p> 上篇内容跟大家简单聊了k8s网络模型原理。分别围绕着容器、Pod、Service、网络策略等展开了详细的讲解。这次想跟大家聊聊k8s的CNI网络插件。</p><p>CNI 是 Kubernetes 网络模型的核心组件，它是一个插件接口，允许用户选择和配置网络插件来管理 Pod 的网络。CNI 插件提供了网络连接、IP 地址分配、路由控制等基本功能。</p><p><strong>常见的 CNI 插件包括：</strong></p><p>Flannel：用于实现简单的网络隧道。</p><p>Calico：支持网络策略、跨节点网络路由等功能。</p><p>Weave：简化的网络配置，支持跨节点通信。</p><p>Cilium：基于 eBPF 技术的高性能网络插件，支持深度安全控制。</p><p>接触过K8S的同学，大致都听说过Flannel和Calico两种网络模型。这里就我们主要讲解Flannel和Calico的工作模式和原理。</p><h2 id="一、Flannel"><a href="#一、Flannel" class="headerlink" title="一、Flannel"></a>一、Flannel</h2><p>Flannel 是一个简单的网络插件，设计目的是为 Kubernetes 提供一个易于部署和配置的网络解决方案。它的目标是简化网络设置，适合那些对网络复杂度要求不高的 Kubernetes 集群。Flannel 基本上是一个 Overlay 网络 解决方案，它在每个节点上创建一个虚拟网络，并通过隧道技术（如 VXLAN、UDP、Host-GW）来实现跨节点的 Pod 网络通信。</p><ul><li>UDP</li><li>VXLAN</li><li>Host-gw</li></ul><h3 id="1-1-flannel-udp"><a href="#1-1-flannel-udp" class="headerlink" title="1.1 flannel-udp"></a>1.1 flannel-udp</h3><p>UPD模式Flannel最早实现的一种方式，也是性能最差的，目前已被弃用。但是这种方式也是最直接，最容易理解的方式，所以我们从这种方式开始介绍。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/9eab445bb6cb4f5490ef462a71c6c993.png" alt="img"></p><p>上图是Flannel-UDP模式的原理图。flannel0设备是一个TUN设备，它的作用非常简单，就是在系统内核和用户应用程序之间传包；flanneld进程的职责，就是封装和解封装。数据包是如何从Node1中的container-1容器发送到Node2的container-2容器的呢？</p><p>1.数据包从container-1，来到了网桥docker0上，由于数据包的目的地址不属于网桥的网段，所以数据包经由docker0网桥，出现在宿主机上。</p><p>2.在宿主机的路由表中，去往100.96.0.0&#x2F;16网段的包经由flannel0处理。flannel0收到数据包之后，将数据包送到flanneld进程，flanneld进程会对数据包封装成一个UDP数据包，src和dst地址分别为两个容器对应的宿主机的地址。这样，数据包就可以到达Node2了。</p><p>3.数据包到达Node2的8285端口，即Node2上的flanneld进程，会被执行解封装操作，之后数据包被发送到TUN设备，即flannel0设备。剩下的事情就简单了，数据包经过docker0网桥到达container-2。</p><h3 id="1-2-Flannel-vxlan"><a href="#1-2-Flannel-vxlan" class="headerlink" title="1.2 Flannel-vxlan"></a>1.2 Flannel-vxlan</h3><p>经过上面的介绍，大家对Flannel-UDP模式大致了解了吧，那聪明的你们已经猜到为什么Flannel-UDP被弃用了吧？没错，因为效率太低了，数据包每次经过flannel0设备，都会经过内核态-用户态-内核态的这一顿折腾。</p><p>Flannel-VXLAN方案用VXLAN技术替代了flannel0设备，让数据包能够在内核态上实现数据包的封装和解封装。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/bcc35c4be7a94477ad793a524d2ca1bf.png" alt="img"></p><p>Flannel-VXLAN网络模型如图所示，你会发现，这和Flannel-UDP基本上的是一样。事实也的确如此，Flannel-VXLAN是Flannel-UDP的升级版。这里需要交代一下他们之间的不同点。</p><p>1.Flannel-UDP的TUN设备flannel0，升级成了VXLAN的VTEP设备。数据包的封装和解封装在内核态就能完成。</p><p>2.数据包的格式中，增加了VXLAN Header，这个Header的作用和Flannel-UDP的数据包中的dport:8285的作用是一样的，当数据包来到Node2时，操作系统能根据VXLAN Header，把数据包直接给到flannel.1设备。</p><h3 id="1-3-Flannel-host-gw"><a href="#1-3-Flannel-host-gw" class="headerlink" title="1.3 Flannel-host-gw"></a>1.3 Flannel-host-gw</h3><p>此时，你肯定会说，Flannel-VXLAN虽然效率提高了，但是还是用到了隧道技术，效率还是会受到影响，能不能不用隧道技术呢？答案是能。接下来我们继续探索Flannel-host-gw网络模型，一个基于三层的网络方案。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/92996b23553e4231af1533a9c9c10779.png" alt="img"></p><p>Flannel-host-gw网络模型，相比较之前的两个网络模型，隧道设备确实没有了，取而代之的是一堆路由规则。那，数据包又是怎么从container1到container2的呢？</p><p>1.当数据包从container1到了网桥之后，通过Host网络栈的路由表，发现去container2的路已经指明，经由eth0，达到Node2（10.168.0.3&#x2F;24）即可。</p><p>2.当数据包到了Node2之后，通过Host网络栈的路由表，找到cni0网桥，container2自然也就找到了。</p><p>肉眼可见，Flannel-host-gw的性能确实提高了很多，那为什么还要用Flannel-VXLAN呢？原因很明显，Flannel-host-gw只支持宿主机在二层连通的网络，并且，K8S的规模不能太大，否则每台机器的路由表就太多了。</p><h2 id="二、Calico"><a href="#二、Calico" class="headerlink" title="二、Calico"></a>二、Calico</h2><p>Calico 是一个功能强大的网络插件，提供了高效的 路由 网络架构，并支持 网络策略（Network Policy），适合大规模、复杂的 Kubernetes 集群。它不仅适用于 Overlay 网络，还支持 BGP（边界网关协议）路由，提供高性能的网络连接。</p><h3 id="2-1-Calico（非IPIP模式）"><a href="#2-1-Calico（非IPIP模式）" class="headerlink" title="2.1 Calico（非IPIP模式）"></a>2.1 Calico（非IPIP模式）</h3><p>实际上Calico网络模型的解决方案，几乎和Flannel-host-gw是一样的。不同的是Flannel-host-gw使用etcd来维护主机的路由表，而Calico则使用BGP（边界网关协议）来维护主机的路由表。BGP协议的定义看着有点高深，换成通俗的说法，大家可以理解为在每个边界网关都会都运行着一个小程序，它们会交换各自的路由信息，将需要的信息更新到自己的路由表里。BGP这个能力正好可以取代Flannel-host-gw利用Etcd维护主机上路由表的功能，并且更为强大。</p><p>除了BGP之外，Calico另外一个不同之处就在于它不需要维护一个网桥。其中BGP Client和Felix的作用是和K8S集群其他节点交换路由信息，并更新Host网络栈的路由信息。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a32ece678fe048a087b6c1b593979938.png" alt="img"></p><p>由于没有了网桥设备，每个对设备Host网络栈的这一端，需要配置一条路由规则，将目的地址为对应Container的数据包转入该对设备。对应的路由如下所示：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.233.1.2</span> dev cali9c02e56 scope link<br></code></pre></td></tr></table></figure><p>数据包是如何从Container1走到Container3的呢？过程基本上和Flannel-host-gw无异了。唯一区别就是数据包进出容器，不再依赖网桥，而是直接通过宿主机路由表找到容器的另一端对设备。</p><h3 id="2-2-Calico（IPIP模式）"><a href="#2-2-Calico（IPIP模式）" class="headerlink" title="2.2 Calico（IPIP模式）"></a>2.2 Calico（IPIP模式）</h3><p>Calico听着挺强大的，实则和Flannel-host-gw一样，只支持宿主机二层联通的情况。假设Container1和Container3的宿主机在不同的子网，那通过二层网络是无法将数据包传到下一跳的地址的。如图7所示，Calico会在Node1创建这样一条路由规则：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.233.2.0</span>/<span class="hljs-number">16</span> via <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> eth0<br></code></pre></td></tr></table></figure><p>此时问题就出现了，下一跳是192.168.2.2，和Node1不在一个子网里，根本就找不到。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/600e6f5cb9a9459ca77357ffb02e154f.png" alt="img"></p><p>Calico的IPIP模式解决了上述问题，在每一台宿主机上，都会增加一个tunl0设备（IP隧道设备），并且会对应增加如下一条路由策略。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.233.2.0</span>/<span class="hljs-number">16</span> via <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> tunl0<br></code></pre></td></tr></table></figure><p>这样一来，Container1去往Container3的数据包就会经过tunl0设备的处理，tunl0设备会在源IP报头之外新增一个外部IP报头，拿本例来说，这个外部IP报头的src和dst分别为Node1和Node2的IP，这样，数据包就伪装成了从Node1发到Node2的数据包。当数据包到达Node2之后，Node2上的tunl0会把外部IP报头拿掉，从而拿到原始的IP包。</p><p>我知道，聪明的你此时肯定会有一个更好的想法，为什么不在Router1和Router2上也用BGP协议的方式，同步容器的IP路由信息呢？这样宿主机上不就可以不用tunl0设备了么。这个方法确实很好，并且在一些场景也得到了应用。</p><h2 id="三、Flannel-vs-Calico-区别"><a href="#三、Flannel-vs-Calico-区别" class="headerlink" title="三、Flannel vs Calico 区别"></a>三、Flannel vs Calico 区别</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>Flannel</strong></th><th><strong>Calico</strong></th></tr></thead><tbody><tr><td><strong>网络架构</strong></td><td>Overlay 网络（隧道模式）</td><td>基于路由（BGP 或 IP-in-IP）</td></tr><tr><td><strong>性能</strong></td><td>性能较低（因为使用隧道）</td><td>高性能，接近原生网络性能</td></tr><tr><td><strong>网络策略支持</strong></td><td>不支持网络策略</td><td>强大的网络策略支持（细粒度控制）</td></tr><tr><td><strong>配置和管理</strong></td><td>配置简单，适合快速部署</td><td>配置较复杂，但灵活性更高</td></tr><tr><td><strong>适用集群规模</strong></td><td>适合中小规模集群</td><td>适合大规模集群或跨数据中心部署</td></tr><tr><td><strong>安全控制</strong></td><td>无网络策略控制</td><td>提供丰富的安全控制和流量隔离</td></tr><tr><td><strong>支持的网络模式</strong></td><td>VXLAN, UDP, Host-GW</td><td>BGP, IP-in-IP, VXLAN 等多种模式</td></tr></tbody></table><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li><strong>Flannel</strong> 是一个轻量级的 Overlay 网络插件，适合中小型 Kubernetes 集群，特别是在对网络性能和安全要求不高的情况下。它安装和配置简单，但不支持网络策略，功能相对基础。</li><li><strong>Calico</strong> 提供更强大的功能，特别适合需要高性能、大规模、复杂安全控制和跨数据中心连接的 Kubernetes 集群。它不仅提供高效的网络路由（BGP），还支持细粒度的网络安全控制（通过网络策略</li></ul><p><strong>参考文献</strong></p><p>[1] 本文的图片均引自张磊老师的《深入剖析Kubernetes》</p><p>[2] Linux Bridge（网桥基础） <a href="https://link.zhihu.com/?target=https://quemingfei.com/archives/linuxbridge-wang-qiao-ji-chu-">https://quemingfei.com/archives/linuxbridge-wang-qiao-ji-chu-</a></p><p>[3] 维基百科 <a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki">https://en.wikipedia.org/wiki</a></p>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七层和四层区别？</title>
    <link href="/2025/04/16/%E4%B8%83%E5%B1%82%E5%92%8C%E5%9B%9B%E5%B1%82%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <url>/2025/04/16/%E4%B8%83%E5%B1%82%E5%92%8C%E5%9B%9B%E5%B1%82%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p> <strong>四层</strong>和<strong>七层</strong>是网络协议栈中的两个不同层级，分别对应于 <strong>OSI 模型</strong>（开放系统互联模型）中的 <strong>传输层（Layer 4）</strong> 和 <strong>应用层（Layer 7）</strong>。这两者的主要区别在于它们操作的网络层级、协议、数据处理方式以及它们在应用中的作用。</p><h2 id="1-OSI-模型概览"><a href="#1-OSI-模型概览" class="headerlink" title="1. OSI 模型概览"></a>1. <strong>OSI 模型概览</strong></h2><p>OSI 模型共有 7 层，每一层都有不同的功能，分别是：</p><ol><li><strong>物理层（Layer 1）</strong>：负责数据传输的物理媒介和信号传递。</li><li><strong>数据链路层（Layer 2）</strong>：负责节点间的可靠数据传输，解决 MAC 地址、帧传输等问题。</li><li><strong>网络层（Layer 3）</strong>：负责网络路由和寻址，如 IP 地址、路由器等。</li><li><strong>传输层（Layer 4）</strong>：负责端到端的可靠通信，如 TCP、UDP 等。</li><li><strong>会话层（Layer 5）</strong>：负责建立、管理、终止会话。</li><li><strong>表示层（Layer 6）</strong>：负责数据格式的转换、加密、解密、压缩等。</li><li><strong>应用层（Layer 7）</strong>：负责用户与网络的交互，包括具体的应用协议，如 HTTP、FTP、DNS 等。</li></ol><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8e667709d04148ea917005907f58b794.png" alt="img"></p><h2 id="2-四层和七层的区别"><a href="#2-四层和七层的区别" class="headerlink" title="2.四层和七层的区别"></a><strong>2.四层和七层的区别</strong></h2><h3 id="2-1-四层（传输层）"><a href="#2-1-四层（传输层）" class="headerlink" title="2.1. 四层（传输层）"></a>2.1. <strong>四层（传输层）</strong></h3><ul><li><strong>操作的层次</strong>：四层操作在 OSI 模型的 <strong>传输层</strong>，负责主机之间的通信，具体关注端到端的连接、流量控制、错误校验等。它的目标是保证可靠的数据传输。</li><li><strong>协议</strong>：<ul><li><strong>TCP（传输控制协议）</strong>：提供面向连接、可靠的传输。</li><li><strong>UDP（用户数据报协议）</strong>：提供无连接、不可靠的传输。</li></ul></li><li><strong>数据处理</strong>：<ul><li>四层设备（如四层负载均衡器）处理的是 <strong>IP 地址</strong> 和 <strong>端口号</strong>，即数据包的头信息。</li><li>它不会分析数据包的内容（如 HTTP 请求中的内容），只关心目标主机的端口号和协议类型。</li></ul></li><li><strong>功能</strong>：<ul><li><strong>负载均衡</strong>：根据 IP 地址和端口进行流量分配。</li><li><strong>传输协议处理</strong>：包括流量控制、连接管理等。</li></ul></li><li><strong>使用场景</strong>：<ul><li>四层负载均衡器常用于通过 <strong>TCP&#x2F;UDP</strong> 协议提供基础的负载均衡，广泛用于简单的高效转发需求，比如数据库、文件传输等。</li></ul></li></ul><h3 id="2-2-七层（应用层）"><a href="#2-2-七层（应用层）" class="headerlink" title="2.2. 七层（应用层）"></a>2.2. <strong>七层（应用层）</strong></h3><ul><li><strong>操作的层次</strong>：七层操作在 OSI 模型的 <strong>应用层</strong>，它是离用户最近的一层，处理与应用程序相关的所有事务。它不再关注底层的网络和传输，而是处理应用级协议的交互。</li><li><strong>协议</strong>：<ul><li><strong>HTTP（超文本传输协议）</strong>：用于网页浏览。</li><li><strong>HTTPS（安全超文本传输协议）</strong>：HTTP 的加密版本。</li><li><strong>FTP（文件传输协议）</strong>：用于文件传输。</li><li><strong>SMTP（简单邮件传输协议）</strong>：用于电子邮件发送。</li><li><strong>DNS（域名系统）</strong>：用于域名解析。</li></ul></li><li><strong>数据处理</strong>：<ul><li>七层设备（如七层负载均衡器）会检查和解析请求的数据内容（如 HTTP 请求的路径、头信息、方法等），并根据具体的内容（如 URL 或 HTTP 方法）进行负载均衡或其他处理。</li></ul></li><li><strong>功能</strong>：<ul><li><strong>内容检查与路由</strong>：七层设备能够识别 HTTP 请求、分析 URL、解析请求头等。</li><li><strong>负载均衡</strong>：根据请求的内容（如 URL、查询参数、Cookie 等）来决定如何分发请求。</li><li><strong>SSL 终端</strong>：可以在七层负载均衡器处进行 SSL&#x2F;TLS 协议的加解密。</li></ul></li><li><strong>使用场景</strong>：<ul><li>七层负载均衡器通常用于 Web 应用，能够智能地基于内容进行流量路由和负载均衡，适用于 Web 服务的高可用和高扩展性需求。</li></ul></li></ul><h2 id="3-四层和七层的核心区"><a href="#3-四层和七层的核心区" class="headerlink" title="3. 四层和七层的核心区"></a>3. <strong>四层和七层的核心区</strong></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>四层（传输层）</strong></th><th><strong>七层（应用层）</strong></th></tr></thead><tbody><tr><td><strong>层级</strong></td><td>传输层（Layer 4）</td><td>应用层（Layer 7）</td></tr><tr><td><strong>处理的数据</strong></td><td>基于 <strong>IP 地址</strong> 和 <strong>端口号</strong>，不关心应用数据的内容</td><td>根据具体应用协议的内容（如 HTTP 请求的 URL、头部、方法等）</td></tr><tr><td><strong>协议</strong></td><td>TCP、UDP</td><td>HTTP、HTTPS、FTP、DNS 等应用层协议</td></tr><tr><td><strong>负载均衡方式</strong></td><td>基于 IP 地址和端口的负载均衡</td><td>基于应用层数据（如请求路径、请求类型、查询参数等）的负载均衡</td></tr><tr><td><strong>功能</strong></td><td>负责端到端的通信和传输，流量控制、连接管理等</td><td>根据请求内容进行智能路由、应用协议解析、SSL 终端等</td></tr><tr><td><strong>适用场景</strong></td><td>主要用于简单、高效的传输，如 TCP&#x2F;IP 流量转发</td><td>主要用于 Web 服务、高级流量管理和内容路由</td></tr><tr><td><strong>性能</strong></td><td>性能更高，因为只处理较为简单的 IP 和端口信息</td><td>性能相对较低，因为需要解析应用数据</td></tr><tr><td><strong>处理层次</strong></td><td>不关心应用内容，关注的是数据包的传输层信息</td><td>关心应用内容，能够分析和处理协议的具体数据</td></tr></tbody></table><h2 id="4-实际应用中的选择"><a href="#4-实际应用中的选择" class="headerlink" title="4. 实际应用中的选择"></a>4. <strong>实际应用中的选择</strong></h2><ul><li><strong>四层负载均衡器</strong>（如 <strong>F5、Nginx 四层模式</strong>）：通常用于 <strong>TCP&#x2F;IP 流量</strong>，如数据库服务器、邮件服务器等，只需要基于 IP 和端口做转发。它们较为简单、高效，适合处理大量的并发连接。</li><li><strong>七层负载均衡器</strong>（如 <strong>Nginx 七层模式、HAProxy</strong>）：用于 <strong>Web 应用服务</strong>，可以根据请求的具体内容（如 HTTP 请求路径、头部信息、Cookie、查询参数等）进行更细粒度的路由决策。它们通常在处理 Web 流量、API 请求时更加灵活和智能，适用于需要应用级流量管理的场景。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prometheus+Grafana+k8s全方位教学</title>
    <link href="/2025/04/16/prometheus-Grafana-k8s%E5%85%A8%E6%96%B9%E4%BD%8D%E6%95%99%E5%AD%A6/"/>
    <url>/2025/04/16/prometheus-Grafana-k8s%E5%85%A8%E6%96%B9%E4%BD%8D%E6%95%99%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1、架构图"><a href="#1、架构图" class="headerlink" title="1、架构图"></a>1、架构图</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/39b97ead427144628582592e0c502bcd.png" alt="在这里插入图片描述"></p><h2 id="2、组件"><a href="#2、组件" class="headerlink" title="2、组件"></a>2、组件</h2><p><strong>Prometheus Server</strong><br>用于收集和存储时间序列数据。Prometheus Server 是 Prometheus 组件中的核心部分，负责实现对监控数据的获取，存储以及查询。 Prometheus Server 可以通过静态配置管理监控目标，也可以配合使用 Service Discovery 的方式动态管理监控目标，并从这些监控目标中获取数据。其次 Prometheus Server 需要对采集到的监控数据进行存储，Prometheus Server 本身就是一个时序数据库，将采集到的监控数据按照时间序列的方式存储在本地磁盘当中。最后Prometheus Server 对外提供了自定义的 PromQL 语言，实现对数据的查询以及分析。</p><p><strong>Exporter</strong><br>用于暴露已有的第三方服务的 metrics 给 Prometheus。Exporter 将监控数据采集的端点通过 HTTP 服务的形式暴露给 Prometheus Server，Prometheus Server 通过访问该 Exporter 提供的 Endpoint 端点，即可获取到需要采集的监控数据。</p><p><strong>Push Gateway</strong><br>主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这些 jobs 可以直接向 Prometheus server 端推送它们的 metrics。</p><p><strong>Grafana</strong><br>第三方展示工具，可以编写 PromQL 查询语句，通过 http 协议与 prometheus 集成。</p><p><strong>AlertManager</strong><br>从 Prometheus Server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对方的接受方式，发出报警。常见的接收方式有：电子邮件，钉钉、企业微信，pagerduty等。</p><p><strong>Client Library</strong><br>客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus Server。当 Prometheus Server 来 pull 时，直接返回实时状态的 metrics。</p><pre><code class="hljs">  监控流程：      1.exporter节点暴露监控指标;      2.Prometheus server修改配置文件监控暴露节点;      3.重载配置检查WebUI;      4.grafana出图展示;</code></pre><h2 id="3、prometheus部署"><a href="#3、prometheus部署" class="headerlink" title="3、prometheus部署"></a>3、prometheus部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载Prometheus的软件包<br>[root@prometheus-server31 ~]# wget https://github.com/prometheus/prometheus/releases/download/v2.53.2/prometheus-2.53.2.linux-amd64.tar.gz<br><br>上传普罗米修斯部署脚本（需要脚本可后台留言~）<br>[root@prometheus-server31 ~]# tar xf install-prometheus-server.tar.gz <br><br>安装<br>[root@prometheus-server31 ~]# ./install-prometheus-server.sh i<br></code></pre></td></tr></table></figure><h2 id="4、node-exporter环境搭建"><a href="#4、node-exporter环境搭建" class="headerlink" title="4、node-exporter环境搭建"></a>4、node-exporter环境搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载软件包 <br>[root@prometheus-node41 ~]# wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz<br><br>脚本一键部署node-exporter（需要脚本后台留言~）<br>[root@prometheus-node41 ~]# tar xf install-node-exporter.tar.gz <br><br>安装服务 <br>[root@prometheus-node41 ~]# ./install-node-exporter.sh i<br></code></pre></td></tr></table></figure><h2 id="5、Prometheus-server监控node-exporter实战"><a href="#5、Prometheus-server监控node-exporter实战" class="headerlink" title="5、Prometheus server监控node-exporter实战"></a>5、Prometheus server监控node-exporter实战</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.修改Prometheus server的配置文件监控node-exporter节点 <br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br><span class="hljs-comment"># 修改通用全局配置</span><br>global:<br>  <span class="hljs-comment"># Prometheus server抓取数据的间隔时间，默认值为1分钟</span><br>  scrape_interval: 3s <br>  <br>...<br><span class="hljs-comment"># 定义抓取配置</span><br>scrape_configs:<br>  ...(添加如下信息)<br><br>    <span class="hljs-comment"># 自定义任务的名称</span><br>  - job_name: node-exporters<br>    <span class="hljs-comment"># 指定采集指标时访问的路径</span><br>    metrics_path: /metrics<br>    <span class="hljs-comment"># 指定采集指标时使用的协议</span><br>    scheme: http<br>    <span class="hljs-comment"># 指定被监控的node-exporter节点列表</span><br>    static_configs:<br>    - targets:<br>      - 10.0.0.41:9100<br>      - 10.0.0.42:9100<br>      - 10.0.0.43:9100<br><br><br>2.检查配置文件语法是否正确 <br>[root@prometheus-server31 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config  /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>3.Prometheus server加载配置文件<br>[root@prometheus-server31 ~]# curl -X POST 10.0.0.31:9090/-/reload<br><br>4.给检查和加载配置文件起别名<br>[root@prometheus-server31 ~]# vim ~/.bashrc <br>...<br><span class="hljs-built_in">alias</span> rr=<span class="hljs-string">&#x27;curl -X POST 10.0.0.31:9090/-/reload&#x27;</span><br><span class="hljs-built_in">alias</span> check=<span class="hljs-string">&#x27;/softwares/prometheus-2.53.2.linux-amd64/promtool check config  /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml&#x27;</span><br><br>[root@prometheus-server31 ~]# <span class="hljs-built_in">source</span>  ~/.bashrc <br><br>5.查看Prometheus的WebUI验证节点是否加入成功<br>http://10.0.0.31:9090/targets<br><br>6..查看Prometheus的指标数据<br>node_cpu_seconds_total<br></code></pre></td></tr></table></figure><h2 id="6、PQL"><a href="#6、PQL" class="headerlink" title="6、PQL"></a>6、PQL</h2><p>prometheus监控中采集过来的数据统一称为Metrics数据，其并不是代表具体的数据格式，而是一种统计度量计算单位。</p><p>当我们需要为某个系统或者某个服务做监控时，就需要使用到metrics。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">前提条件: (所有节点时区同步)<br><span class="hljs-built_in">ln</span> -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime <br></code></pre></td></tr></table></figure><h4 id="体验promql"><a href="#体验promql" class="headerlink" title="体验promql"></a><strong>体验promql</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 查看某个特定的key<br>node_cpu_seconds_total<br><br>2 查看某个节点的指标<br>node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>&#125;<br><br>3 查看某个节点的某刻CPU的某种状态<br>node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>,mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;<br><br>4 查询最近10s内某个节点CPU的某种状态时间<br>node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>,mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[10s]<br><br>5 统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，非空闲状态使用的总时间<br>node_cpu_seconds_total&#123;mode!=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m]<br><br>6 统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，mode名称以字母<span class="hljs-string">&quot;i&quot;</span>开头的所有CPU核心。<br>node_cpu_seconds_total&#123;mode=~<span class="hljs-string">&quot;i.*&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m]<br><br>7 统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，mode名称不是以字母<span class="hljs-string">&quot;i&quot;</span>开头的所有CPU核心。<br>node_cpu_seconds_total&#123;mode!~<span class="hljs-string">&quot;i.*&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m]<br><br></code></pre></td></tr></table></figure><h4 id="Prometheus常用的函数"><a href="#Prometheus常用的函数" class="headerlink" title="Prometheus常用的函数"></a><strong>Prometheus常用的函数</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 increase函数: 用来针对counter数据类型，截取其中一段时间总的增量。<br>举个例子:<br>   increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m])<br>统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，空闲状态使用的总时间增量。<br><br>2 <span class="hljs-built_in">sum</span>函数: 加和的作用。<br>举个例子:<br> <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>&#125;[1m]))<br>统计1分钟内，使用标签过滤器查看所有节点的第0颗CPU，空闲状态使用的总时间增量，并将返回结果累加。<br><br>3 by函数: 将数据进行分组，类似于MySQL的<span class="hljs-string">&quot;GROUP BY&quot;</span>。<br>举个例子:<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[1m])) by (instance)<br>统计1分钟内，使用标签过滤器查看CPU空闲状态，并将结果进行累加，基于instance进行分组。<br><br>4 rate函数: 它的功能是按照设置的时间段，取counter在这个时间段中平均每秒的增量。<br>举个例子:<br>rate(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m])<br>统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，空闲状态使用的每秒的增量。<br><br>increase和rate如何选择:<br>(1)对于采集数据频率较低的场景建议使用increase函数，因为使用rate函数可能会出现断点,比如针对硬盘容量监控。<br>(2)对于采集数据频率较高的场景建议使用rate函数，比如针对CPU，内存，网络流量等都是可以基于rate函数来采集等。<br><br>5 topk函数: 取前几位的最高值，实际使用的时候一般会用该函数进行瞬时报警，而不是为了观察曲线图。<br>举个例子:<br>topk(3, rate(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[1m]))<br>统计1分钟内，使用标签过滤器查看CPU，所有状态使用的每秒的增量，只查看前3个节点。<br><br>6 count函数:<br>把数值符合条件的，输出数目进行累加加和。<br>比如说企业中有100台服务器，如果只有10台服务器CPU使用率高于80%时候是不需要报警的，但是数量操作70台时就需要报警了。<br><br>举个例子:<br>count(tcp_wait_conn &gt; 500):<br>假设(tcp_wait_conn是咱们自定义的KEY。<br>若TCP等待数量大于500的机器数量就判断条件为真。<br><br>count(rate(node_cpu_seconds_total&#123;cpu=<span class="hljs-string">&quot;0&quot;</span>,mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[1m]))<br>对统计的结果进行计数。<br><br>7 其他函数  https://prometheus.io/docs/prometheus/latest/querying/functions/<br></code></pre></td></tr></table></figure><h4 id="监控CPU的使用情况案例"><a href="#监控CPU的使用情况案例" class="headerlink" title="监控CPU的使用情况案例"></a>监控CPU的使用情况案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 统计各个节点CPU的使用率<br>1.1 我们需要先找到CPU相关的KEY<br>node_cpu_seconds_total<br><br>1.2 过滤出CPU的空闲时间(&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;)和全部CPU的时间(<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>)<br>node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;<br>过滤CPU的空闲时间。<br><br>node_cpu_seconds_total&#123;&#125;<br>此处的<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>可以不写，因为里面没有任何参数，代表获取CPU的所有状态时间。<br><br>1.3 统计1分钟内CPU的增量时间<br>increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])<br>统计1分钟内CPU空闲状态的增量。<br><br>increase(node_cpu_seconds_total[1m])<br>统计1分钟内CPU所有状态的增量。<br><br>1.4 将结果进行加和统计<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m]))<br>将1分钟内所有CPU空闲时间的增量进行加和计算。<br><br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m]))<br>将1分钟内所有CPU空闲时间的增量进行加和计算。<br><br>1.5 按照不同节点进行分组<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance)<br>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。<br><br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)<br>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。<br><br>1.6 计算1分钟内CPU空闲时间的百分比<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)<br><br>1.7 统计1分钟内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。<br>(1 - <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100<br><br>1.7 统计1小时内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。<br>(1 - <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1h])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1h])) by (instance)) * 100<br><br><br>2 计算CPU用户态的1分钟内百分比<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;user&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance) * 100<br><br>3 计算CPU内核态的1分钟内百分比<br>(<span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;system&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100<br><br>4 计算CPU IO等待时间的1分钟内百分比<br>(<span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;iowait&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100<br></code></pre></td></tr></table></figure><h2 id="7、grafana"><a href="#7、grafana" class="headerlink" title="7、grafana"></a>7、grafana</h2><h4 id="grafana部署"><a href="#grafana部署" class="headerlink" title="grafana部署"></a>grafana部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 下载grafana<br>wget https://dl.grafana.com/enterprise/release/grafana-enterprise_11.1.4_amd64.deb<br><br>2.安装grafana<br>[root@prometheus-server31 ~]# apt-get install -y adduser libfontconfig1 musl<br>[root@prometheus-server31 ~]# <br>[root@prometheus-server31 ~]# dpkg -i grafana-enterprise_11.1.4_amd64.deb<br><br>3.启动grafana <br>[root@prometheus-server31 ~]# systemctl <span class="hljs-built_in">enable</span> --now grafana-server<br>[root@prometheus-server31 ~]# <br>[root@prometheus-server31 ~]# ss -ntl | grep 3000<br>LISTEN 0      4096               *:3000            *:*    <br><br>4.访问grafana的WebUI<br>http://10.0.0.31:3000/login<br>- 1.初始化的用户名和密码均为: admin <br></code></pre></td></tr></table></figure><p><strong>配置Prometheus的数据源</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/781412229a9249699bcf56555933b72f.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/89dcebbc6a794cdd9ce03c819b5ff35c.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/45133fff7e4146bf9b3b4a7e6b975270.png" alt="在这里插入图片描述"></p><p><strong>添加服务端地址</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/69aff8fdd139453da62a7f029ce5fdb1.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/96440f22bc744cf98ef6b9a796e7e8e6.png" alt="在这里插入图片描述"></p><p><strong>导入样板</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/849314b2241045a28049f184cabcafcd.png" alt="在这里插入图片描述"></p><p><strong>选择样板id</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/32037fdf1cc2467fa22574fc36677118.png" alt="在这里插入图片描述"></p><p><strong>选择数据源</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2218c681c0de4de39e80bc63a92c4ed0.png" alt="在这里插入图片描述"></p><p><strong>配置grafana展示node-exporter数据</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2aee5db9f02445a4b4bbebe06cad4744.png" alt="在这里插入图片描述"></p><h4 id="grafana自定义dashboard"><a href="#grafana自定义dashboard" class="headerlink" title="grafana自定义dashboard"></a>grafana自定义dashboard</h4><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/0af2d0c02ef44fbfab2c39a58387bd87.png" alt="在这里插入图片描述"></p><h4 id="grafana实现备份和恢复"><a href="#grafana实现备份和恢复" class="headerlink" title="grafana实现备份和恢复"></a>grafana实现备份和恢复</h4><p>保存json文件，恢复的时候可粘贴内容或者导入文件</p><h2 id="8、联邦模式"><a href="#8、联邦模式" class="headerlink" title="8、联邦模式"></a>8、联邦模式</h2><p>默认情况下，prometheus采集的数据会存储到本地，这意味者prometheus在这种工作模式下，可能会存在单机存储的瓶颈。</p><ul><li><p>为了解决prometheus对于数据的采集压力，我们可以采用联邦模式来部署prometheus</p></li><li><p>所谓联邦模式就是部署多个server共同采集数据</p></li></ul><h4 id="联邦架构图"><a href="#联邦架构图" class="headerlink" title="联邦架构图"></a><strong>联邦架构图</strong></h4><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/26cbfe2310e248c59a3e22826211db12.png" alt="在这里插入图片描述"></p><h4 id="部署联邦模式"><a href="#部署联邦模式" class="headerlink" title="部署联邦模式"></a><strong>部署联邦模式</strong></h4><p>1.修改prometheus server32配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus server配置文件<br>[root@prometheus-server32 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br><br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-32&#x27;</span><br>    static_configs:<br>    - targets:<br>      - <span class="hljs-string">&quot;10.0.0.41:9100&quot;</span><br><br>重载prometheus server<br>[root@prometheus-server32 ~]# curl -X POST http://10.0.0.32:9090/-/reload<br><br>验证数据是否采集成功<br>http://10.0.0.32:9090/targets<br></code></pre></td></tr></table></figure><p>2.修改prometheus server33配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus server的配置文件<br>[root@prometheus-server33 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-33&#x27;</span><br>    static_configs:<br>    - targets:<br>      - <span class="hljs-string">&quot;10.0.0.42:9100&quot;</span><br>  - <span class="hljs-string">&quot;10.0.0.43:9100&quot;</span><br><br>重载prometheus server<br>[root@prometheus-server33 ~]# curl -X POST http://10.0.0.33:9090/-/reload<br><br>验证数据是否采集成功<br>http://10.0.0.33:9090/targets<br></code></pre></td></tr></table></figure><p>3.修改Prometheus server31配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus server的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;prometheus-federate-32&quot;</span><br>    metrics_path: <span class="hljs-string">&quot;/federate&quot;</span><br>    <span class="hljs-comment"># 用于解决标签的冲突问题，有效值为: true和false，默认值为false</span><br>    <span class="hljs-comment"># 当设置为true时，将保留抓取的标签以忽略服务器自身的标签。说白了会覆盖原有标签。</span><br>    <span class="hljs-comment"># 当设置为false时，则不会覆盖原有标签，而是在标点前加了一个&quot;exported_&quot;前缀。</span><br>    honor_labels: <span class="hljs-literal">true</span><br>    params:<br>       <span class="hljs-string">&quot;match[]&quot;</span>:<br>       - <span class="hljs-string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span><br>    static_configs:<br>    - targets:<br>        - <span class="hljs-string">&quot;10.0.0.32:9090&quot;</span><br><br>  - job_name: <span class="hljs-string">&quot;prometheus-federate-33&quot;</span><br>    metrics_path: <span class="hljs-string">&quot;/federate&quot;</span><br>    honor_labels: <span class="hljs-literal">true</span><br>    params:<br>       <span class="hljs-string">&quot;match[]&quot;</span>:<br>       - <span class="hljs-string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span><br>    static_configs:<br>    - targets:<br>        - <span class="hljs-string">&quot;10.0.0.33:9090&quot;</span><br><br>检查配置文件语法<br>[root@prometheus-server31 ~]# check <br><br>重载prometheus server<br>[root@prometheus-server31 ~]# rr<br><br>验证数据是否采集成功<br>http://10.0.0.31:9090/targets<br><br></code></pre></td></tr></table></figure><h2 id="9、监控流程"><a href="#9、监控流程" class="headerlink" title="9、监控流程"></a>9、监控流程</h2><p>普罗米修斯监控可分为两类，云原生应用和非云原生应用。</p><p>云原生应用提供metrics，不需要安装exporters客户端，直接修改配置文件即可</p><p>非云原生应用需要安装exportes客户端，并启动客户端，服务端yaml文件加入客户端ip和端口</p><h2 id="10、监控zookeeper集群"><a href="#10、监控zookeeper集群" class="headerlink" title="10、监控zookeeper集群"></a>10、监控zookeeper集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改zookeeper集群的配置文件<br>[root@elk91 ~]# vim /softwares/apache-zookeeper-3.8.4-bin/conf/zoo.cfg <br>...<br><span class="hljs-comment"># https://prometheus.io Metrics Exporter</span><br>metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider<br>metricsProvider.httpHost=0.0.0.0<br>metricsProvider.httpPort=7000<br>metricsProvider.exportJvmInfo=<span class="hljs-literal">true</span><br>...           <br>[root@elk91 ~]# systemctl restart zk<br><br>测试服务是否正常<br>[root@elk91 ~]# <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 91 93`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-built_in">stat</span> | nc 10.0.0.<span class="hljs-variable">$i</span> 2181 | grep Mode;<span class="hljs-keyword">done</span><br>Mode: follower<br>Mode: leader<br>Mode: follower<br><br>访问webUI<br>http://10.0.0.91:7000/metrics<br><br>Prometheus server配置监控zookeeper集群<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">tail</span> -6 /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>  - job_name: zookeeper<br>    static_configs:<br>    - targets:<br>      - 10.0.0.91:7000<br>      - 10.0.0.92:7000<br>      - 10.0.0.93:7000<br>[root@prometheus-server31 ~]# <br>[root@prometheus-server31 ~]# check<br>重载服务<br>[root@prometheus-server31 ~]# rr<br><br>访问Prometheus的WebUI进行验证<br>http://10.0.0.31:9090/targets<br><br>grafana导入模板<br>10465<br></code></pre></td></tr></table></figure><h2 id="11、客户端下载地址"><a href="#11、客户端下载地址" class="headerlink" title="11、客户端下载地址"></a>11、客户端下载地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">监控应用的流程Prometheus<br>https://prometheus.io/docs/instrumenting/exporters/<br></code></pre></td></tr></table></figure><h2 id="12、监控elasticsearch集群"><a href="#12、监控elasticsearch集群" class="headerlink" title="12、监控elasticsearch集群"></a>12、监控elasticsearch集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载elasticsearch exporter<br>https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v1.7.0/elasticsearch_exporter-1.7.0.linux-amd64.tar.gz<br><br>2.解压软件包 <br>[root@elk91 ~]# tar xf elasticsearch_exporter-1.7.0.linux-amd64.tar.gz <br><br>3.启动测试<br>[root@elk91 elasticsearch_exporter-1.7.0.linux-amd64]# ./elasticsearch_exporter --es.uri=<span class="hljs-string">&quot;http://elastic:123456@10.0.0.93:9200&quot;</span> --web.listen-address=:9114 --web.telemetry-path=<span class="hljs-string">&quot;/metrics&quot;</span> <br><br>4.Prometheus server监控es的exporter<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br><br>  - job_name: elasticsearch<br>    static_configs:<br>    - targets:<br>      - 10.0.0.91:9114<br>      <br>[root@prometheus-server31 ~]# rr<br><br>5.查看Prometheus的WebUI是否监控到目标<br>http://10.0.0.31:9090/targets<br><br>6.grafana出图展示<br>14191<br></code></pre></td></tr></table></figure><h2 id="13、监控kafka集群"><a href="#13、监控kafka集群" class="headerlink" title="13、监控kafka集群"></a>13、监控kafka集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.启动kafka集群<br>[root@elk91 ~]# kafka-server-start.sh -daemon <span class="hljs-variable">$KAFKA_HOME</span>/config/server.properties <br><br>[root@elk92 ~]# kafka-server-start.sh -daemon <span class="hljs-variable">$KAFKA_HOME</span>/config/server.properties <br><br>[root@elk93 ~]# kafka-server-start.sh -daemon <span class="hljs-variable">$KAFKA_HOME</span>/config/server.properties <br><br>2.验证kafka服务是否正常<br>[root@elk91 ~]# zkCli.sh <span class="hljs-built_in">ls</span> /kafka371/brokers/ids  | grep <span class="hljs-string">&quot;^\[&quot;</span><br><br>3.下载kafka的exporter<br>wget https://github.com/danielqsj/kafka_exporter/releases/download/v1.7.0/kafka_exporter-1.7.0.linux-amd64.tar.gz<br><br>4.解压目录中指定文件kafka_exporter到指定路径<br>[root@elk91 ~]# tar xf  kafka_exporter-1.7.0.linux-amd64.tar.gz -C /usr/local/bin/ kafka_exporter-1.7.0.linux-amd64/kafka_exporter  --strip-components=1<br><br>5.启动 kafka_exporter<br>[root@elk91 ~]# kafka_exporter --web.listen-address=<span class="hljs-string">&quot;:9308&quot;</span> --web.telemetry-path=<span class="hljs-string">&quot;/metrics&quot;</span>  --kafka.version=<span class="hljs-string">&quot;3.7.1&quot;</span> --kafka.server=10.0.0.93:9092<br><br>6.访问测试kafka的exporter页面<br>http://10.0.0.91:9308/metrics<br><br>7.Prometheus配置监控kafka的exporter<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: kafka<br>    static_configs:<br>    - targets:<br>      - 10.0.0.91:9308<br>  <br>[root@prometheus-server31 ~]# rr<br><br>8.查看Prometheus的WebUI是否监控到目标<br>http://10.0.0.31:9090/targets<br><br>9.grafana出图展示<br>12460<br><br>9.测试验证准确信<br>9.1 创建topic<br>[root@elk93 ~]# kafka-topics.sh --bootstrap-server 10.0.0.91:9092 --create --topic xixi --partitions 3 <br>Created topic xixi.<br>[root@elk93 ~]# <br><br><br>9.2 启动消费者<br>[root@elk92 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.91:9092  --topic xixi <br><br>9.3 启动生产者<br>[root@elk93 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.91:9092  --topic xixi<br></code></pre></td></tr></table></figure><h2 id="14、监控Jenkins服务"><a href="#14、监控Jenkins服务" class="headerlink" title="14、监控Jenkins服务"></a>14、监控Jenkins服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.jenkins安装Prometheus插件<br>如果安装插件失败，可以直接导入tar包到/var/lib/jenkins/plugins目录并重启。<br>tar xf jenkins-plugins.tar.gz <br><br>2.验证Jenkins的metrics组件是否生效<br>[root@jenkins211 plugins]# systemctl restart jenkins<br>http://10.0.0.211:8080/prometheus/<br><br>3.验证Jenkins的metrics组件是否生效<br>http://10.0.0.211:8080/prometheus/<br><br>4.修改Prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: jenkins<br>    metrics_path: /prometheus<br>    static_configs:<br>    - targets:<br>      - 10.0.0.211:8080<br>...<br><br>[root@prometheus-server31 ~]# rr<br><br>5.访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>6.导入Jenkins的相关模板<br>9964<br>9524<br>12646<br></code></pre></td></tr></table></figure><h2 id="15、监控mysql服务"><a href="#15、监控mysql服务" class="headerlink" title="15、监控mysql服务"></a>15、监控mysql服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.部署MySQL<br>[root@jenkins211 ~]# docker run --name mysql-server -d \<br>             -e MYSQL_USER=<span class="hljs-string">&quot;root&quot;</span> \<br>             -e MYSQL_PASSWORD=<span class="hljs-string">&quot;123456&quot;</span> \<br>             -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="hljs-string">&quot;yes&quot;</span> \<br>             --network=host \<br> --restart unless-stopped \<br>             mysql:8.4.2-oracle \<br>             --character-set-server=utf8mb4 --collation-server=utf8mb4_bin <br>             <br>[root@jenkins211 ~]# docker ps -l<br>CONTAINER ID   IMAGE                COMMAND                  CREATED          STATUS          PORTS     NAMES<br>5db1d0101b5c   mysql:8.3.0-oracle   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   13 seconds ago   Up 13 seconds             mysql-server<br>[root@jenkins211 ~]# <br>[root@jenkins211 ~]# ss -ntl | grep 3306<br>LISTEN 0      151                *:3306             *:*          <br>LISTEN 0      70                 *:33060            *:*   <br><br><br>2.下载mysql exporter <br>wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.15.1/mysqld_exporter-0.15.1.linux-amd64.tar.gz<br><br>3.安装mysql exporters<br>[root@jenkins211 ~]# tar xf mysqld_exporter-0.15.1.linux-amd64.tar.gz -C /usr/local/bin/ mysqld_exporter-0.15.1.linux-amd64/mysqld_exporter  --strip-components=1<br><br>4.准备MySQL的链接认证文件，创建MySQL的配置，指定默认的用户名和密码<br>[root@jenkins211 ~]# <span class="hljs-built_in">cat</span>  ~/.my.cnf <br>[client]<br>user=root<br>password=123456<br><br>5.运行mysqld-exporter<br>[root@jenkins211 ~]# mysqld_exporter --mysqld.address=<span class="hljs-string">&quot;10.0.0.211:3306&quot;</span> --web.listen-address=:9104 --config.my-cnf=<span class="hljs-string">&quot;/root/.my.cnf&quot;</span><br><br>6.访问mysqld_exporter的webUI<br>http://10.0.0.211:9104/metrics<br><br>7.修改Prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: mysql<br>    static_configs:<br>    - targets:<br>      - 10.0.0.211:9104<br>      <br>[root@prometheus-server31 ~]# rr<br><br>8.查看Prometheus是否监控到数据<br>http://10.0.0.31:9090/targets<br><br>9.grafana出图展示<br>18949<br>17320<br>14057<br></code></pre></td></tr></table></figure><h2 id="16、监控Redis服务"><a href="#16、监控Redis服务" class="headerlink" title="16、监控Redis服务"></a>16、监控Redis服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.部署Redis<br>[root@jenkins211 ~]# docker run -d --name redis-server --restart always --network host  redis:7.2.5<br><br>2.下载redis-exporter<br>wget https://github.com/oliver006/redis_exporter/releases/download/v1.52.0/redis_exporter-v1.52.0.linux-amd64.tar.gz<br><br>3.解压软件包到PATH路径<br>[root@jenkins211 ~]# tar xf redis_exporter-v1.61.0.linux-amd64.tar.gz -C /usr/local/bin/ redis_exporter-v1.61.0.linux-amd64/redis_exporter --strip-components=1<br>[root@jenkins211 ~]# ll /usr/local/bin/<br><br>4.运行redis-exporter<br>[root@jenkins211 ~]# redis_exporter -web.listen-address=:9121 -web.telemetry-path=/metrics  -redis.addr=redis://10.0.0.211:6379<br><br>5.访问redis-exporter的WebUI<br>http://10.0.0.211:9121/metrics<br><br>6.修改Prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: redis<br>    static_configs:<br>    - targets:<br>      - 10.0.0.211:9121<br>[root@prometheus-server31 ~]# rr<br><br><br>7.访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>8.grafana出图展示<br>763<br>14091<br></code></pre></td></tr></table></figure><h2 id="17、安装grafana插件"><a href="#17、安装grafana插件" class="headerlink" title="17、安装grafana插件"></a>17、安装grafana插件</h2><p><strong>在线安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">grafana的版本为9.5.21<br>软件包下载到/var/lib/grafana/plugins/目录<br><br>[root@prometheus-server31 grafana]# grafana-cli plugins install natel-discrete-panel<br></code></pre></td></tr></table></figure><p><strong>离线安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@grafana71 ~]# wget  https://grafana.com/api/plugins/natel-discrete-panel/versions/latest/download -O /opt/natel-discrete-panel.zip<br><br>[root@prometheus-server31 ~]# unzip natel-discrete-panel-0.1.1.zip -d /var/lib/grafana/plugins/<br><br>[root@prometheus-server31 ~]# systemctl restart grafana-server<br><br>[root@prometheus-server31 ~]# ss -ntl | grep 3000<br>LISTEN 0      4096               *:3000            *:*          <br></code></pre></td></tr></table></figure><h2 id="18、监控nginx服务"><a href="#18、监控nginx服务" class="headerlink" title="18、监控nginx服务"></a>18、监控nginx服务</h2><p><strong>编译安装nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 安装编译工具<br>CentOS：<br>yum -y install git wget gcc make zlib-devel gcc-c++ libtool openssl openssl-devel<br><br>Ubuntu：<br>apt -y install git wget gcc make zlib1g-dev build-essential libtool openssl libssl-dev<br><br>2 克隆nginx-module-vts模块<br>git <span class="hljs-built_in">clone</span> git://github.com/vozlt/nginx-module-vts.git<br>或者<br>git <span class="hljs-built_in">clone</span> https://gitee.com/jasonyin2020/nginx-module-vts.git<br><br>3 下载nginx软件包<br>wget https://nginx.org/download/nginx-1.26.2.tar.gz<br><br>4 解压nginx<br>tar xf nginx-1.26.2.tar.gz<br><br><br>5 配置nginx<br><span class="hljs-built_in">cd</span> nginx-1.26.2<br>./configure --prefix=/softwares/nginx \<br>  --with-http_ssl_module \<br>  --with-http_v2_module \<br>  --with-http_realip_module \<br>  --without-http_rewrite_module \<br>  --with-http_stub_status_module \<br>  --without-http_gzip_module  \<br>  --with-file-aio \<br>  --with-stream \<br>  --with-stream_ssl_module \<br>  --with-stream_realip_module \<br>  --add-module=/root/nginx-module-vts<br><br>6 编译并安装nginx<br>make -j 2 &amp;&amp; make install<br><br>7 修改nginx的配置文件<br>vim /softwares/nginx/conf/nginx.conf<br>...<br>http &#123;<br>    <span class="hljs-comment">#加入编译的status模块，将请求代理到31:9090端口</span><br>    vhost_traffic_status_zone;<br>    upstream promethues &#123;<br>       server 10.0.0.31:9090;<br>    &#125;<br>    ...<br>    server &#123;<br>        ...<br>        location / &#123;<br>            root   html;<br>            <span class="hljs-comment"># index  index.html index.htm;</span><br>            proxy_pass http://promethues;<br>        &#125;<br><br>        location /status &#123;<br>            vhost_traffic_status_display;<br>            vhost_traffic_status_display_format html;<br>        &#125;<br>    &#125;<br>&#125;<br><br>8 检查配置文件语法<br>[root@jenkins211 ~]# /softwares/nginx/sbin/nginx -t<br><br>9 启动nginx<br>[root@jenkins211 ~]# /softwares/nginx/sbin/nginx<br>[root@jenkins211 ~]# <br>[root@jenkins211 ~]# ss -ntl | grep 80<br>LISTEN 0      511          0.0.0.0:80        0.0.0.0:*      <br><br>10 访问nginx的状态页面<br>http://10.0.0.211/status/format/prometheus<br>http://10.0.0.211/status<br></code></pre></td></tr></table></figure><p><strong>安装nginx-vtx-exporter</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载nginx-vtx-exporter,不建议下载最新版本<br>wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz<br><br>2 解压软件包到path路径<br>tar xf nginx-vts-exporter-0.10.3.linux-amd64.tar.gz -C /usr/local/bin/ nginx-vts-exporter-0.10.3.linux-amd64/nginx-vts-exporter --strip-components=1<br><br>3 运行nginx-vtx-exporter<br>[root@jenkins211 ~]# nginx-vts-exporter -nginx.scrape_uri=http://10.0.0.211/status/format/json<br></code></pre></td></tr></table></figure><p><strong>配置prometheus采集nginx数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;nginx-exporter&quot;</span><br>    metrics_path: <span class="hljs-string">&quot;/status/format/prometheus&quot;</span><br>    static_configs:<br>      - targets:<br>          - <span class="hljs-string">&quot;10.0.0.211:80&quot;</span><br><br>  - job_name: <span class="hljs-string">&quot;nginx-vts-exporter&quot;</span><br>    static_configs:<br>      - targets:<br>          - <span class="hljs-string">&quot;10.0.0.211:9913&quot;</span><br>          <br>[root@prometheus-server31 ~]# rr<br><br>2 访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>3 导入grafana模板<br>2949<br></code></pre></td></tr></table></figure><h2 id="19、监控tomcat服务"><a href="#19、监控tomcat服务" class="headerlink" title="19、监控tomcat服务"></a>19、监控tomcat服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 基于Dockerfile构建tomcat-exporter<br>[root@jenkins211 ~]# git <span class="hljs-built_in">clone</span> https://gitee.com/jasonyin2020/tomcat-exporter.git<br><br>2.编译镜像<br>[root@jenkins211 ~]# <span class="hljs-built_in">cd</span> tomcat-exporter/<br>[root@jenkins211 tomcat-exporter]# <span class="hljs-built_in">chmod</span> +x build.sh <br>[root@jenkins211 tomcat-exporter]# ./build.sh <br><br>3 运行tomcat镜像<br>[root@jenkins211 ~]# docker run -dp 18080:8080 --name tomcat-server registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/tomcat9-app:v1<br><br>4.访问tomcat应用<br>http://10.0.0.211:18080/metrics/<br>http://10.0.0.211:18080/myapp/ <br><br>5.配置prometheus监控tomcat应用<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;tomcat-exporter&quot;</span><br>    static_configs:<br>      - targets: <br>          - <span class="hljs-string">&quot;10.0.0.211:18080&quot;</span><br>          <br>5.2 导入grafana模板 <br>https://github.com/nlighten/tomcat_exporter/blob/master/dashboard/example.json<br></code></pre></td></tr></table></figure><h2 id="20、监控容器cadvisor"><a href="#20、监控容器cadvisor" class="headerlink" title="20、监控容器cadvisor"></a>20、监控容器cadvisor</h2><p>它是一个正在运行的守护进程，用于收集、聚合、处理和导出有关正在运行的容器的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">官网地址：https://github.com/google/cadvisor<br><br>导入镜像<br>[root@jenkins211 ~]# docker load -i cadvisor-amd64-0.49.1.tar.gz <br><br>运行容器<br>[root@jenkins211 ~]# <br>VERSION=v0.49.1 <br>docker run \<br>  -v /:/rootfs:ro \<br>  -v /var/run:/var/run:ro \<br>  -v /sys:/sys:ro \<br>  -v /var/lib/docker/:/var/lib/docker:ro \<br>  -v /dev/disk/:/dev/disk:ro \<br>  -p 28080:8080 \<br>  -d \<br>  --name=cadvisor \<br>  --privileged \<br>  --device=/dev/kmsg \<br>  gcr.io/cadvisor/cadvisor-amd64:<span class="hljs-variable">$VERSION</span><br>54149a621e6bcd9a612fc0b3c755eea91d7466b52bf732a92816c22993b2d635<br><br>prometheus采集cAdvisor容器<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml<br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;prometheus-cAdvisor&quot;</span><br>    static_configs:<br>    - targets:<br>        - <span class="hljs-string">&quot;10.0.0.211:28080&quot;</span><br>        <br>[root@prometheus-server31 ~]# rr<br>10.0.0.211:28080/metrics<br><br>访问WebUI验证配置是否生效<br>http://10.0.0.31:9090/targets<br><br>导入grafana模板<br>315  <br>10619<br><br><br>grafana的官方优化思路-对于容器出现小数的情况<br>针对10619模板，当容器数量增多时，如果容器出现小数点，微调即可。<br><br>Value options  ---&gt;  <span class="hljs-string">&quot;Last*&quot;</span><br></code></pre></td></tr></table></figure><h2 id="21、基于docker部署Prometheus相关组件"><a href="#21、基于docker部署Prometheus相关组件" class="headerlink" title="21、基于docker部署Prometheus相关组件"></a>21、基于docker部署Prometheus相关组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.部署Prometheus -server <br>[root@jenkins211 ~]# docker run -d --network host --name prometheus-server prom/prometheus:v2.53.2 <br><br>2.部署node-exporter<br>[root@jenkins211 ~]# docker run  -d --name node-exporter --network host  prom/node-exporter:v1.8.2 <br><br>3.配置Prometheus server监控node-exporter<br>修改配置文件<br>[root@jenkins211 ~]# docker <span class="hljs-built_in">exec</span> -it prometheus-server sh<br>/prometheus $ <br>/prometheus $ vi /etc/prometheus/prometheus.yml <br>...<br>                                         <br>  - job_name: <span class="hljs-string">&quot;prometheus-node-exporter&quot;</span> <br>    static_configs:                     <br>    - targets:                          <br>      - 10.0.0.211:9100<br>      <br>重新加载配置<br>[root@jenkins211 ~]# docker restart prometheus-server <br>验证是否加载成功<br>http://10.0.0.211:9090/targets<br><br>4.部署grafana组件<br>部署 <br>[root@jenkins211 ~]# docker run -d --name grafana --network host grafana/grafana:9.5.21 <br>访问测试 <br>http://10.0.0.211:3000<br><br><br>5.部署pushgateway组件<br>部署 <br>[root@jenkins211 ~]# docker run -d --name pushgateway --network host prom/pushgateway:v1.9.0 <br>访问测试 <br>http://10.0.0.211:9091/<br><br>6.部署alertmanager组件<br>部署<br>[root@jenkins211 ~]# docker run -d --name alertmanager --network host prom/alertmanager:v0.27.0 <br>访问测试 <br>http://10.0.0.211:9093/#/alerts<br></code></pre></td></tr></table></figure><h2 id="22、文件发现服务"><a href="#22、文件发现服务" class="headerlink" title="22、文件发现服务"></a>22、文件发现服务</h2><p>静态配置：之前使用的都是静态分析，每次都要重启服务或者热加载文件</p><p>动态配置：可以动态发现服务，无需热加载文件</p><p>动态配置可分为json文件和yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.修改prometheus的配置文件 <br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-json&#x27;</span><br>    <span class="hljs-comment"># 基于文件的服务发现为动态发现</span><br>    file_sd_configs:<br>        <span class="hljs-comment"># 指定文件路径</span><br>      - files:<br>          - /softwares/prometheus-2.53.2.linux-amd64/config/*.json<br><br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-yaml&#x27;</span><br>    file_sd_configs:<br>      - files:<br>          - /softwares/prometheus-2.53.2.linux-amd64/config/*.yaml<br>          <br>          <br>2.重新加载配置 <br>[root@prometheus-server31 ~]# rr<br><br>3.访问WebUI验证配置是否生效<br>http://10.0.0.31:9090/config<br><br>4.创建配置文件模拟基于动态的监控<br>创建目录 <br>[root@prometheus-server31 ~]# <span class="hljs-built_in">mkdir</span> -pv /softwares/prometheus-2.53.2.linux-amd64/config<br>创建json文件监控41节点<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /softwares/prometheus-2.53.2.linux-amd64/config/linux.json<br>[<br>  &#123;<br>    <span class="hljs-string">&quot;targets&quot;</span>: [ <span class="hljs-string">&quot;10.0.0.41:9100&quot;</span> ],<br>    <span class="hljs-string">&quot;labels&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;school&quot;</span>: <span class="hljs-string">&quot;cherry&quot;</span>,<br>      <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>  &#125;<br>]<br>创建yaml文件监控42和43节点<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /softwares/prometheus-2.53.2.linux-amd64/config/haha.yaml <br>- targets:<br>    - <span class="hljs-string">&#x27;10.0.0.42:9100&#x27;</span><br>    - <span class="hljs-string">&#x27;10.0.0.43:9100&#x27;</span><br>  labels:<br>    apps: yaml<br>    address: shahe<br>    <br>再次查看Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>参考链接:https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#file_sd_config<br></code></pre></td></tr></table></figure><h2 id="23、consul服务发现"><a href="#23、consul服务发现" class="headerlink" title="23、consul服务发现"></a><strong>23、consul服务发现</strong></h2><p>普罗米修斯服务端不能直接发现node节点，由consul服务端将node节点告诉过普罗米修斯服务端，consul也属于动态发现服务</p><p><strong>node节点部署consul集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 下载consul<br>wget https://releases.hashicorp.com/consul/1.19.1/consul_1.19.1_freebsd_amd64.zip<br><br>2 快速部署consul集群<br>下载consul<br>wget https://releases.hashicorp.com/consul/1.19.1/consul_1.19.1_freebsd_amd64.zip<br><br>解压consul<br>unzip consul_1.19.1_linux_amd64.zip  -d /usr/local/bin/<br><br>运行consul 集群<br>leader43:<br>consul agent -server -bootstrap -<span class="hljs-built_in">bind</span>=10.0.0.43 -data-dir=/softwares/consul -client=10.0.0.43 -ui<br><br><br>follower42:<br>consul agent  -<span class="hljs-built_in">bind</span>=10.0.0.42 -data-dir=/softwares/consul -client=10.0.0.42 -ui -retry-join=10.0.0.43<br><br><br>follower41:<br>consul agent -server -<span class="hljs-built_in">bind</span>=10.0.0.41 -data-dir=/softwares/consul -client=10.0.0.41 -ui -retry-join=10.0.0.43<br><br>访问console服务的WebUI，查看node节点<br>http://10.0.0.43:8500/ui/dc1/nodes<br></code></pre></td></tr></table></figure><p><strong>配置自动发现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改prometheus的配置文件<br>vim /softwares/prometheus/prometheus.yml<br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;consul-seriver-discovery&quot;</span><br>    <span class="hljs-comment"># 配置基于consul的服务发现</span><br>    consul_sd_configs:<br>        <span class="hljs-comment"># 指定consul的服务器地址，若不指定，则默认值为&quot;localhost:8500&quot;.</span><br>      - server: 10.0.0.43:8500<br>      - server: 10.0.0.42:8500<br>      - server: 10.0.0.41:8500<br>    relabel_configs:<br>        <span class="hljs-comment"># 匹配consul的源标签字段，表示服务名称</span><br>      - source_labels: [__meta_consul_service]<br>        <span class="hljs-comment"># 指定源标签的正则表达式，若不定义，默认值为&quot;(.*)&quot;</span><br>        regex: consul<br>        <span class="hljs-comment"># 执行动作为删除，默认值为&quot;replace&quot;,有效值有多种</span><br>        <span class="hljs-comment">#   https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_action</span><br>        action: drop<br><br>2 检查配置文件是否正确并重新加载配置<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br><br>3.被监控节点注册到console集群<br>注册节点<br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT -d <span class="hljs-string">&#x27;&#123;&quot;id&quot;:&quot;prometheus-node42&quot;,&quot;name&quot;:&quot;prometheus-node42&quot;,&quot;address&quot;:&quot;10.0.0.42&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.42:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.42:8500/v1/agent/service/register<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT -d <span class="hljs-string">&#x27;&#123;&quot;id&quot;:&quot;prometheus-node41&quot;,&quot;name&quot;:&quot;prometheus-node42&quot;,&quot;address&quot;:&quot;10.0.0.41&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.41:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.42:8500/v1/agent/service/register<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT -d <span class="hljs-string">&#x27;&#123;&quot;id&quot;:&quot;prometheus-node43&quot;,&quot;name&quot;:&quot;prometheus-node42&quot;,&quot;address&quot;:&quot;10.0.0.43&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.43:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.42:8500/v1/agent/service/register<br><br>注销节点,在哪个节点注册就要在哪个节点注销<br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT http://10.0.0.42:8500/v1/agent/service/deregister/prometheus-node42<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT http://10.0.0.42:8500/v1/agent/service/deregister/prometheus-node41<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT http://10.0.0.42:8500/v1/agent/service/deregister/prometheus-node43<br><br><br></code></pre></td></tr></table></figure><h2 id="24、pushgateway自定义监控指标"><a href="#24、pushgateway自定义监控指标" class="headerlink" title="24、pushgateway自定义监控指标"></a>24、pushgateway自定义监控指标</h2><ul><li>Prometheus 采用 pull 模式，可能由于不在一个子网或者防火墙原因，导致 Prometheus 无法直接拉取各个 target 数据。</li><li>在监控业务数据的时候，需要将不同数据汇总, 由 Prometheus 统一收集。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载组件<br>wget https://github.com/prometheus/pushgateway/releases/download/v1.9.0/pushgateway-1.9.0.linux-amd64.tar.gz<br><br>2.解压软件包 <br>[root@prometheus-server32 ~]# tar xf pushgateway-1.9.0.linux-amd64.tar.gz  -C /softwares/<br><br>3.启动pushgateway组件 <br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cd</span> /softwares/pushgateway-1.9.0.linux-amd64/<br>[root@prometheus-server32 pushgateway-1.9.0.linux-amd64]# ./pushgateway <br><br>4.访问pushgateway的WebUI<br>http://10.0.0.32:9091/#<br><br>5.Prometheus server监控pushgateway <br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: pushgateway<br>    <span class="hljs-comment"># 若不指定则默认值为false。</span><br>    <span class="hljs-comment"># 当设置为true时，若采集的指标包含中和内置的标签冲突时(比如job,instance)会覆盖。</span><br>    <span class="hljs-comment"># 当设置为false时，则不会覆盖，而是在标签前面加一个&quot;exported_*&quot;字段。</span><br>    honor_labels: <span class="hljs-literal">true</span><br>    static_configs:<br>    - targets:<br>      - 10.0.0.32:9091<br>      <br>[root@prometheus-server31 ~]# rr<br><br>7.推送数据到pushgateway组件<br>-------------------------<br>传递的数据是键值对，KEY一般是字符串类型，而value必须是一个数字类型。<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;student_online 97&quot;</span> | curl --data-binary @-  http://10.0.0.32:9091/metrics/job/student/instance/10.0.0.31<br><br>8.在Prometheus的WebUI验证数据是否推送成功<br>在Prometheus的WebUI中搜索“student_online”<br></code></pre></td></tr></table></figure><h2 id="25、prometheus监控tcp的12种状态案例"><a href="#25、prometheus监控tcp的12种状态案例" class="headerlink" title="25、prometheus监控tcp的12种状态案例"></a>25、prometheus监控tcp的12种状态案例</h2><p><strong>查看单个状态脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /usr/local/bin/tcp_status.sh  <br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># auther: cherry</span><br><span class="hljs-comment"># school: 001</span><br><span class="hljs-comment"># class: 002</span><br><span class="hljs-comment"># office: www.cherry.com</span><br><br><br><span class="hljs-comment"># 定义TCP的12种状态</span><br>ESTABLISHED_COUNT=0<br>SYN_SENT_COUNT=0<br>SYN_RECV_COUNT=0<br>FIN_WAIT1_COUNT=0<br>FIN_WAIT2_COUNT=0<br>TIME_WAIT_COUNT=0<br>CLOSE_COUNT=0<br>CLOSE_WAIT_COUNT=0<br>LAST_ACK_COUNT=0<br>LISTEN_COUNT=0<br>CLOSING_COUNT=0<br>UNKNOWN_COUNT=0<br><br><span class="hljs-comment"># 定义任务名称</span><br>JOB_NAME=tcp_status<br><span class="hljs-comment"># 定义实例名称</span><br>INSTANCE_NAME=prometheus32<br><span class="hljs-comment"># 定义pushgateway主机</span><br>HOST=10.0.0.32<br><span class="hljs-comment"># 定义pushgateway端口</span><br>PORT=9091<br><br><span class="hljs-comment"># TCP的12种状态</span><br>ALL_STATUS=(ESTABLISHED SYN_SENT SYN_RECV FIN_WAIT1 FIN_WAIT2 TIME_WAIT CLOSE CLOSE_WAIT LAST_ACK LISTEN CLOSING UNKNOWN)<br><br><span class="hljs-comment"># 声明一个关联数组,类似于py的dict,go的map</span><br><span class="hljs-built_in">declare</span> -A tcp_status<br><br><span class="hljs-comment"># 统计TCP的12种状态</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;ALL_STATUS[@]&#125;</span><br><span class="hljs-keyword">do</span><br>  temp=`netstat -untalp | grep <span class="hljs-variable">$i</span>  | <span class="hljs-built_in">wc</span> -l`<br>  tcp_status[<span class="hljs-variable">$&#123;i&#125;</span>]=<span class="hljs-variable">$temp</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 将统计后的结果发送到pushgateway</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;!tcp_status[@]&#125;</span><br><span class="hljs-keyword">do</span> <br>   data=<span class="hljs-string">&quot;<span class="hljs-variable">$i</span> <span class="hljs-variable">$&#123;tcp_status[$i]&#125;</span>&quot;</span><br>   <span class="hljs-comment"># TODO: shell如果想要设计成相同key不同标签的方式存在问题，只会有最后一种状态被发送</span><br>   <span class="hljs-comment"># 目前我怀疑是pushgateway组件不支持同一个metrics中key所对应的value不同的情况。</span><br>   <span class="hljs-comment">#data=&quot;tcp_all_status&#123;status=\&quot;$i\&quot;&#125; $&#123;tcp_status[$i]&#125;&quot;</span><br>   <span class="hljs-comment">#echo $data</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$data</span> | curl --data-binary @-  http://<span class="hljs-variable">$&#123;HOST&#125;</span>:<span class="hljs-variable">$&#123;PORT&#125;</span>/metrics/job/<span class="hljs-variable">$&#123;JOB_NAME&#125;</span>/instance/<span class="hljs-variable">$&#123;INSTANCE_NAME&#125;</span><br>   <span class="hljs-comment"># sleep 1</span><br><span class="hljs-keyword">done</span><br><br>查看pushgateway<br>http://10.0.0.32:9091/#<br><br>普罗米修斯查看是否监测<br>ESTABLISHED.........<br><br></code></pre></td></tr></table></figure><p><strong>查看多个状态值</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> -A /usr/local/bin/tcp_status2.sh<br><span class="hljs-comment">#!/bin/bash$</span><br>$<br><span class="hljs-comment"># M-hM-.M-&gt;M-gM-=M-. Pushgateway M-gM-^ZM-^D URL$</span><br>pushgateway_url=<span class="hljs-string">&quot;http://10.0.0.42:9091/metrics/job/tcp_status&quot;</span>$<br><span class="hljs-keyword">time</span>=$(<span class="hljs-built_in">date</span> +%Y-%m-%d+%H:%M:%S)$<br>$<br>state=<span class="hljs-string">&quot;SYN-SENT SYN-RECV FIN-WAIT-1 FIN-WAIT-2 TIME-WAIT CLOSE CLOSE-WAIT LAST-ACK LISTEN CLOSING ESTAB&quot;</span>$<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  $state$<br> <span class="hljs-keyword">do</span>$<br> t=`ss -tan |grep <span class="hljs-variable">$i</span> |<span class="hljs-built_in">wc</span> -l`$<br> <span class="hljs-built_in">echo</span> tcp_connections&#123;state=\&quot;<span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span>\&quot;&#125; <span class="hljs-variable">$t</span> &gt;&gt;/tmp/tcp.txt$<br><span class="hljs-keyword">done</span>;$<br>$<br><span class="hljs-built_in">cat</span> /tmp/tcp.txt | curl --data-binary @- $pushgateway_url$<br><span class="hljs-built_in">rm</span> -rf  /tmp/tcp.txt$<br></code></pre></td></tr></table></figure><h2 id="26、黑盒监控服务"><a href="#26、黑盒监控服务" class="headerlink" title="26、黑盒监控服务"></a>26、黑盒监控服务</h2><p>黑盒监控服务也属于自定义的一种监控指标。</p><p>1.所谓的黑盒监控<br>黑盒监控指的是事故已经发生了，才监控到，表示的是从外部监控。举例例子: 网站挂了。</p><p>白盒监控指的是服务内部暴露出来的指标，可以更早的预判出问题可能发生的点。举例例子: 当前服务器的负载，队列等待处理的数量异常过高。</p><p>2.blackbox_exporter概述<br>blackbox exporter支持基于HTTP, HTTPS, DNS, TCP, ICMP, gRPC协议来对目标节点进行监控。</p><p>比如基于http协议我们可以探测一个网站的返回状态码为200判读服务是否正常。</p><p>比如基于TCP协议我们可以探测一个主机端口是否监听。</p><p>比如基于ICMP协议来ping一个主机的连通性。</p><p>比如基于gRPC协议来调用接口并验证服务是否正常工作。</p><p>比如基于DNS协议可以来检测域名解析。</p><p><strong>部署blackbox exporter</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载blackbox exporter<br>wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.25.0/blackbox_exporter-0.25.0.linux-amd64.tar.gz<br><br>解压软件包<br>[root@prometheus-server32 ~]# tar xf blackbox_exporter-0.25.0.linux-amd64.tar.gz -C  /softwares/<br><br>启动服务<br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cd</span> /softwares/blackbox_exporter-0.25.0.linux-amd64/<br>[root@prometheus-server32 blackbox_exporter-0.25.0.linux-amd64]# ./blackbox_exporter<br><br>访问blackbox的WebUI<br>http://10.0.0.32:9115/metrics<br></code></pre></td></tr></table></figure><h4 id="基于blackbox的http模块监控网站状态"><a href="#基于blackbox的http模块监控网站状态" class="headerlink" title="基于blackbox的http模块监控网站状态"></a>基于blackbox的http模块监控网站状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改Prometheus配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>scrape_configs:<br>  ...<br>    <span class="hljs-comment"># 指定作业的名称，生成环境中，通常是指一类业务的分组配置。</span><br>  - job_name: <span class="hljs-string">&#x27;blackbox-exporter-http&#x27;</span><br>    <span class="hljs-comment"># 修改访问路径，若不修改，默认值为&quot;/metrics&quot;</span><br>    metrics_path: /probe<br>    <span class="hljs-comment"># 配置URL的相关参数</span><br>    params:<br>      <span class="hljs-comment"># 此处表示使用的是blackbox的http模块，从而判断相应的返回状态码是否为200</span><br>      module: [http_2xx] <br>  <span class="hljs-comment"># 下面这两个标签是我自定义的，便于大家理解</span><br>      school: [001]<br>      class: [<span class="hljs-string">&quot;002&quot;</span>]<br>    <span class="hljs-comment"># 静态配置，需要手动指定监控目标</span><br>    static_configs:<br>        <span class="hljs-comment"># 需要监控的目标</span><br>      - targets:<br>          <span class="hljs-comment"># 支持https协议</span><br>        - https://www.cherry.com/<br>          <span class="hljs-comment"># 支持http协议</span><br>        - http://10.0.0.41<br>          <span class="hljs-comment"># 支持http协议和自定义端口</span><br>        - http://10.0.0.31:9090<br>    <span class="hljs-comment"># 对目标节点进行重新打标签配置</span><br>    relabel_configs:<br>        <span class="hljs-comment"># 指定源标签，此处的&quot;__address__&quot;表示内置的标签，存储的是被监控目标的IP地址</span><br>      - source_labels: [__address__]<br>        <span class="hljs-comment"># 指定目标标签，其实就是在&quot;Endpoint&quot;中加了一个target字段(用于指定监控目标)，</span><br>        target_label: __param_target<br>        <span class="hljs-comment"># 指定需要执行的动作，默认值为&quot;replace&quot;，常用的动作有: replace, keep, and drop。</span><br>        <span class="hljs-comment"># 但官方支持十几种动作： https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#relabel_action</span><br>        <span class="hljs-comment"># 将&quot;__address__&quot;传递给target字段。</span><br>        action: replace<br>      - source_labels: [__param_target]<br>        target_label: instance<br>        <span class="hljs-comment">#target_label: instance2024</span><br>        <br>        <span class="hljs-comment"># 上面的2个配置段也可以改写成如下的配置哟~</span><br>     <span class="hljs-comment"># - source_labels: [__address__]</span><br>     <span class="hljs-comment">#   target_label: instance</span><br>     <span class="hljs-comment">#   action: replace</span><br>     <span class="hljs-comment"># - source_labels: [instance]</span><br>     <span class="hljs-comment">#   target_label: __param_target</span><br>     <span class="hljs-comment">#   action: replace</span><br>      - target_label: __address__<br>        <span class="hljs-comment"># 指定要替换的值,此处我指定为blackbox exporter的主机地址</span><br>        replacement: 10.0.0.32:9115<br><br>检查配置文件是否正确并重新加载配置文件<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br><br>访问prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>访问blackbox exporter的WebUI<br>http://10.0.0.41:9115/<br><br>grafana展示数据<br>7587<br>13659<br></code></pre></td></tr></table></figure><h4 id="基于blackbox的ICMP监控目标主机是否存活"><a href="#基于blackbox的ICMP监控目标主机是否存活" class="headerlink" title="基于blackbox的ICMP监控目标主机是否存活"></a>基于blackbox的ICMP监控目标主机是否存活</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改Prometheus配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&#x27;blackbox-exporter-icmp&#x27;</span><br>    metrics_path: /probe<br>    params:<br>      <span class="hljs-comment"># 如果不指定模块，则默认类型为&quot;http_2xx&quot;，不能乱写!乱写监控不到服务啦!</span><br>      module: [icmp]<br>    static_configs:<br>      - targets:<br>          - 10.0.0.41<br>          - 10.0.0.42<br>    relabel_configs:<br>      - source_labels: [__address__]<br>        target_label: __param_target<br>      - source_labels: [__param_target]<br>        <span class="hljs-comment"># 指定注意的是，如果instance不修改，则instance和&quot;__address__&quot;的值相同</span><br>        <span class="hljs-comment"># target_label: ip</span><br>        target_label: instance<br>      - target_label: __address__<br>        replacement: 10.0.0.32:9115 <br>        <br>2 检查配置文件是否正确并重新加载配置<br>[root@prometheus-server31 ~]# rr<br><br>3 访问prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>4.访问blackbox的WebUI<br>http://10.0.0.32:9115/<br><br>5.grafana过滤<span class="hljs-built_in">jobs</span>数据<br>基于<span class="hljs-string">&quot;blackbox-exporter-icmp&quot;</span>标签进行过滤。<br></code></pre></td></tr></table></figure><h4 id="基于blackbox的TCP案例监控服务存活"><a href="#基于blackbox的TCP案例监控服务存活" class="headerlink" title="基于blackbox的TCP案例监控服务存活"></a>基于blackbox的TCP案例监控服务存活</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改Prometheus配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br> <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&#x27;blackox-exporter-tcp&#x27;</span><br>    metrics_path: /probe<br>    params:<br>      module: [tcp_connect]<br>    static_configs:<br>      - targets:<br>          - 10.0.0.41:80<br>          - 10.0.0.42:22<br>          - 10.0.0.31:9090<br>    relabel_configs:<br>      - source_labels: [__address__]<br>        target_label: __param_target<br>      - source_labels: [__param_target]<br>        target_label: instance<br>      - target_label: __address__<br>        replacement: 10.0.0.32:9115<br>        <br>2 检查配置文件是否正确并重新加载配置文件<br>[root@prometheus-server31 ~]# rr<br><br>3 访问prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>4.访问blackbox exporter的WebUI<br>http://10.0.0.32:9115/<br><br>5.使用grafana查看数据<br>基于<span class="hljs-string">&quot;blackbox-exporter-tcp&quot;</span>标签进行过滤。<br></code></pre></td></tr></table></figure><h2 id="27、远端存储VictoriaMetrics"><a href="#27、远端存储VictoriaMetrics" class="headerlink" title="27、远端存储VictoriaMetrics"></a>27、远端存储VictoriaMetrics</h2><p>VictoriaMetrics是一个快速、经济高效且可扩展的监控解决方案和时间序列数据库。</p><p>普罗米修斯可以将数据远程存储到VictoriaMetrics。默认情况下，普罗米修斯数据存储于本地文件的 TSDB 中，不利于容灾和做数据管理，若用于生产一般需要搭配第三方的如 InfulxDB 进行使用。大数据量的场景下，指标的收集和管理性能存在一定的瓶颈。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载victoriametrics<br>wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16.tar.gz<br><br>解压软件包 <br>[root@prometheus-server32 ~]# tar xf victoria-metrics-linux-amd64-v1.93.16.tar.gz -C /usr/local/bin/<br><br>编写启动脚本<br><span class="hljs-built_in">cat</span> &gt; /etc/systemd/system/victoria-metrics.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description= Linux VictoriaMetrics Server</span><br><span class="hljs-string">Documentation=https://docs.victoriametrics.com/</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">ExecStart=/usr/local/bin/victoria-metrics-prod  \</span><br><span class="hljs-string">   -httpListenAddr=0.0.0.0:8428 \</span><br><span class="hljs-string">   -storageDataPath=/data/victoria-metrics \</span><br><span class="hljs-string">   -retentionPeriod=6</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> --now victoria-metrics.service<br>systemctl status victoria-metrics<br><br>检查端口是否存活<br>[root@prometheus-server32 ~]# ss -ntl | grep 8428<br>LISTEN 0      4096         0.0.0.0:8428      0.0.0.0:* <br><br>查看webUI<br>http://10.0.0.32:8428/<br></code></pre></td></tr></table></figure><p><strong>prometheus配置VictoriaMetrics远端存储</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>  - job_name: node-exporters<br>    metrics_path: /metrics<br>    scheme: http<br>    static_configs:<br>    - targets:<br>      - 10.0.0.41:9100<br>      - 10.0.0.42:9100<br>      - 10.0.0.43:9100<br>    <br><span class="hljs-comment"># 在顶级字段中配置VictoriaMetrics地址</span><br>remote_write:<br>  - url: http://10.0.0.32:8428/api/v1/write<br><br><br>停止prometheus服务<br>[root@prometheus-server31 ~]# systemctl stop prometheus-server<br><br>手动启动prometheus服务，因为启动脚本定义了之前普罗米修斯的数据目录，这里是要将之后的数据写入到vtmetrics，所以需要手动起服务<br>[root@prometheus-server31 ~]# /softwares/prometheus-2.53.2.linux-amd64/prometheus    --config.file=/softwares/prometheus-2.53.2.linux-amd64/prometheus.yml<br></code></pre></td></tr></table></figure><p><strong>vtmetrics查看数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/85bfa65bb4094b33b86d2302c22c293f.png" alt="在这里插入图片描述"></p><p><strong>配置grafana数据源和url</strong></p><p>这里数据源更改为mtmstrics的地址</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5bbee7effec2429ca77dd12340f75053.png" alt="在这里插入图片描述"></p><p><strong>导入模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1806<br></code></pre></td></tr></table></figure><h2 id="28、altermanager监控告警"><a href="#28、altermanager监控告警" class="headerlink" title="28、altermanager监控告警"></a>28、altermanager监控告警</h2><p>用于prometheus server的告警功能的组件，目前支持多种告警媒介，包括但不限于邮件告警，钉钉告警，企业微信告警等。</p><p><strong>部署altermanager组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载软件包<br>wget https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz<br><br>2.解压软件包<br>[root@prometheus-server32 ~]# tar xf alertmanager-0.27.0.linux-amd64.tar.gz -C /softwares/<br><br>3 修改alermanager的配置文件<br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cat</span> &gt; /softwares/alertmanager-0.27.0.linux-amd64/alertmanager.yml &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>global:<br>  resolve_timeout: 5m<br>  smtp_from: <span class="hljs-string">&#x27;y10539035@qq.com&#x27;</span><br>  smtp_smarthost: <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span><br>  smtp_auth_username: <span class="hljs-string">&#x27;y10534035@qq.com&#x27;</span><br>  smtp_auth_password: <span class="hljs-string">&#x27;nvkhwupusuxubefe&#x27;</span><br>  smtp_require_tls: <span class="hljs-literal">false</span><br>  smtp_hello: <span class="hljs-string">&#x27;qq.com&#x27;</span><br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: <span class="hljs-string">&#x27;email&#x27;</span><br>receivers:<br>- name: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;y10534135@qq.com&#x27;</span><br>    send_resolved: <span class="hljs-literal">true</span><br>inhibit_rules:<br>  - source_match:<br>      severity: <span class="hljs-string">&#x27;critical&#x27;</span><br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br>EOF<br><br>启动alermanager并访问webUI<br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cd</span> /softwares/alertmanager-0.27.0.linux-amd64/<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# ./alertmanager <br><br>--------------------------------------------------------<br>相关参数说明:<br>global:<br>  resolve_timeout:<br>  解析超时时间。<br>  smtp_from:<br>  发件人邮箱地址。<br>  smtp_smarthost:<br>  邮箱的服务器的地址及端口，例如:  <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span>。<br>  smtp_auth_username:<br>  发送人的邮箱用户名。<br>  smtp_auth_password:<br>  发送人的邮箱授权码。<br>  smtp_require_tls:<br>  是否基于tls加密。<br>  smtp_hello:<br>  邮箱服务器，例如: <span class="hljs-string">&#x27;qq.com&#x27;</span>。<br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval:<br>  重复报警的间隔时间，如果没有解即报警问题，则会间隔指定时间一直触发报警，比如:5m。<br>  receiver: <br>  采用什么方式接收报警，例如<span class="hljs-string">&#x27;email&#x27;</span>。<br>receivers:<br>- name: <br>定义接收者的名称，注意这里的name要和上面的route对应，例如: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <br>  邮箱发给谁。<br>    send_resolved: <span class="hljs-literal">true</span><br>inhibit_rules:<br>  - source_match:<br>      severity: <br>      匹配报警级别，例如: <span class="hljs-string">&#x27;critical&#x27;</span>。<br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br>   <br>--------------------------------------------------------------------------<br>prometheus配置alermanager作为告警媒介<br>1 修改配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>alerting:<br>  alertmanagers:<br>    - static_configs:<br>        - targets:<br>            - 10.0.0.32:9093<br>rule_files:<br>  - <span class="hljs-string">&quot;/softwares/prometheus-2.53.2.linux-amd64/rules/linux92.yml&quot;</span><br><br><br>...<br>scrape_configs:<br>  ...<br>  - job_name: node-exporter<br>    static_configs:<br>    - targets:<br>      - 10.0.0.41:9100<br>      - 10.0.0.42:9100<br>      - 10.0.0.43:9100<br>...<br><br>2 修改告警规则<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">mkdir</span> -pv /softwares/prometheus-2.53.2.linux-amd64/rules<br><br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> &gt;  /softwares/prometheus-2.53.2.linux-amd64/rules/linux.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">groups:</span><br><span class="hljs-string">- name: container-runtime</span><br><span class="hljs-string">  rules:</span><br><span class="hljs-string">  - alert: container-42节点挂掉啦</span><br><span class="hljs-string">    expr: up&#123;instance=&quot;10.0.0.42:9100&quot;&#125; == 0</span><br><span class="hljs-string">    for: 15s</span><br><span class="hljs-string">    labels:</span><br><span class="hljs-string">      school: 001</span><br><span class="hljs-string">      class: 002</span><br><span class="hljs-string">    annotations:</span><br><span class="hljs-string">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 已停止运行超过 15s！&quot;</span><br><span class="hljs-string">  - alert: container-43节点挂掉啦</span><br><span class="hljs-string">    expr: up&#123;instance=&quot;10.0.0.43:9100&quot;&#125; == 0</span><br><span class="hljs-string">    for: 15s</span><br><span class="hljs-string">    labels:</span><br><span class="hljs-string">      school: 001</span><br><span class="hljs-string">      class: 002</span><br><span class="hljs-string">    annotations:</span><br><span class="hljs-string">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 联邦模式已停止运行超过 15s！&quot;</span><br><span class="hljs-string">EOF</span><br><br>3 检查配置并重新加载prometheus的配置<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br><br>4 查看prometheus server的WebUI<br>http://10.0.0.31:9090/target<br><br>5 查看alermanager的WebUI<br>h/softwares/alertmanager-0.27.0.linux-amd64<br><br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">mkdir</span> tmpl<br><br>2 创建模板实例，工作中可以考虑嵌入公司的logo<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">cat</span> &gt; tmpl/email.tmp1 &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span> <br>&#123;&#123; define <span class="hljs-string">&quot;001.html&quot;</span> &#125;&#125;<br>&lt;h1 style=<span class="hljs-string">&#x27;color: red;&#x27;</span>&gt;啦啦啦:  https://www.cherry.com/&lt;/h1&gt;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>        &lt;<span class="hljs-built_in">tr</span>&gt;<br>                &lt;th&gt;报警项&lt;/th&gt;<br>                &lt;th&gt;实例&lt;/th&gt;<br>                &lt;th&gt;报警阀值&lt;/th&gt;<br>                &lt;th&gt;开始时间&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &#123;&#123; range <span class="hljs-variable">$i</span>, <span class="hljs-variable">$alert</span> := .Alerts &#125;&#125;<br>                &lt;<span class="hljs-built_in">tr</span>&gt;<br>                        &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;alertname&quot;</span> &#125;&#125;&lt;/td&gt;<br>                        &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;instance&quot;</span> &#125;&#125;&lt;/td&gt;<br>                        &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Annotations <span class="hljs-string">&quot;value&quot;</span> &#125;&#125;&lt;/td&gt;<br>                        &lt;td&gt;&#123;&#123; <span class="hljs-variable">$alert</span>.StartsAt &#125;&#125;&lt;/td&gt;<br>                &lt;/tr&gt;<br>        &#123;&#123; end &#125;&#125;<br>&lt;/table&gt;<br><br>&lt;img src=<span class="hljs-string">&quot;https://www.cherry.com/static/images/header/logo.png&quot;</span>&gt;<br><br>&#123;&#123; end &#125;&#125;<br>EOF<br><br>3 alertmanager引用自定义模板文件<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">cat</span> alertmanager.yml <br>global:<br>  resolve_timeout: 5m<br>  smtp_from: <span class="hljs-string">&#x27;31013067@qq.com&#x27;</span><br>  smtp_smarthost: <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span><br>  smtp_auth_username: <span class="hljs-string">&#x27;31013067@qq.com&#x27;</span><br>  smtp_auth_password: <span class="hljs-string">&#x27;ysfkvbpjeddhbi&#x27;</span><br>  smtp_require_tls: <span class="hljs-literal">false</span><br>  smtp_hello: <span class="hljs-string">&#x27;qq.com&#x27;</span><br><br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: <span class="hljs-string">&#x27;email&#x27;</span><br><br>templates:<br>  - <span class="hljs-string">&#x27;./tmp1/*.tmp1&#x27;</span><br><br>receivers:<br>- name: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;31013067@qq.com&#x27;</span><br>    send_resolved: <span class="hljs-literal">true</span><br>    headers: &#123; Subject: <span class="hljs-string">&quot;[WARN] 报警邮件&quot;</span> &#125;<br>    html: <span class="hljs-string">&#x27;&#123;&#123; template &quot;cherry.html&quot; . &#125;&#125;&#x27;</span><br><br>inhibit_rules:<br>  - source_match:<br>      severity: <span class="hljs-string">&#x27;critical&#x27;</span><br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br><br>4 alertmanager语法检查<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">pwd</span><br>/softwares/alertmanager-0.27.0.linux-amd64<br><br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# ./amtool check-config ./alertmanager.yml <br><br>5 重新加载配置信息<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# ./alertmanager <br><br>6 查看WebUi观察配置是否生效<br>http://10.0.0.32:9093/#/status<br><br>---------------------------------------------<br>prometheus需要修改以下规则文件<br>1 修改规则文件<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /softwares/prometheus-2.53.2.linux-amd64/rules/linux92.yml <br><span class="hljs-built_in">groups</span>:<br>- name: linux92-container-runtime<br>  rules:<br>  - alert: container-42节点挂掉啦<br>    <span class="hljs-built_in">expr</span>: up&#123;instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125; == 0<br>    <span class="hljs-keyword">for</span>: 15s<br>    labels:<br>      school: 001<br>      class: 002<br>    annotations:<br>      summary: <span class="hljs-string">&quot;&#123;&#123; .instance &#125;&#125; 已停止运行超过 15s！&quot;</span><br>  <span class="hljs-comment"># 添加此行用于获取阈值</span><br>      value: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;&quot;</span><br>  - alert: container-43节点的挂掉啦<br>    <span class="hljs-built_in">expr</span>: up&#123;instance=<span class="hljs-string">&quot;10.0.0.43:9100&quot;</span>&#125; == 0<br>    <span class="hljs-keyword">for</span>: 15s<br>    labels:<br>      school: 01<br>      class: 02<br>    annotations:<br>      summary: <span class="hljs-string">&quot;&#123;&#123; .instance &#125;&#125; 联邦模式已停止运行超过 15s！&quot;</span><br>  <span class="hljs-comment"># 添加此行用于获取阈值</span><br>      value: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;&quot;</span><br>      <br>检查语法并重新加载配置文件<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br></code></pre></td></tr></table></figure><h2 id="29、监控K8S集群"><a href="#29、监控K8S集群" class="headerlink" title="29、监控K8S集群"></a>29、监控K8S集群</h2><p><strong>prometheus-operator</strong></p><p>prometheus-operator可以一键实现对K8S集群的监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">GitHub地址: https://github.com/prometheus-operator/kube-prometheus<br><br>基于K8S版本选择合适的prometheus-operator<br>https://github.com/prometheus-operator/kube-prometheus#compatibility<br></code></pre></td></tr></table></figure><h4 id="1-prometheus内部监控k8s集群"><a href="#1-prometheus内部监控k8s集群" class="headerlink" title="1.prometheus内部监控k8s集群"></a>1.prometheus内部监控k8s集群</h4><p>普罗米修斯可以部署在k8s内部，也可以部署在k8s外部，企业中一般都是部署在k8s内部</p><p><strong>在K8S集群部署prometheus</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载软件包<br>wget https://github.com/prometheus-operator/kube-prometheus/archive/refs/tags/v0.11.0.tar.gz<br><br>解压软件包<br>[root@master231 ~]# tar xf kube-prometheus-0.11.0.tar.gz -C /softwares/<br><br>切换工作目录，进入到prometheus-operator主目录<br>[root@master231 ~]# <span class="hljs-built_in">cd</span> /softwares/kube-prometheus-0.11.0/<br><br>更改yaml文件，自定义资源<br>[root@master231 kube-prometheus-0.11.0]# vim manifests/prometheusAdapter-deployment.yaml<br>......<br>        <span class="hljs-comment"># image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.1</span><br>        image: registry.cn-hangzhou.aliyuncs.com/k8s/prometheus-adapter:v0.9.1<br>...<br><br>[root@master231 kube-prometheus-0.11.0]# vim manifests/kubeStateMetrics-deployment.yaml<br>...<br>        <span class="hljs-comment"># image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.5.0</span><br>        image: registry.cn-hangzhou.aliyuncs.com/k8s/kube-state-metrics:2.5.0<br>        <br>[root@master231 kube-prometheus-0.11.0]# vim manifests/grafana-service.yaml<br>....<br>spec:<br>  ...<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>  - name: http<br>    port: 3000<br>    targetPort: http<br>    nodePort: 30080<br>    <br>[root@master231 kube-prometheus-0.11.0]# vim manifests/prometheus-service.yaml<br>....<br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>  - name: web<br>    port: 9090<br>    targetPort: web<br>    nodePort: 30090<br>    <br>部署服务<br>[root@master231 kube-prometheus-0.11.0]# kubectl apply --server-side -f manifests/setup<br>[root@master231 kube-prometheus-0.11.0]# kubectl <span class="hljs-built_in">wait</span> \<br>--<span class="hljs-keyword">for</span> condition=Established \<br>--all CustomResourceDefinition \<br>--namespace=monitoring<br>[root@master231 kube-prometheus-0.11.0]# kubectl apply -f manifests/<br><br>查看对应的Pod运行列表 ------&gt;如果没运行起来，一般手动导入镜像到对应节点<br>[root@master231 kube-prometheus-0.11.0]# kubectl get pods -n monitoring  -o wide<br>删除镜像，重新拉取<br>[root@master231 kube-prometheus-0.11.0]# kubectl -n monitoring delete pod --all<br>查看pod事件信息<br>[root@master231 kube-prometheus-0.11.0]# kubectl -n monitoring describe prometheus-k8s-0<br>查看所有服务<br>[root@master231 kube-prometheus-0.11.0]# kubectl get svc -A<br>查看svc详情<br>[root@master231 kube-prometheus-0.11.0]# kubectl describe svc -n monitoring prometheus-k8s<br><br>修改收件人和发件人信息<br>[root@master231 kube-prometheus-0.11.0]# vim manifests/alertmanager-secret.yaml <br>里面记录了alertmanager的收件人和发件人信息。<br><br>访问WebUI <br>grafana：账号密码admin<br>http://10.0.0.231:30080<br>------------------------------<br>普罗米修斯：<br>http://10.0.0.231:30090<br>------------------------------<br><br>查看内置的模板 <br>查看后再倒入1860模板对比测试。<br></code></pre></td></tr></table></figure><h4 id="2-prometheus外部监控k8s集群"><a href="#2-prometheus外部监控k8s集群" class="headerlink" title="2.prometheus外部监控k8s集群"></a>2.prometheus外部监控k8s集群</h4><h5 id="监控node-exporter节点"><a href="#监控node-exporter节点" class="headerlink" title="监控node-exporter节点"></a><strong>监控node-exporter节点</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.所有节点导入镜像<br>[root@master231 ~]# docker load -i node-exporter_v1.8.1.tar.gz<br><br>2.在k8smaster编写资源清单<br>[root@master231 ~]# <span class="hljs-built_in">cat</span> ds-node-exporter.yaml <br>apiVersion: apps/v1<br>kind: DaemonSet<br>metadata:<br>  name: ds-node-exporter<br>spec:<br>  selector:<br>    matchLabels:<br>      apps: node-exporter<br>  template:<br>    metadata:<br>      labels:<br>        apps: node-exporter<br>    spec:<br>      hostNetwork: <span class="hljs-literal">true</span><br>      tolerations:<br>      - key: node-role.kubernetes.io/master<br>        effect: NoSchedule<br>      containers:<br>      - name: node-exporter<br>        image: prom/node-exporter:v1.8.1<br>        <span class="hljs-built_in">command</span>:<br>        - /bin/node_exporter<br>        - --web.listen-address=:19100<br><br>3.查看pod ---&gt; 每个节点成功运行<br>[root@master231 ~]# kubectl get pods -o wide<br>NAME                     READY   STATUS        RESTARTS   AGE    IP           NODE      <br>ds-node-exporter-5b4gc   1/1     Running       0          35s    10.0.0.233   worker233 <br>ds-node-exporter-dmnnj   1/1     Running       0          35s    10.0.0.232   worker232 <br>ds-node-exporter-hpj9h   1/1     Running       0          35s    10.0.0.231   master231 <br><br>4.修改Prometheus的配置文件并重新加载<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: k8s-node-exporter<br>    static_configs:<br>    - targets:<br>      - 10.0.0.231:19100<br>      - 10.0.0.232:19100<br>      - 10.0.0.233:19100<br>      <br>4.访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>5.grafana采集普罗米修斯31数据源的信息，导入模板ID<br>1860<br><br></code></pre></td></tr></table></figure><h5 id="监控云原生应用etcd案例"><a href="#监控云原生应用etcd案例" class="headerlink" title="监控云原生应用etcd案例"></a><strong>监控云原生应用etcd案例</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.查看etcd证书存储路径<br>[root@master231 ~]#  egrep <span class="hljs-string">&quot;\--key-file|--cert-file&quot;</span> /etc/kubernetes/manifests/etcd.yaml <br>    - --cert-file=/etc/kubernetes/pki/etcd/server.crt<br>    - --key-file=/etc/kubernetes/pki/etcd/server.key<br><br>2 测试etcd证书访问的metrics接口<br>[root@master231 ~]# curl -s --cert /etc/kubernetes/pki/etcd/server.crt  --key /etc/kubernetes/pki/etcd/server.key https://10.0.0.231:2379/metrics -k | <span class="hljs-built_in">tail</span><br><br>3. 创建etcd的service<br>[root@master231 ~]# <span class="hljs-built_in">cat</span> etcd-svc.yaml <br>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  name: etcd-k8s<br>  namespace:  kube-system<br>subsets:<br>- addresses:<br>  - ip: 10.0.0.231<br>  ports:<br>  - name: https-metrics<br>    port: 2379<br>    protocol: TCP<br><br>---<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: etcd-k8s<br>  namespace: kube-system<br>  labels:<br>    apps: etcd<br>spec:<br>  ports:<br>  - name: https-metrics<br>    port: 2379<br>    targetPort: 2379<br>  <span class="hljs-built_in">type</span>: ClusterIP<br>  <br>[root@master231 ~]# kubectl apply -f etcd-svc.yaml<br>[root@master231 ~]# kubectl get svc -n kube-system -l apps=etcd<br>NAME       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE<br>etcd-k8s   ClusterIP   10.200.33.157   &lt;none&gt;        2379/TCP   36m<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl -n kube-system describe svc etcd-k8s  | grep Endpoints<br>Endpoints:         10.0.0.231:2379<br><br><br>3.基于创建的svc访问测试连通性<br>[root@master231 ~]# curl -s --cert /etc/kubernetes/pki/etcd/server.crt  --key /etc/kubernetes/pki/etcd/server.key https://10.200.33.157:2379/metrics -k | <span class="hljs-built_in">tail</span> -1 <br>promhttp_metric_handler_requests_total&#123;code=<span class="hljs-string">&quot;503&quot;</span>&#125; 0<br><br>4.创建etcd证书的secrets并挂载到Prometheus server<br>4.1 查找需要挂载etcd的证书文件路径<br>[root@master231 ~]# egrep <span class="hljs-string">&quot;\--key-file|--cert-file|--trusted-ca-file&quot;</span> /etc/kubernetes/manifests/etcd.yaml   <br>    - --cert-file=/etc/kubernetes/pki/etcd/server.crt<br>    - --key-file=/etc/kubernetes/pki/etcd/server.key<br>    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt<br>[root@master231 ~]# <br><br><br>4.2 根据etcd的实际存储路径创建secrets<br>[root@master231 ~]# kubectl create secret generic etcd-tls --from-file=/etc/kubernetes/pki/etcd/server.crt --from-file=/etc/kubernetes/pki/etcd/server.key  --from-file=/etc/kubernetes/pki/etcd/ca.crt -n monitoring <br>secret/etcd-tls created<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl -n monitoring get secrets etcd-tls <br>NAME       TYPE     DATA   AGE<br>etcd-tls   Opaque   3      12s<br>[root@master231 ~]# <br><br><br>4.3 修改Prometheus的资源，修改后会自动重启<br>[root@master231 ~]# kubectl -n monitoring edit prometheus k8s<br>...<br>spec:<br>  secrets:<br>  - etcd-tls<br>  ...  <br>[root@master231 ~]# kubectl -n monitoring get pods -l app.kubernetes.io/component=prometheus -o wide<br>NAME               READY   STATUS    RESTARTS   AGE   IP            NODE        NOMINATED NODE   READINESS GATES<br>prometheus-k8s-0   2/2     Running   0          74s   10.100.1.57   worker232   &lt;none&gt;           &lt;none&gt;<br>prometheus-k8s-1   2/2     Running   0          92s   10.100.2.28   worker233   &lt;none&gt;           &lt;none&gt;<br>[root@master231 ~]# <br><br><br>4.4 查看证书是否挂载成功<br>[root@master231 ~]# kubectl -n monitoring <span class="hljs-built_in">exec</span> prometheus-k8s-0 -c prometheus -- <span class="hljs-built_in">ls</span> -l /etc/prometheus/secrets/etcd-tls<br>total 0<br>lrwxrwxrwx    1 root     2000            13 Jan 24 14:07 ca.crt -&gt; ..data/ca.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.crt -&gt; ..data/server.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.key -&gt; ..data/server.key<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl -n monitoring <span class="hljs-built_in">exec</span> prometheus-k8s-1 -c prometheus -- <span class="hljs-built_in">ls</span> -l /etc/prometheus/secrets/etcd-tls<br>total 0<br>lrwxrwxrwx    1 root     2000            13 Jan 24 14:07 ca.crt -&gt; ..data/ca.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.crt -&gt; ..data/server.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.key -&gt; ..data/server.key<br>[root@master231 ~]# <br><br><br>5.创建ServerMonitor<br>5.1 创建ServiceMonitor资源关联etcd的svc<br>[root@master231 ~]# <span class="hljs-built_in">cat</span>  etcd-smon.yaml <br>apiVersion: monitoring.coreos.com/v1<br>kind: ServiceMonitor<br>metadata:<br>  name: etcd-smon<br>  namespace: monitoring<br>spec:<br>  <span class="hljs-comment"># 指定job的标签，可以不设置。</span><br>  jobLabel: kubeadm-etcd-k8s<br>  <span class="hljs-comment"># 指定监控后端目标的策略</span><br>  endpoints:<br>    <span class="hljs-comment"># 监控数据抓取的时间间隔</span><br>  - interval: 30s<br>    <span class="hljs-comment"># 指定metrics端口，这个port对应Services.spec.ports.name</span><br>    port: https-metrics<br>    <span class="hljs-comment"># Metrics接口路径</span><br>    path: /metrics<br>    <span class="hljs-comment"># Metrics接口的协议</span><br>    scheme: https<br>    <span class="hljs-comment"># 指定用于连接etcd的证书文件</span><br>    tlsConfig:<br>      <span class="hljs-comment"># 指定etcd的CA的证书文件</span><br>      caFile:  /etc/prometheus/secrets/etcd-tls/ca.crt<br>      <span class="hljs-comment"># 指定etcd的证书文件</span><br>      certFile: /etc/prometheus/secrets/etcd-tls/server.crt<br>      <span class="hljs-comment"># 指定etcd的私钥文件</span><br>      keyFile: /etc/prometheus/secrets/etcd-tls/server.key<br>      <span class="hljs-comment"># 关闭证书校验，毕竟咱们是自建的证书，而非官方授权的证书文件。</span><br>      insecureSkipVerify: <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 监控目标Service所在的命名空间</span><br>  namespaceSelector:<br>    matchNames:<br>    - kube-system<br>  <span class="hljs-comment"># 监控目标Service目标的标签。</span><br>  selector:<br>    <span class="hljs-comment"># 注意，这个标签要和etcd的service的标签保持一致哟</span><br>    matchLabels:<br>      apps: etcd<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl apply -f etcd-smon.yaml <br>servicemonitor.monitoring.coreos.com/etcd-smon created<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl get smon -n monitoring yinzhengjie-etcd-smon <br>NAME                    AGE<br>yinzhengjie-etcd-smon   8s<br>[root@master231 ~]# <br><br><br>5.2.访问Prometheus的WebUI<br>http://10.0.0.233:30090/targets?search=<br><br><br>6.查看etcd的数据<br>etcd_cluster_version<br><br>7.使用grafana查看etcd数据<br>http://10.0.0.233:30080/?orgId=1<br>3070<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>监控篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELFK日志采集实战</title>
    <link href="/2025/04/16/ELFK%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%AE%9E%E6%88%98/"/>
    <url>/2025/04/16/ELFK%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一、日志分析概述"><a href="#一、日志分析概述" class="headerlink" title="一、日志分析概述"></a>一、日志分析概述</h1><ul><li>日志分析是运维工程师解决系统故障，发现问题的主要手段</li><li>日志主要包括系统日志、应用程序日志和安全日志</li><li>系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因</li><li>经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误</li></ul><h1 id="二、日志分析的作用"><a href="#二、日志分析的作用" class="headerlink" title="二、日志分析的作用"></a>二、日志分析的作用</h1><ul><li>分析日志时刻监控系统运行的状态</li><li>分析日志来定位程序的bug</li><li>分析日志监控网站的访问流量</li><li>分析日志可以知道哪些sql语句需要优化</li></ul><h1 id="三、ELK概述"><a href="#三、ELK概述" class="headerlink" title="三、ELK概述"></a>三、ELK概述</h1><p>ELFK 已经成为目前最流行的集中式日志解决方案，它主要是由 filebeat、Logstash、Elasticsearch、Kibana 等组件组成，来共同完成实时日志的收集，存储，展示等一站式的解决方案。本文将会介绍 ELK 常见的架构以及相关问题解决。</p><ul><li>Filebeat：Filebeat 是一款轻量级，占用服务资源非常少的数据收集引擎，它是 ELK 家族的新成员，可以代替 Logstash 作为在应用服务器端的日志收集引擎，支持将收集到的数据输出到 Kafka，Redis 等队列。</li><li>Logstash：数据收集引擎，相较于 Filebeat 比较重量级，但它集成了大量的插件，支持丰富的数据源收集，对收集的数据可以过滤，分析，格式化日志格式。</li><li>Elasticsearch：分布式数据搜索引擎，基于 Apache Lucene 实现，可集群，提供数据的集中式存储，分析，以及强大的数据搜索和聚合功能。</li><li>Kibana：数据的可视化平台，通过该 web 平台可以实时的查看 Elasticsearch 中的相关数据，并提供了丰富的图表统计功能</li></ul><h1 id="四、日志采集常见部署架构"><a href="#四、日志采集常见部署架构" class="headerlink" title="四、日志采集常见部署架构"></a>四、日志采集常见部署架构</h1><p><strong>filebeat作为日志收集器</strong></p><p>使用 Filebeat 作为日志采集器，通常可以将其直接作为日志收集的前端组件，负责读取日志文件并发送到后续Elasticsearch 中。之后kabana做出图展示。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2b05ddcb77964793a6825be117a9af44.png" alt="2b05ddcb77964793a6825be117a9af44.png"></p><p><strong>引入缓存队列的部署架构</strong></p><p>该架构在第二种架构的基础上引入了 Kafka 消息队列（还可以是其他消息队列），将 Filebeat 收集到的数据发送至 Kafka，然后在通过 Logstasth 读取 Kafka 中的数据，这种架构主要是解决大数据量下的日志收集方案，使用缓存队列主要是解决数据安全与均衡 Logstash 与 Elasticsearch 负载压力。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d0372a55a98241e1a77a402e5a7bd5d5.png" alt="d0372a55a98241e1a77a402e5a7bd5d5.png"></p><blockquote><p>本次我们部署efk架构。filebeat作为日志采集器，Elasticsearch存储数据，kibana展示采集的数据。</p></blockquote><h3 id="部署-Elasticsearch"><a href="#部署-Elasticsearch" class="headerlink" title="部署 Elasticsearch"></a><strong>部署 Elasticsearch</strong></h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1.</span>下载软件包<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2.</span>安装<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># dpkg -i elasticsearch-7.17.22-amd64.deb</span><br><br><span class="hljs-number">3.</span>修改配置文件<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># vim /etc/elasticsearch/elasticsearch.yml </span><br>cluster.name: cherry<br>path.data: /var/lib/elasticsearch<br>path.logs: /var/<span class="hljs-built_in">log</span>/elasticsearch<br>network.host: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>http.port: <span class="hljs-number">9200</span><br>transport.port: <span class="hljs-number">9300</span><br>discovery.type: <span class="hljs-string">&quot;single-node&quot;</span><br><br><span class="hljs-number">4.</span>启动服务<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># systemctl enable --now elasticsearch.service</span><br>Synchronizing state of elasticsearch.service <span class="hljs-keyword">with</span> SysV service script <span class="hljs-keyword">with</span> /usr/lib/systemd/systemd-sysv-install.<br>Executing: /usr/lib/systemd/systemd-sysv-install enable elasticsearch<br>Created symlink /etc/systemd/system/multi-user.target.wants/elasticsearch.service → /usr/lib/systemd/system/elasticsearch.service.<br><br><span class="hljs-number">5.</span>查看端口验证服务是否启动成功<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># ss -ntl | grep <span class="hljs-string">&quot;9[2|3]00&quot;</span></span><br>LISTEN <span class="hljs-number">0</span>      <span class="hljs-number">65535</span>              *:<span class="hljs-number">9300</span>             *:*          <br>LISTEN <span class="hljs-number">0</span>      <span class="hljs-number">65535</span>              *:<span class="hljs-number">9200</span>             *:*  <br><br><span class="hljs-number">6.</span>访问<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># curl http://192.1.7.244:9200/</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;node1.local&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;cherry&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;1-AfkL1DRXKIMuhaQuoFLQ&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;number&quot;</span> : <span class="hljs-string">&quot;7.17.22&quot;</span>,<br>    <span class="hljs-string">&quot;build_flavor&quot;</span> : <span class="hljs-string">&quot;default&quot;</span>,<br>    <span class="hljs-string">&quot;build_type&quot;</span> : <span class="hljs-string">&quot;deb&quot;</span>,<br>    <span class="hljs-string">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;38e9ca2e81304a821c50862dafab089ca863944b&quot;</span>,<br>    <span class="hljs-string">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2024-06-06T07:35:17.876121680Z&quot;</span>,<br>    <span class="hljs-string">&quot;build_snapshot&quot;</span> : <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;8.11.3&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.8.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br><br><span class="hljs-number">7.</span>查看节点信息<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># curl 192.1.7.244:9200/_cat/nodes</span><br><span class="hljs-number">192.1</span><span class="hljs-number">.7</span><span class="hljs-number">.244</span> <span class="hljs-number">18</span> <span class="hljs-number">99</span> <span class="hljs-number">2</span> <span class="hljs-number">0.05</span> <span class="hljs-number">0.15</span> <span class="hljs-number">0.07</span> cdfhilmrstw * node1.<span class="hljs-keyword">local</span><br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta">#</span><br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># curl 192.1.7.244:9200/_cat/nodes?v</span><br>ip          heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name<br><span class="hljs-number">192.1</span><span class="hljs-number">.7</span><span class="hljs-number">.244</span>           <span class="hljs-number">18</span>          <span class="hljs-number">99</span>   <span class="hljs-number">0</span>    <span class="hljs-number">0.04</span>    <span class="hljs-number">0.14</span>     <span class="hljs-number">0.07</span> cdfhilmrstw *      node1.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><h3 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-number">1</span>.下载kibana<br>[root@node1.local ~]<span class="hljs-comment"># wget https://artifacts.elastic.co/downloads/kibana/kibana-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2</span>.安装<br>[root@node1.local ~]<span class="hljs-comment"># dpkg -i kibana-7.17.22-amd64.deb</span><br><br><span class="hljs-number">3</span>.修改配置文件<br>[root@node1.local ~]<span class="hljs-comment"># vim /etc/kibana/kibana.yml</span><br>...<br><span class="hljs-comment"># 监听的端口</span><br>server.<span class="hljs-params">port:</span> <span class="hljs-number">5601</span><br><span class="hljs-comment"># 监听的地址</span><br>server.<span class="hljs-params">host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-comment"># 指定ES集群地址</span><br>elasticsearch.<span class="hljs-params">hosts:</span> [<span class="hljs-string">&quot;http://192.1.7.244:9200&quot;</span>]<br><span class="hljs-comment"># 国际化语言</span><br>i18n.<span class="hljs-params">locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><br><span class="hljs-number">4</span>.启动<br>[root@node1.local ~]<span class="hljs-comment"># systemctl enable --now kibana.service</span><br>[root@node1.local ~]<span class="hljs-comment"># ss -ntl | grep 5601</span><br>LISTEN <span class="hljs-number">0</span>      <span class="hljs-number">511</span>          <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">5601</span>      <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-operator">*</span> <br><br><span class="hljs-number">5</span>.访问<br>[root@node1.local ~]<span class="hljs-comment"># curl -I http://192.1.7.244:5601</span><br>HTTP<span class="hljs-symbol">/1.1</span> <span class="hljs-number">302</span> Found<br><span class="hljs-params">location:</span> <span class="hljs-symbol">/spaces/enter</span><br><span class="hljs-params">x-content-type-options:</span> nosniff<br><span class="hljs-params">referrer-policy:</span> no-referrer-when-downgrade<br><span class="hljs-params">content-security-policy:</span> script-src &#x27;unsafe-eval&#x27; &#x27;self&#x27;; worker-src <span class="hljs-params">blob:</span> &#x27;self&#x27;; style-src &#x27;unsafe-inline&#x27; &#x27;self&#x27;<br><span class="hljs-params">kbn-name:</span> node1.local<br><span class="hljs-params">kbn-license-sig:</span> f4384e4807b75451c2f4feacc4d54e13f9397d4b4f115c922f956f9017453f91<br><span class="hljs-params">cache-control:</span> private, no-cache, no-store, must-revalidate<br><span class="hljs-params">content-length:</span> <span class="hljs-number">0</span><br><span class="hljs-params">Date:</span> Thu, <span class="hljs-number">09</span> Jan <span class="hljs-number">2025</span> <span class="hljs-number">05</span>:<span class="hljs-number">51</span>:<span class="hljs-number">05</span> GMT<br><span class="hljs-params">Connection:</span> keep-alive<br><span class="hljs-params">Keep-Alive:</span> timeout<span class="hljs-operator">=</span><span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><h3 id="部署filebeat"><a href="#部署filebeat" class="headerlink" title="部署filebeat"></a>部署filebeat</h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5ade8e793739408487a70a3943757ab7.png"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1.</span>下载<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2.</span>安装<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># dpkg -i filebeat-7.17.22-amd64.deb</span><br><br><span class="hljs-number">3.</span>验证是否安装成功<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># filebeat -h</span><br></code></pre></td></tr></table></figure><p><strong>filebeat组成部分</strong></p><blockquote><p>input:数据从哪里来？<br> output：数据去哪里？</p></blockquote><p><strong>filebeat结构</strong></p><blockquote><p>- input: 数据从哪来？<br>   - stdin<br>   - tcp<br>   - log</p><p> - output: 数据到哪去？<br>   - console<br>   - elasticsearch</p></blockquote><h1 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h1><p>定义filebeat采集的日志索引模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@node1.local</span> <span class="hljs-string">filebeat</span>]<span class="hljs-comment"># vim systemlog.yaml </span><br><span class="hljs-attr">filebeat.inputs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/var/log/*.log</span><br><br><span class="hljs-attr">output.elasticsearch:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://192.1.7.244:9200&quot;</span><br>  <span class="hljs-attr">index:</span> <span class="hljs-string">&quot;system-log&quot;</span><br><br><span class="hljs-comment"># 禁用索引的生命周期(Index Lifecycle Management,简称&quot;ilm&quot;)，如果不禁用则忽略自定义索引名称</span><br><span class="hljs-attr">setup.ilm.enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># ES的索引模板名称</span><br><span class="hljs-attr">setup.template.name:</span> <span class="hljs-string">&quot;system&quot;</span><br><span class="hljs-comment"># ES索引模板的匹配模式</span><br><span class="hljs-attr">setup.template.pattern:</span> <span class="hljs-string">&quot;system-log*&quot;</span><br><span class="hljs-comment"># 如果索引模板已经存在，是否覆盖，推荐设置为false</span><br><span class="hljs-attr">setup.template.overwrite:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 设置索引模板</span><br><span class="hljs-attr">setup.template.settings:</span><br>  <span class="hljs-comment"># 设置索引的分片数量</span><br>  <span class="hljs-attr">index.number_of_shards:</span> <span class="hljs-number">5</span><br>  <span class="hljs-comment"># 设置索引的副本数量</span><br>  <span class="hljs-attr">index.number_of_replicas:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>执行filebeat采集日志</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> filebeat]<span class="hljs-meta"># filebeat -e -c /root/filebeat/systemlog.yaml </span><br></code></pre></td></tr></table></figure><p><strong>查看索引</strong> </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/89899c03a9b041cfaf7b981f14cbe78a.png" alt="89899c03a9b041cfaf7b981f14cbe78a.png"></p><p><strong>添加索引</strong> </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b5b5a1444258447baeedc342957cc623.png" alt="b5b5a1444258447baeedc342957cc623.png"></p><p><strong>查看日志</strong> </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3e9aa0ea8f8e41a7b0154f7afe40e9ef.png" alt="3e9aa0ea8f8e41a7b0154f7afe40e9ef.png"></p><h1 id="六、logstash"><a href="#六、logstash" class="headerlink" title="六、logstash"></a>六、logstash</h1><p>filebeat是基于logstash再次开发的，logstash可以对自己公司自研产品进行自定义日志，选择要截取的日志。</p><p>Logstash 是一个具有实时管道功能的开源数据收集引擎。Logstash可以动态统一来自不同来源的数据，并将数据规范化到您选择的目标中。为了多样化的高级下游分析和可视化用例，清理和使所有数据平等化。</p><p>虽然 Logstash 最初在日志收集方面推动了创新，但它的能力远远超出了该用例。任何类型的事件都可以通过广泛的输入、过滤和输出插件进行增强和转换，许多本地编解码器进一步简化了摄入过程。Logstash 通过利用更多的数据量和种类加速您的洞察力。</p><p><strong>工作原理</strong></p><p>Logstash 事件处理管道有三个阶段：<strong>输入 → 过滤器 → 输出</strong>。</p><p>inputs 模块负责收集数据，filters 模块可以对收集到的数据进行格式化、过滤、简单的数据处理，outputs 模块负责将数据同步到目的地，Logstash的处理流程，就像管道一样，数据从管道的一端，流向另外一端。</p><p>inputs 和 outputs 支持编解码器，使您能够在数据进入或离开管道时对数据进行编码或解码，而无需使用单独的过滤器。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/27f6c2a9e55249deb6c91357a5cccb3e.png" alt="27f6c2a9e55249deb6c91357a5cccb3e.png"></p><p><strong>部署logstash</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-number">1</span>.下载logstash<br>[root<span class="hljs-meta">@node1</span>.local <span class="hljs-operator">~</span>]#  wget https:<span class="hljs-comment">//artifacts.elastic.co/downloads/logstash/logstash-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2</span>.安装logstash<br>[root<span class="hljs-meta">@node1</span>.local <span class="hljs-operator">~</span>]#  dpkg <span class="hljs-operator">-</span>i logstash<span class="hljs-operator">-</span><span class="hljs-number">7.17</span>.<span class="hljs-number">22</span><span class="hljs-operator">-</span>amd64.deb<br><br><span class="hljs-number">3</span>.配置环境变量<br>[root<span class="hljs-meta">@node1</span>.local <span class="hljs-operator">~</span>]#  ln <span class="hljs-operator">-</span>svf <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>bin<span class="hljs-regexp">/logstash /</span>usr<span class="hljs-regexp">/local/</span>sbin<span class="hljs-operator">/</span><br>&#x27;<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin/</span>logstash&#x27; -&gt; &#x27;<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>bin<span class="hljs-operator">/</span>logstash&#x27;<br></code></pre></td></tr></table></figure><p><strong>logstash结构</strong></p><blockquote><p>- pipeline<br>   - input<br>   - stdin<br>   - file<br> - filter<br>   - mutate<br> - output<br>   - stdout<br>   - elasticsearch</p></blockquote><p><strong>fileter插件</strong></p><blockquote><p>grok：logstash 中最常用的日志解释和结构化插件。</p><p>grok ：是一种采用组合多个预定义的正则表达式，用来匹配分割文本并映射到关键字的工具。<br> mutate ：支持事件的变换，例如重命名、移除、替换、修改等</p><p>drop ：完全丢弃事件</p><p>clone ：克隆事件</p><p>geoip：添加关于 IP 地址的地理位置信息</p><p>date：专门用于处理日志的日期模块，将其作为时间戳可以替换”@timestamp”字段。</p></blockquote><p><strong>案例编写</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@node1.local conf.d]<span class="hljs-comment"># vim 03-file-filter-elasticsearch.conf </span><br>input &#123;<br>  <span class="hljs-comment"># 输入类型是一个file，代表的是文本文件</span><br>  file &#123;<br>    <span class="hljs-comment"># 指定的文件的路径，可以指定多个</span><br>    path =&gt; [<span class="hljs-string">&quot;/var/log/*.log&quot;</span>]<br>    <span class="hljs-comment"># 指定从源文件采集的位置，有效值为: beginning, end(默认值)。</span><br>    <span class="hljs-comment"># 该参数仅在首次采集(没有在&quot;.sincedb*&quot;文件中记录)新文件时生效，第二次采集则无视此参数。</span><br>    start_position =&gt; <span class="hljs-string">&quot;beginning&quot;</span><br>  &#125;<br>&#125;<br><br>filter &#123;<br>  mutate &#123;<br>      <span class="hljs-comment"># 对指定字段进行切分，本案例是将message字段按照&quot;|&quot;进行切分</span><br>      split =&gt; &#123; <span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;|&quot;</span> &#125;<br><br>      <span class="hljs-comment"># 添加字段</span><br>      add_field =&gt; &#123; <br>         <span class="hljs-string">&quot;other&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][0]&#125;&quot;</span><br>         <span class="hljs-string">&quot;userId&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][1]&#125;&quot;</span> <br>         <span class="hljs-string">&quot;action&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][2]&#125;&quot;</span><br>         <span class="hljs-string">&quot;svip&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][3]&#125;&quot;</span><br>         <span class="hljs-string">&quot;price&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][4]&#125;&quot;</span> <br><br>      &#125;<br>  &#125;<br><br>  mutate &#123;<br>      split =&gt; &#123; <span class="hljs-string">&quot;other&quot;</span> =&gt; <span class="hljs-string">&quot; &quot;</span>&#125;<br>      add_field =&gt; &#123;<br>         datetime =&gt; <span class="hljs-string">&quot;%&#123;[other][1]&#125; %&#123;[other][2]&#125;&quot;</span><br>      &#125;<br><br>      <span class="hljs-comment"># 移除字段</span><br>      remove_field =&gt; [ <span class="hljs-string">&quot;message&quot;</span> , <span class="hljs-string">&quot;other&quot;</span>, <span class="hljs-string">&quot;@version&quot;</span>]<br>  &#125;<br><br><br>  mutate &#123;<br>     <span class="hljs-comment"># 对字段进行数据转换</span><br>     convert =&gt; &#123;<br>       <span class="hljs-string">&quot;price&quot;</span> =&gt; <span class="hljs-string">&quot;float&quot;</span><br>       <span class="hljs-string">&quot;userId&quot;</span> =&gt; <span class="hljs-string">&quot;integer&quot;</span><br>     &#125;<br>  &#125;<br><br><br>   <span class="hljs-comment"># 处理时间相关的模块</span><br>   date &#123;<br>     <span class="hljs-comment"># 匹配日期字段，将&quot;datetime&quot; 转换为日期格式</span><br>     <span class="hljs-comment">#    源数据： &quot;datetime&quot; =&gt; &quot;2024-07-16 10:34:39&quot;</span><br>     match =&gt; [ <span class="hljs-string">&quot;datetime&quot;</span>, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> ]<br><br>     <span class="hljs-comment"># 使用match匹配到的时间数据类型存储在哪个字段中，若不指定，则默认使用覆盖&quot;@timestamp&quot;</span><br>     <span class="hljs-comment"># target =&gt; &quot;datetime&quot;</span><br>   &#125;<br><br><br>&#125;<br><br>output &#123;<br>  stdout &#123;&#125;<br><br> elasticsearch &#123;<br>    <span class="hljs-comment"># 指定ES集群地址</span><br>    hosts =&gt; [<span class="hljs-string">&quot;http://192.1.7.244:9200&quot;</span>]<br>    <span class="hljs-comment"># 指定ES自定义索引的名称</span><br>    index =&gt; <span class="hljs-string">&quot;system-%&#123;+yyyy.MM.dd&#125;&quot;</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>启动logstash实例</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@node1.<span class="hljs-keyword">local</span> ~]#  logstash -rf /etc/logstash/<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">d</span>/03-<span class="hljs-keyword">file</span>-filter-elasticsearch.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5bcd72e718c142c0a1cd2f9eca041d40.png" alt="5bcd72e718c142c0a1cd2f9eca041d40.png"></p><p><strong>kibana查看索引</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/da51a954f4b244cabd5180a97cedf398.png" alt="da51a954f4b244cabd5180a97cedf398.png"></p><p><strong>创建索引</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8fdb73bd47414486b46efcb9f324d2cd.png" alt="8fdb73bd47414486b46efcb9f324d2cd.png"></p><p><strong>查看日志数据</strong></p><p>很明显，相对于filebeat来说。logstash这时候已经精准过滤出我们需要的字段了</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1b492473f66f4d6cbe1512f88d24c6ff.png" alt="1b492473f66f4d6cbe1512f88d24c6ff.png"></p><h1 id="七、常见问题及解决方案"><a href="#七、常见问题及解决方案" class="headerlink" title="七、常见问题及解决方案"></a>七、常见问题及解决方案</h1><p><strong>问题：如何实现日志的多行合并功能？</strong></p><p>系统应用中的日志一般都是以特定格式进行打印的，属于同一条日志的数据可能分多行进行打印，那么在使用 ELK 收集日志的时候就需要将属于同一条日志的多行数据进行合并。</p><p>解决方案：使用 Filebeat 或 Logstash 中的 multiline 多行合并插件来实现</p><p>在使用 multiline 多行合并插件的时候需要注意，不同的 ELK 部署架构可能 multiline 的使用方式也不同，如果是本文的第一种部署架构，那么 multiline 需要在 Logstash 中配置使用，如果是第二种部署架构，那么 multiline 需要在 Filebeat 中配置使用，无需再在 Logstash 中配置 multiline。</p><p><strong>1、multiline 在 Filebeat 中的配置方式：</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/c5e5bf831c80439592004b44b09a6836.png" alt="c5e5bf831c80439592004b44b09a6836.png"></p><blockquote><ul><li>negate：默认为 false，表示匹配 pattern 的行合并到上一行；true 表示不匹配 pattern 的行合并到上一行</li><li>match：after 表示合并到上一行的末尾，before 表示合并到上一行的行首</li></ul></blockquote><p>如：该配置表示将不匹配 pattern 模式的行合并到上一行的末尾</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">pattern:</span> <span class="hljs-comment">&#x27;\[&#x27;</span><br><span class="hljs-symbol">negate:</span> <span class="hljs-literal">true</span><br><span class="hljs-symbol">match:</span> after<br></code></pre></td></tr></table></figure><p><strong>2、multiline 在 Logstash 中的配置方式</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/c0f265a20f22429688c3db433c48de05.png" alt="c0f265a20f22429688c3db433c48de05.png"></p><blockquote><p>（1）Logstash 中配置的 what 属性值为 previous，相当于 Filebeat 中的 after，Logstash 中配置的 what 属性值为 next，相当于 Filebeat 中的 before。<br> （2）pattern &#x3D;&gt; “%{LOGLEVEL}\s*]“ 中的 LOGLEVEL 是 Logstash 预制的正则匹配模式，预制的还有好多常用的正则匹配模式，详细请看：<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a> </p></blockquote><p><strong>问题：如何将 Kibana 中显示日志的时间字段替换为日志信息中的时间？</strong> </p><p>默认情况下，我们在 Kibana 中查看的时间字段与日志信息中的时间不一致，因为默认的时间字段值是日志收集时的当前时间，所以需要将该字段的时间替换为日志信息中的时间。</p><p><strong>解决方案：使用 grok 分词插件与 date 时间格式化插件来实现</strong></p><p>在 Logstash 的配置文件的过滤器中配置 grok 分词插件与 date 时间格式化插件，如：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/37091060f3d441b384738b4655ec0297.png" alt="37091060f3d441b384738b4655ec0297.png"></p><p>如要匹配的日志格式为：“[DEBUG][20170811 10:07:31,359][DefaultBeanDefinitionDocumentReader:106] Loading bean definitions”，解析出该日志的时间字段的方式有：</p><p>① 通过引入写好的表达式文件，如表达式文件为 customer_patterns，内容为：<br> CUSTOMER_TIME %{YEAR}%{MONTHNUM}%{MONTHDAY}\s+%{TIME}<br> 注：内容格式为：[自定义表达式名称] [正则表达式]<br> 然后 logstash 中就可以这样引用：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f4a603385f984c268b4171c088fa516b.png" alt="f4a603385f984c268b4171c088fa516b.png"></p><p> ② 以配置项的方式，规则为：(?&lt; 自定义表达式名称&gt; 正则匹配规则)，如：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">filter</span> &#123;  <br>  <span class="hljs-keyword">grok</span> &#123;    <br>    <span class="hljs-keyword">match</span> <span class="hljs-operator">=&gt;</span> [ <span class="hljs-string">&quot;message&quot;</span> , <span class="hljs-string">&quot;(?&lt;customer_time&gt;%&#123;YEAR&#125;%&#123;MONTHNUM&#125;%&#123;MONTHDAY&#125;\s+%&#123;TIME&#125;)&quot;</span> ]  <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题：如何在 Kibana 中通过选择不同的系统日志模块来查看数据</strong></p><p> 一般在 Kibana 中显示的日志数据混合了来自不同系统模块的数据，那么如何来选择或者过滤只查看指定的系统模块的日志数据？</p><p><strong>解决方案：新增标识不同系统模块的字段或根据不同系统模块建 ES 索引</strong></p><p>1、新增标识不同系统模块的字段，然后在 Kibana 中可以根据该字段来过滤查询不同模块的数据</p><p>这里以第二种部署架构讲解，在 Filebeat 中的配置内容为：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ddf6958c25a4490795f9de0d0e29b836.png" alt="ddf6958c25a4490795f9de0d0e29b836.png"></p><blockquote><p>通过新增：log_from 字段来标识不同的系统模块日志 </p></blockquote><p>2、根据不同的系统模块配置对应的 ES 索引，然后在 Kibana 中创建对应的索引模式匹配，即可在页面通过索引模式下拉框选择不同的系统模块数据。<br> 这里以第二种部署架构讲解，分为两步：</p><p>① 在 Filebeat 中的配置内容为：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f0aa2ef6423d4e0887d40b3fb593c541.png" alt="f0aa2ef6423d4e0887d40b3fb593c541.png"></p><blockquote><p>通过 document_type 来标识不同系统模块</p></blockquote><p> ② 修改 Logstash 中 output 的配置内容为：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ddcb22d3baf34114b02bb12476ddf1c5.png" alt="ddcb22d3baf34114b02bb12476ddf1c5.png"></p><blockquote><p>在 output 中增加 index 属性，%{type} 表示按不同的 document_type 值建 ES 索引</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>日志篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch入门篇</title>
    <link href="/2025/04/16/Elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2025/04/16/Elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="1-介绍-Elasticsearch"><a href="#1-介绍-Elasticsearch" class="headerlink" title="1.介绍 Elasticsearch"></a><strong>1.介绍 Elasticsearch</strong></h1><h2 id="1-1-什么是-Elasticsearch？"><a href="#1-1-什么是-Elasticsearch？" class="headerlink" title="1.1.什么是 Elasticsearch？"></a>1.1.什么是 Elasticsearch？</h2><p>Elasticsearch 是一种开源的搜索和分析引擎，专门用于处理<strong>大规模的数据</strong>，并以非常快的速度进行搜索和分析。它基于一个叫做 Apache Lucene 的库构建，但与 Lucene 相比，Elasticsearch 提供了更多的功能和易用性，使其成为处理和分析数据的强大工具。</p><h3 id="1-1-1-简单理解-Elasticsearch"><a href="#1-1-1-简单理解-Elasticsearch" class="headerlink" title="1.1.1.简单理解 Elasticsearch"></a>1.1.1.简单理解 Elasticsearch</h3><p>想象一下，你有一大堆书，而你需要在这些书中找到某个特定的词或一句话。如果你逐页翻阅，这将是一个非常耗时的过程。Elasticsearch 就像一个超级快速的图书馆管理员，它能在瞬间找到你想要的内容，不管这些书有多少。</p><h3 id="1-1-2-核心概念"><a href="#1-1-2-核心概念" class="headerlink" title="1.1.2.核心概念"></a>1.1.2.核心概念</h3><ol><li>开源与分布式<ul><li>开源：Elasticsearch 是开源的，这意味着它的代码是公开的，任何人都可以使用和修改它。开源社区的力量使得 Elasticsearch 不断改进和更新。</li><li>分布式：Elasticsearch 能够运行在多台服务器上，并把数据分布存储在这些服务器上。这种设计使它能够处理非常大的数据集，并且即使一台服务器出现问题，其他服务器仍然可以继续工作。</li></ul></li><li>基于 Apache Lucene<ul><li>Lucene 是一个非常强大的搜索库，但直接使用 Lucene 需要编写大量代码。Elasticsearch 使 Lucene 变得更容易使用，提供了一个简单的接口和许多额外的功能，使构建搜索和分析应用程序变得更加简单。</li></ul></li><li>近实时（Near Real-Time）搜索<ul><li>Elasticsearch 的一个重要特点是它的近实时搜索能力。当数据被存储到 Elasticsearch 中后，几乎立即就可以被搜索到。这对需要处理和分析实时数据的应用非常有用，比如日志监控系统。</li></ul></li></ol><h4 id="1-1-2-1-主要功能"><a href="#1-1-2-1-主要功能" class="headerlink" title="1.1.2.1.主要功能"></a>1.1.2.1.主要功能</h4><ol><li>全文搜索<ul><li>Elasticsearch 能够快速高效地处理全文搜索。这意味着它不仅仅能够搜索关键词，还能处理复杂的查询，比如匹配短语、布尔查询（与或非）、范围查询等。</li></ul></li><li>数据分析<ul><li>除了搜索，Elasticsearch 还能够对数据进行深入分析。它提供了强大的聚合功能，允许你进行各种统计分析，比如求平均值、最大值、最小值、分布情况等。</li></ul></li><li>实时数据处理<ul><li>Elasticsearch 可以处理和分析实时数据。这使得它非常适合用于日志分析和监控系统。通过与其他工具（如 Beats 和 Logstash）的集成，可以从各种数据源收集数据，并实时发送到 Elasticsearch 进行分析。</li></ul></li><li>扩展性和高可用性<ul><li>由于其分布式架构，Elasticsearch 可以轻松扩展以处理更多的数据和查询负载。你只需增加更多的服务器节点，就能提升其处理能力。此外，Elasticsearch 通过分片和副本机制确保数据的高可用性和容错能力。</li></ul></li></ol><h3 id="1-1-3-应用场景"><a href="#1-1-3-应用场景" class="headerlink" title="1.1.3.应用场景"></a>1.1.3.应用场景</h3><ol><li>日志和事件数据分析<ul><li>Elasticsearch 经常用于收集和分析日志数据。通过与 Kibana（一个可视化工具）的结合，可以创建直观的仪表盘，帮助用户实时监控和分析系统日志，快速发现和解决问题。</li></ul></li><li>全文搜索<ul><li>许多网站和应用程序使用 Elasticsearch 作为其搜索引擎，提供快速和精准的全文搜索功能。例如，电商网站可以使用 Elasticsearch 让用户快速找到他们想要购买的商品。</li></ul></li><li>监控和安全分析<ul><li>Elasticsearch 也用于实时监控和安全分析。通过收集和分析系统日志、网络流量等数据，可以实时监控系统运行状态，并检测和响应潜在的安全威胁。</li></ul></li><li>数据存储和检索<ul><li>除了搜索和分析，Elasticsearch 还可以作为一个高效的数据存储和检索系统，特别适合需要快速访问的大规模数据集。</li></ul></li></ol><h2 id="1-2-为什么选择-Elasticsearch？"><a href="#1-2-为什么选择-Elasticsearch？" class="headerlink" title="1.2.为什么选择 Elasticsearch？"></a>1.2.为什么选择 Elasticsearch？</h2><p>Elasticsearch 是一个<strong>强大的搜索和分析引擎</strong>，广泛应用于各种场景。它的受欢迎程度源于其诸多优势和特点，使其成为许多企业和开发者在<strong>处理大规模数据和实时搜索需求时的首选</strong>。下面，我们将详细介绍为什么选择 Elasticsearch 以及它的主要优点。</p><h3 id="1-2-1-快速的全文搜索能力"><a href="#1-2-1-快速的全文搜索能力" class="headerlink" title="1.2.1 快速的全文搜索能力"></a>1.2.1 快速的全文搜索能力</h3><p>Elasticsearch 基于 Apache Lucene 构建，具备<strong>极快的全文搜索能力</strong>。这意味着无论是查找单个关键词、短语，还是执行复杂的布尔查询，Elasticsearch 都能够迅速返回结果。这对需要处理大量文本数据的应用场景非常重要，比如：</p><ul><li><strong>电商网站</strong>：快速查找商品并提供精准的搜索结果，提高用户体验。</li><li><strong>内容管理系统</strong>：高效地检索文章、博客和文档中的信息。</li></ul><h3 id="1-2-2-实时数据处理"><a href="#1-2-2-实时数据处理" class="headerlink" title="1.2.2. 实时数据处理"></a>1.2.2. 实时数据处理</h3><p>Elasticsearch 的近<strong>实时搜索能力使其非常适合处理实时数据</strong>。这意味着当新数据被存储到 Elasticsearch 中后，几乎立即就可以被搜索和分析。这一特点在以下场景中尤为关键：</p><ul><li><strong>日志和监控系统</strong>：实时分析系统日志，快速发现和解决问题。</li><li><strong>安全监控</strong>：实时监测和分析安全事件，及时检测和响应潜在威胁。</li></ul><h3 id="1-2-3-分布式架构和可扩展性"><a href="#1-2-3-分布式架构和可扩展性" class="headerlink" title="1.2.3. 分布式架构和可扩展性"></a>1.2.3. 分布式架构和可扩展性</h3><p>Elasticsearch 的分布式设计使其<strong>能够在多个服务器节点上运行</strong>，并将数据分布存储在这些节点上。这种架构带来了巨大的扩展性和容错能力：</p><ul><li><strong>扩展性</strong>：随着数据量和查询量的增加，可以通过添加更多节点来线性扩展系统的存储和处理能力。</li><li><strong>高可用性</strong>：即使某个节点出现故障，其他节点仍然可以继续工作，确保系统的持续运行。</li></ul><h3 id="1-2-4-强大的数据分析功能"><a href="#1-2-4-强大的数据分析功能" class="headerlink" title="1.2.4. 强大的数据分析功能"></a>1.2.4. 强大的数据分析功能</h3><p>除了搜索，Elasticsearch 还提供了<strong>强大的数据分析能力</strong>。通过聚合功能，可以对数据进行复杂的统计分析。这对需要从大量数据中提取有价值信息的场景非常有用：</p><ul><li>数据分析：计算平均值、最大值、最小值、分布情况等，帮助做出数据驱动的决策。</li><li><strong>商业智能</strong>：分析用户行为、销售数据等，为业务发展提供洞察。</li></ul><h3 id="1-2-5-易用的-RESTful-API"><a href="#1-2-5-易用的-RESTful-API" class="headerlink" title="1.2.5. 易用的 RESTful API"></a><strong>1.2.5. 易用的 RESTful API</strong></h3><p>Elasticsearch 提供了<strong>丰富的 RESTful API</strong>，使得与其交互变得非常简单。<strong>无论是索引数据、执行搜索查询，还是进行集群管理，都可以通过简单的 HTTP 请求完成</strong>。这对于开发者来说，非常友好：</p><ul><li><strong>开发便捷</strong>：无需复杂的设置和配置，通过简单的 API 调用即可实现强大的功能。</li><li><strong>集成简单</strong>：容易与其他系统和应用集成，例如使用 Logstash 收集数据、使用 Kibana 进行数据可视化。</li></ul><h3 id="1-2-6-活跃的社区和丰富的生态系统"><a href="#1-2-6-活跃的社区和丰富的生态系统" class="headerlink" title="1.2.6. 活跃的社区和丰富的生态系统"></a>1.2.6. 活跃的社区和丰富的生态系统</h3><p>Elasticsearch 是一个开源项目，<strong>拥有一个非常活跃的社区</strong>。你可以从社区获得大量的支持和资源，包括文档、教程、插件等。此外，Elasticsearch 还拥有丰富的生态系统：</p><ul><li><strong>Beats</strong>：轻量级数据采集器，用于将数据发送到 Elasticsearch。</li><li><strong>Logstash</strong>：数据处理管道，支持从多种来源收集、转换和加载数据到 Elasticsearch。</li><li><strong>Kibana</strong>：强大的可视化工具，可以创建各种仪表盘和图表，直观展示数据分析结果。</li></ul><h3 id="1-2-7-企业级功能"><a href="#1-2-7-企业级功能" class="headerlink" title="1.2.7. 企业级功能"></a>1.2.7. 企业级功能</h3><p>对于需要高性能和高可靠性的企业应用，Elasticsearch 还提供了一些高级功能，例如：</p><ul><li><strong>安全性</strong>：通过 X-Pack 提供的安全功能，可以实现用户身份验证、访问控制和数据加密，确保数据安全。</li><li><strong>监控和报警</strong>：可以监控集群的运行状态，设置报警机制，在出现问题时及时通知管理员。</li></ul><h2 id="1-3-Elasticsearch-的特点与优势"><a href="#1-3-Elasticsearch-的特点与优势" class="headerlink" title="1.3.Elasticsearch 的特点与优势"></a>1.3.Elasticsearch 的特点与优势</h2><p>Elasticsearch 是一个功能强大且灵活的搜索和分析引擎。<strong>它不仅仅是一个搜索工具，更是一个能够处理大规模数据、提供实时分析的综合解决方案</strong>。</p><h3 id="1-3-1-分布式架构"><a href="#1-3-1-分布式架构" class="headerlink" title="1.3.1. 分布式架构"></a>1.3.1. 分布式架构</h3><h4 id="分片和副本"><a href="#分片和副本" class="headerlink" title="分片和副本"></a>分片和副本</h4><p>Elasticsearch 采用<strong>分布式架构设计</strong>，<strong>数据被分成多个分片（shards）并分布存储在多个节点上</strong>。<strong>每个分片可以有一个或多个副本（replicas），以提高数据的可用性和容错性。</strong></p><ul><li><strong>分片</strong>：将数据分成更小的块，分布在集群中的不同节点上，提高查询和索引的性能。</li><li><strong>副本</strong>：每个分片可以有多个副本，分布在不同节点上，确保数据的高可用性和容错性。</li></ul><p>这种分布式设计使得 Elasticsearch 能够轻松扩展，通过增加节点来处理更多的数据和更高的查询负载。</p><h3 id="1-3-2-近实时搜索"><a href="#1-3-2-近实时搜索" class="headerlink" title="1.3.2. 近实时搜索"></a>1.3.2. 近实时搜索</h3><p>Elasticsearch 的一个显著特点是其近实时（Near Real-Time, NRT）搜索能力。当新数据被索引后，几乎立即就可以被搜索到。这对于需要快速处理和分析新数据的应用场景非常重要，例如日志分析和监控系统。</p><h3 id="1-3-3-强大的全文搜索能力"><a href="#1-3-3-强大的全文搜索能力" class="headerlink" title="1.3.3. 强大的全文搜索能力"></a>1.3.3. 强大的全文搜索能力</h3><p>Elasticsearch 基于 Apache Lucene，具备强大的全文搜索功能。它能够处理各种复杂的查询需求，包括：</p><ul><li><strong>布尔查询</strong>：支持 AND、OR、NOT 等逻辑操作。</li><li><strong>短语查询</strong>：能够搜索精确的短语匹配。</li><li><strong>范围查询</strong>：支持对数值、日期等范围的查询。</li><li><strong>分词器和倒排索引</strong>：通过分词器将文本分成词条，并创建倒排索引，使得全文搜索快速高效。</li></ul><h3 id="1-3-4-丰富的分析功能"><a href="#1-3-4-丰富的分析功能" class="headerlink" title="1.3.4. 丰富的分析功能"></a>1.3.4. 丰富的分析功能</h3><p>除了搜索，Elasticsearch 还提供了强大的数据分析功能。通过聚合（aggregation）功能，可以对大规模数据进行复杂的统计分析，例如：</p><ul><li>计数：计算文档的数量。</li><li>求和：计算数值字段的总和。</li><li>平均值：计算数值字段的平均值。</li><li>最大值和最小值：找到数值字段的最大值和最小值。</li><li>直方图和分布：创建数据分布的直方图和分桶统计。</li></ul><p>这些功能使得 Elasticsearch 不仅是一个搜索引擎，还可以作为一个强大的分析工具。</p><h3 id="1-3-5-灵活的-RESTful-API"><a href="#1-3-5-灵活的-RESTful-API" class="headerlink" title="1.3.5. 灵活的 RESTful API"></a>1.3.5. 灵活的 RESTful API</h3><p>Elasticsearch 提供了灵活的 RESTful API，支持通过 HTTP 请求与其交互。这使得它的使用和集成变得非常简单：</p><ul><li><strong>索引数据</strong>：通过简单的 HTTP PUT 或 POST 请求将数据存储到 Elasticsearch 中。</li><li><strong>执行查询</strong>：通过 HTTP GET 请求执行各种搜索查询。</li><li><strong>集群管理</strong>：通过 API 进行集群的配置和管理。</li></ul><p>这种灵活性使得开发者能够轻松地将 Elasticsearch 集成到各种应用和系统中。</p><h3 id="1-3-6-扩展性和高可用性"><a href="#1-3-6-扩展性和高可用性" class="headerlink" title="1.3.6. 扩展性和高可用性"></a>1.3.6. 扩展性和高可用性</h3><p>由于其分布式架构，Elasticsearch 具有很高的扩展性和高可用性：</p><ul><li><strong>线性扩展</strong>：<strong>通过增加节点，可以线性地增加存储和处理能力。</strong></li><li><strong>容错能力</strong>：<strong>通过分片和副本机制，即使某个节点出现故障，其他节点仍然可以继续工作，确保系统的高可用性。</strong></li></ul><p>这种设计使得 Elasticsearch 能够处理从几百兆到几百TB的数据量，适应各种规模的应用需求。</p><h3 id="1-3-7-安全性和权限控制"><a href="#1-3-7-安全性和权限控制" class="headerlink" title="1.3.7. 安全性和权限控制"></a>1.3.7. 安全性和权限控制</h3><p>Elasticsearch 提供了多种安全功能，确保数据的安全性和访问控制：</p><ul><li>身份验证和授权：通过 X-Pack 插件提供用户身份验证和基于角色的访问控制。</li><li>加密：支持数据在传输和存储中的加密，确保数据安全。</li><li>审计：记录所有访问和操作日志，方便进行安全审计和合规检查。</li></ul><h3 id="1-3-8-丰富的生态系统"><a href="#1-3-8-丰富的生态系统" class="headerlink" title="1.3.8. 丰富的生态系统"></a>1.3.8. 丰富的生态系统</h3><p>Elasticsearch 拥有一个丰富的生态系统，包括：</p><ul><li>Beats：轻量级的数据收集器，可以从各种数据源收集数据并发送到 Elasticsearch。</li><li>Logstash：强大的数据处理管道，支持数据收集、转换和加载（ETL）操作。</li><li>Kibana：可视化工具，提供强大的数据展示和分析功能，可以创建各种仪表盘和图表。</li></ul><p>这些工具与 Elasticsearch 紧密集成，提供了一个完整的数据收集、处理、存储、分析和可视化解决方案。</p><h3 id="1-3-9-活跃的社区和持续的发展"><a href="#1-3-9-活跃的社区和持续的发展" class="headerlink" title="1.3.9. 活跃的社区和持续的发展"></a>1.3.9. 活跃的社区和持续的发展</h3><p>作为一个开源项目，Elasticsearch 拥有一个活跃的社区。社区的活跃度带来了持续的发展和改进：</p><ul><li>社区支持：活跃的用户社区提供了丰富的文档、教程和论坛支持，帮助新用户快速上手。</li><li>持续更新：开发者不断贡献新的功能和改进，使得 Elasticsearch 保持在技术的前沿。</li></ul><h1 id="2-Elasticsearch-核心概念与基本操作"><a href="#2-Elasticsearch-核心概念与基本操作" class="headerlink" title="2.Elasticsearch 核心概念与基本操作"></a><strong>2.Elasticsearch 核心概念与基本操作</strong></h1><h2 id="2-1-索引与文档"><a href="#2-1-索引与文档" class="headerlink" title="2.1.索引与文档"></a>2.1.索引与文档</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d890e7b6152041b2a98f54ad29d1c6ea.png" alt="img"></p><p><strong>（Type，注：Elasticsearch 7.0以后弃用了Type）</strong></p><p>在了解 Elasticsearch 的过程中，<strong>索引（Index）和文档（Document）</strong>是两个最基本也是最重要的概念。理解它们的作用和关系，有助于更好地掌握如何使用 Elasticsearch 存储、搜索和分析数据。</p><h3 id="2-1-1-什么是索引？"><a href="#2-1-1-什么是索引？" class="headerlink" title="2.1.1.什么是索引？"></a>2.1.1.什么是索引？</h3><p>索引在 Elasticsearch 中是一个存储结构，用来组织和存储数据。你可以把它看作一个数据库或一个文件夹，其中包含了多个文档。每个索引都有一个唯一的名字，用于在操作数据时进行引用。</p><ul><li><strong>数据库</strong>：在传统的关系数据库中，数据库是存储表的容器。</li><li><strong>索引</strong>：在 Elasticsearch 中，索引是存储文档的容器。<strong>类似于关系型数据库（MySQL）中的数据库和表的组合体。</strong></li></ul><p>每个索引可以包含多种类型的文档，而这些文档具有类似的结构。例如，如果你有一个包含商品信息的索引，索引中的每个文档都可能包含商品名称、描述、价格等字段。</p><h3 id="2-1-1-1-定义"><a href="#2-1-1-1-定义" class="headerlink" title="2.1.1.1. 定义"></a>2.1.1.1. 定义</h3><p>索引在 Elasticsearch 中是一个逻辑存储单元，类似于关系型数据库中的“数据库”概念。<br> 它是一个文档的集合，这些文档具有相似的特性或属于同一逻辑分类。</p><h3 id="2-1-1-2-分片与副本"><a href="#2-1-1-2-分片与副本" class="headerlink" title="2.1.1.2. 分片与副本"></a>2.1.1.2. 分片与副本</h3><p>索引可以包含<strong>一个或多个分片（Shards）</strong>，每个分片都是一个 Lucene 实例，可以独立地进行搜索和存储操作。分片允许 Elasticsearch 在多个服务器上水平扩展，从而处理更多的数据和查询。<br> 每个分片可以有零个或多个副本（Replicas），副本是分片的完整拷贝，用于提供数据的冗余和容错性。当某个分片所在的服务器出现故障时，可以从其副本中恢复数据。</p><h3 id="2-1-1-3-数据存储"><a href="#2-1-1-3-数据存储" class="headerlink" title="2.1.1.3. 数据存储"></a>2.1.1.3. 数据存储</h3><p>索引中的文档被存储为 JSON 格式，这使得 Elasticsearch 能够存储结构化和非结构化数据。<br> Elasticsearch 使用倒排索引（Inverted Index）技术来实现高效的全文搜索。倒排索引将文档中的单词与其在文档中的位置信息关联起来，从而可以快速定位包含特定单词的文档。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/41517010d4f54cef9688c60120ea1af7.png" alt="img"></p><h3 id="2-1-2-什么是文档？"><a href="#2-1-2-什么是文档？" class="headerlink" title="2.1.2.什么是文档？"></a>2.1.2.什么是文档？</h3><p>文档是 Elasticsearch 中的数据单位。每个文档是一组键值对（键是字段名，值是字段值），并且存储在某个索引中。文档的格式通常是 JSON 格式，这使得它非常灵活和易于使用。</p><ul><li><strong>记录</strong>：在传统的关系数据库中，表中的一行就是一条记录。</li><li><strong>文档</strong>：在 Elasticsearch 中，索引中的一个文档就是一个数据条目。</li></ul><p>例如，一个描述商品的文档可能如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;product_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Laptop&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A high-performance laptop&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">999.99</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;stock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">50</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个文档包含了商品的 ID、名称、描述、价格和库存量等信息。</p><p>以下是关于 Elasticsearch 文档的一些重要概念和特点：</p><ol><li><strong>结构化数据</strong>：文档是结构化的数据对象，由多个字段组成。每个字段都有一个名称和对应的值，可以是简单的数据类型（如文本、数字、日期等）或复杂的数据结构（如嵌套对象、数组等）。</li><li><strong>唯一标识</strong>：每个文档都有一个唯一标识符（ID），用于在索引中唯一标识该文档。ID 可以由 Elasticsearch 自动生成，也可以由用户指定。</li><li><strong>索引存储</strong>：文档被存储在索引中，每个索引可以包含多个文档。索引是文档的集合，类似于关系型数据库中的表。</li><li><strong>字段映射</strong>：文档的字段映射定义了每个字段的数据类型、分析器等属性。字段映射可以手动指定，也可以由 Elasticsearch 根据插入的文档自动推断生成。</li><li><strong>全文搜索</strong>：Elasticsearch 支持全文搜索，可以对文档中的文本字段进行全文检索。全文搜索可以根据关键词、词语匹配度等条件快速定位到符合条件的文档。</li><li><strong>CRUD 操作</strong>：文档支持 CRUD 操作，即创建（Create）、读取（Retrieve）、更新（Update）和删除（Delete）。通过 Elasticsearch 的 API 可以对文档进行增删改查操作。</li><li><strong>版本控制</strong>：Elasticsearch 支持文档的版本控制，每个文档可以有多个版本。当对文档进行更新操作时，Elasticsearch 会自动创建新版本，并保存历史版本的数据。</li></ol><p>文档是 Elasticsearch 中存储和组织数据的基本单位，具有灵活的数据模型、强大的全文搜索和分析功能，是构建分布式搜索引擎和分布式数据存储系统的核心组件之一。</p><h3 id="2-1-3-索引与文档的关系"><a href="#2-1-3-索引与文档的关系" class="headerlink" title="2.1.3.索引与文档的关系"></a>2.1.3.索引与文档的关系</h3><p>索引与文档的关系**类似于数据库与记录**（相当于 MySQL 中的行（Row））**的关系**。一个索引包含多个文档，而每个文档属于某个索引。</p><h3 id="2-1-4-创建索引和文档"><a href="#2-1-4-创建索引和文档" class="headerlink" title="2.1.4.创建索引和文档"></a>2.1.4.创建索引和文档</h3><p>现在我们了解了什么是索引和文档，接下来看看如何在 Elasticsearch 中创建它们。</p><ul><li><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4></li></ul><p>在 Elasticsearch 中创建索引非常简单，可以使用 RESTful API 进行操作。例如，要创建一个名为 “products” 的索引，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /products<br></code></pre></td></tr></table></figure><p>这个命令会创建一个名为 “products” 的索引，用于存储商品信息的文档。</p><ul><li><h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4></li></ul><p>创建索引后，我们可以向其中添加文档。例如，向 “products” 索引中添加一个商品文档，可以使用以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/products/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;product_id&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Laptop&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;A high-performance laptop&quot;</span>,<br>  <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">999.99</span>,<br>  <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">50</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里，<code>_doc</code> 是文档类型，<code>1</code> 是文档的 ID。如果不指定 ID，Elasticsearch 会自动生成一个唯一的 ID。</p><ul><li><h4 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h4></li></ul><p>要检索刚才添加的文档，可以使用以下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /products/_doc/1<br></code></pre></td></tr></table></figure><p>这个命令会返回 ID 为 1 的文档的详细信息。</p><ul><li><h4 id="更新和删除文档"><a href="#更新和删除文档" class="headerlink" title="更新和删除文档"></a>更新和删除文档</h4></li></ul><p>除了创建和检索文档外，Elasticsearch 还提供了更新和删除文档的功能。</p><ul><li><strong>更新文档</strong></li></ul><p>要更新现有文档，可以使用以下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/products/</span>_doc<span class="hljs-regexp">/1/</span>_update<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">899.99</span>,<br>    <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">45</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个命令会更新 ID 为 1 的文档的价格和库存信息。</p><ul><li>删除文档</li></ul><p>要删除某个文档，可以使用以下命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/products/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这个命令会删除 ID 为 1 的文档。</p><h3 id="2-1-5-Elasticsearch与RDBMS的对应关系"><a href="#2-1-5-Elasticsearch与RDBMS的对应关系" class="headerlink" title="2.1.5.Elasticsearch与RDBMS的对应关系"></a>2.1.5.Elasticsearch与RDBMS的对应关系</h3><p>我相信大家对关系型数据库（简称 RDBMS）应该比较了解，因此接下来拿关系型数据库和 ES 做一个类比，让大家更容易理解</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6ccfb72e46664962ac030907f3c203c5.png" alt="img"></p><p>从表中，不难看出，关系型数据库和 ES 有如下对应关系：</p><ul><li>关系型数据库中的<strong>表（Table）</strong>对应 ES 中的<strong>索引（Index）</strong></li><li>关系型数据库中的每条<strong>记录（Row）</strong>对应 ES 中的<strong>文档（Document）</strong></li><li>关系型数据库中的<strong>字段（Column）</strong>对应 ES 中的<strong>字段（Filed）</strong></li><li>关系型数据库中的<strong>表定义（Schema）</strong>对应着 ES 中的<strong>映射（Mapping）</strong></li><li>关系型数据库中可以<strong>通过 SQL 进行查询等操作</strong>，在 ES 中也提供了 <strong>DSL 进行查询等操作</strong></li></ul><p>当进行全文检索或者对搜索结果进行算分的时候，ES 比较合适，但如果对数据事务性要求比较高的时候，会把关系型数据库和 ES 结合使用。</p><p>为了方便其他语言的整合，ES 也提供了 <strong>REST API 来给其他程序进行调用</strong>，当我们的程序要和 ES 进行集成的时候，只需要发出 HTTP 的请求就会得到相应的结果</p><h2 id="2-2-分布式架构"><a href="#2-2-分布式架构" class="headerlink" title="2.2.分布式架构"></a>2.2.分布式架构</h2><p>TODO：分布式的详细介绍将单独发布在另一篇文章中（新文章会补充相关内容），这里只做简要概述。</p><p>Elasticsearch 是一个<strong>分布式搜索和分析引擎</strong>，这意味着它能够将数据和工作负载分布在多个节点上，以实现高性能、高可用性和可扩展性。分布式架构是 Elasticsearch 的核心特性之一，它使得 Elasticsearch <strong>可以处理大规模数据和高并发查询。</strong>下面将以 Elasticsearch 的分布式架构，包括集群、节点、索引、分片和副本等核心概念进行介绍。</p><h3 id="2-2-1-什么是分布式架构？"><a href="#2-2-1-什么是分布式架构？" class="headerlink" title="2.2.1.什么是分布式架构？"></a>2.2.1.什么是分布式架构？</h3><p>分布式架构是一种设计系统的方法，在这种方法中，系统的组件分布在多个计算机节点上，这些节点通过网络进行通信和协作。分布式架构具有以下几个显著的优点：</p><ul><li><strong>扩展性</strong>：可以通过增加更多的节点来提高系统的处理能力和存储容量。</li><li><strong>高可用性</strong>：即使某个节点出现故障，系统仍然可以继续运行。</li><li><strong>性能</strong>：通过将数据和查询请求分布到多个节点上，可以显著提高系统的处理速度和响应时间。</li></ul><h3 id="2-2-2-Elasticsearch-的分布式架构"><a href="#2-2-2-Elasticsearch-的分布式架构" class="headerlink" title="2.2.2.Elasticsearch 的分布式架构"></a>2.2.2.Elasticsearch 的分布式架构</h3><p>Elasticsearch 的分布式架构由几个关键组件组成：<strong>集群、节点、索引、分片和副本。</strong></p><h3 id="2-2-2-1-集群"><a href="#2-2-2-1-集群" class="headerlink" title="2.2.2.1.集群"></a>2.2.2.1.集群</h3><p>在 Elasticsearch 中，<strong>集群（Cluster）</strong>是由<strong>一个或多个节点（Node）</strong>组成的分布式系统。这些节点协同工作，共同存储、索引和搜索数据，提供高可用性、可伸缩性和容错性。集群是<strong>由一个或多个节点组成的集合，这些节点协同工作，共同存储数据并提供索引和搜索功能。</strong>每个集群都有一个唯一的名称，用于标识集群中的所有节点。集群中的所有节点通过网络相互通信，形成一个整体。</p><ol><li><strong>集群</strong>：类似于一群合作完成任务的计算机。</li><li><strong>节点的集合</strong>：集群是由多个节点组成的集合。每个节点都是一个独立的 Elasticsearch 实例，可以独立运行，也可以加入到一个集群中。</li><li><strong>数据分片和副本</strong>：集群中的数据被分成多个分片（Shard），每个分片可以在集群的不同节点上进行存储和复制。分片的复制称为副本（Replica），用于提高数据的可用性和容错性。</li><li><strong>负载均衡</strong>：集群可以自动进行负载均衡，将搜索请求和索引请求分配到各个节点上，以实现数据的均衡存储和处理。</li><li><strong>故障检测和容错</strong>：集群可以检测到节点的故障并进行处理，例如自动将丢失的分片复制到其他节点上，以确保数据的完整性和可用性。</li><li><strong>主节点</strong>：集群中的主节点（Master Node）负责集群的管理和协调工作，例如分配分片、故障检测、节点加入和退出等。</li><li><strong>集群状态</strong>：集群的状态可以是健康的（Green）、部分健康的（Yellow）或者不健康的（Red），根据集群中分片的分布和副本的状态来判断。</li><li><strong>动态扩展</strong>：集群可以根据需要动态扩展，可以增加节点、增加分片副本或者增加集群中的分片数量。</li></ol><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/081fd98a8dff41049c0aa195676129f5.png" alt="img"></p><h3 id="2-2-2-2-节点"><a href="#2-2-2-2-节点" class="headerlink" title="2.2.2.2.节点"></a>2.2.2.2.节点</h3><p>Elasticsearch中的<strong>节点（Node）指的是Elasticsearch实例的运行实例，即一个独立的Elasticsearch服务进程。</strong>每个节点都是一个独立的工作单元，负责存储数据、参与数据处理（如索引、搜索、聚合等）以及参与集群的协调工作。</p><p>节点<strong>是集群中的一个单独服务器</strong>，<strong>它存储数据并参与集群的索引和搜索操作</strong>。每个节点都有一个唯一的名称，并且可以承担不同的角色，例如<strong>主节点（负责集群管理）或数据节点（存储数据并处理搜索请求）</strong>。节点：类似于集群中的一个成员，每个成员都有特定的任务和职责。</p><p>通过多个节点（Node）,可以组成Elasticsearch高可用集群</p><p>节点可以承担多种角色，包括但不限于：</p><ul><li><strong>主节点（Master Node）</strong>：负责集群范围内的元数据管理和变更，如索引创建、删除、分片分配等。</li><li><strong>数据节点（Data Node）</strong>：存储实际数据和相关的索引文件，参与数据的索引、搜索和恢复过程。</li><li><strong>协调节点（Coordinating Node）</strong>：接收客户端请求，将请求路由至适当的节点，并将结果汇总返回给客户端。每个节点都可以充当协调节点，也可以专门设置某些节点仅作为协调节点。</li></ul><p>节点可以在物理或虚拟机上单独部署，也可以在同一台机器上运行多个节点（但需注意资源分配）。节点通过HTTP协议进行通信，共同管理集群的状态和数据。在Elasticsearch集群中，多个节点协同工作，共同提供高效、可靠的数据存储和搜索服务。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1c0c7f09ddaa4fa78bef4e9c19572218.png" alt="img"></p><h3 id="2-2-2-3-索引、分片和副本"><a href="#2-2-2-3-索引、分片和副本" class="headerlink" title="2.2.2.3.索引、分片和副本"></a>2.2.2.3.索引、分片和副本</h3><p>在 Elasticsearch 中，数据存储在索引中。<strong>每个索引可以被分为多个分片（shards），每个分片可以有一个或多个副本（replicas）。</strong>在 Elasticsearch 中，<strong>分片（Shard）</strong>和<strong>副本（Replica）</strong>是两个重要的概念，它们在集群中起着不同的作用。</p><h3 id="2-2-2-3-1-分片"><a href="#2-2-2-3-1-分片" class="headerlink" title="2.2.2.3.1.分片"></a><strong>2.2.2.3.1.分片</strong></h3><p><strong>分片是索引的一部分，是数据的基本存储单元。分片允许将索引的数据分布存储在多个节点上，从而实现数据的并行处理和存储。</strong>每个分片是一个独立的 Lucene 实例，可以单独进行搜索和索引操作。</p><ul><li>分片是 Elasticsearch 中存储数据的基本单位，每个索引（Index）都被分成多个分片，每个分片是一个独立的 Lucene 索引。</li><li>分片的数量在索引创建时就确定了，一旦确定就不能修改。默认情况下，每个索引会被分配 5 个主分片（Primary Shard），可以通过配置来修改。</li><li>分片的主要作用是<strong>实现数据的分布和并行处理</strong>。通过将索引数据分成多个分片存储在不同的节点上，可以提高搜索和索引操作的并发性和吞吐量。</li><li>分片：<strong>类似于将一本书拆分成多个章节，每个章节可以单独存放和阅读</strong>。</li></ul><h3 id="2-2-2-3-2-副本"><a href="#2-2-2-3-2-副本" class="headerlink" title="2.2.2.3.2.副本"></a><strong>2.2.2.3.2.副本</strong></h3><p><strong>副本是分片的复制品，用于提高数据的可用性和搜索性能。如果某个节点发生故障，副本可以提供数据的冗余存储，确保数据不会丢失。</strong>同时，副本还可以分担搜索请求的负载，提高查询性能。</p><ul><li><strong>副本是分片的拷贝，每个分片可以有多个副本</strong>。副本的数量在索引创建时可以指定，也可以后续动态修改。</li><li>副本的主要作用是<strong>提高数据的可用性和容错性</strong>。当某个节点上的分片不可用时，集群可以从其它节点上的副本中提供服务，确保数据的完整性和可用性。</li><li>默认情况下，每个分片会有一个副本，可以通过配置来修改副本的数量。副本的数量可以根据集群的规模、性能需求和容错需求来灵活调整。</li><li>副本：<strong>类似于书的备份副本，确保即使原书丢失，你仍然有备份可用。</strong></li></ul><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d530cb5b3fd645f2bd7def26b8e96f19.png" alt="img"></p><h3 id="2-2-3-分布式操作"><a href="#2-2-3-分布式操作" class="headerlink" title="2.2.3.分布式操作"></a>2.2.3.分布式操作</h3><p>Elasticsearch 的分布式架构使得数据存储和查询变得高效和可靠。以下是一些关键操作及其工作方式：</p><ul><li><h4 id="1-数据分发"><a href="#1-数据分发" class="headerlink" title="1. 数据分发"></a>1. 数据分发</h4></li></ul><p><strong>当向索引中添加文档时，Elasticsearch 会自动将文档分配到不同的分片中。分片存储在不同的节点上，实现数据的分布式存储。这种分发机制确保数据可以并行处理，提高了存储和索引的速度。</strong></p><ul><li><h4 id="2-查询分发"><a href="#2-查询分发" class="headerlink" title="2. 查询分发"></a>2. 查询分发</h4></li></ul><p><strong>当执行搜索查询时，Elasticsearch 会将查询请求分发到所有包含相关分片的节点上。这些节点并行处理查询，并将结果返回给协调节点，后者汇总所有结果并返回最终的查询结果。</strong>这种并行查询机制大大提高了搜索性能。</p><ul><li><h4 id="3-自动故障恢复"><a href="#3-自动故障恢复" class="headerlink" title="3. 自动故障恢复"></a>3. 自动故障恢复</h4></li></ul><p><strong>如果集群中的某个节点发生故障，Elasticsearch 会自动检测并将分片的副本提升为主分片，确保数据的高可用性。</strong>同时，集群会重新分配分片，确保负载均衡和数据冗余。</p><h3 id="2-2-4-例子：分片和副本的工作流程"><a href="#2-2-4-例子：分片和副本的工作流程" class="headerlink" title="2.2.4.例子：分片和副本的工作流程"></a>2.2.4.例子：分片和副本的工作流程</h3><p>假设你有一个名为 “products” 的索引，包含 5 个主分片和 1 个副本配置（即每个主分片有一个副本）。在一个由 3 个节点组成的集群中，数据的分布和操作如下：</p><ul><li>数据分布：5 个主分片和 5 个副本分片将分布在 3 个节点上。例如：<ul><li>节点 1：主分片 1、2，副本分片 3、4。</li><li>节点 2：主分片 3、4，副本分片 1、5。</li><li>节点 3：主分片 5，副本分片 2。</li></ul></li><li>索引操作：当你向 “products” 索引中<strong>添加一个新文档</strong>，Elasticsearch <strong>会将该文档分配到某个主分片</strong>。例如，文档可能会存储在主分片 1 中，并且副本分片 1 会同步更新该文档。</li><li>查询操作：当你搜索某个关键词，查询请求<strong>将分发到所有包含相关分片的节点上</strong>。例如，节点 1 和节点 2 将并行处理查询，并返回部分结果给协调节点进行汇总。</li><li>故障恢复：<strong>如果节点 2 发生故障</strong>，<strong>Elasticsearch 会自动将副本分片 1 和 5 提升为主分片，确保数据的可用性</strong>。<strong>然后，Elasticsearch 会在节点 1 和节点 3 之间重新分配分片，以恢复数据冗余</strong>。</li></ul><h2 id="2-3-倒排索引"><a href="#2-3-倒排索引" class="headerlink" title="2.3.倒排索引"></a>2.3.倒排索引</h2><p>倒排索引（Inverted Index）是 Elasticsearch 和其他搜索引擎的<strong>核心数据结构</strong>，用于实现高效的全文搜索。理解倒排索引的工作原理<strong>是掌握 Elasticsearch 搜索性能和效率的关键。</strong></p><h3 id="2-3-1-什么是倒排索引？"><a href="#2-3-1-什么是倒排索引？" class="headerlink" title="2.3.1.什么是倒排索引？"></a>2.3.1.什么是倒排索引？</h3><p>倒排索引是一种用于<strong>存储映射词汇到其在文档中位置的数据结构</strong>。它与传统的正排索引（正向索引）不同，后者是将文档与其包含的词汇进行映射。倒排索引的结构<strong>类似于一本书的索引部分，其中列出了每个重要词汇以及它们在书中出现的页码。</strong></p><ul><li><strong>正排索引</strong>：类似于一本书的内容目录，列出每章内容及其页码。</li><li><strong>倒排索引</strong>：类似于书的索引部分，<strong>列出每个关键字及其出现的页码</strong>。</li></ul><p>Elasticsearch 中的索引实际上就是所谓的倒排索引，它是所有搜索引擎工作的机制。</p><p>看看百度百科的定义：<strong>倒排索引_百度百科</strong></p><p>倒排索引源于实际应用中需要根据属性的值来查找记录。</p><p>在我们百度搜索资料的时候，大家是经常看到搜索不仅仅是局限于标题，大多数时候是搜索到内容的对吧？</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f08425ce08764d558dfa73d8e8c60301.png" alt="img"></p><p>从上面可以看出，如果让我们自己去设计数据结构，肯定不能按照以往的那种（查询标题）去设计对吧</p><p>正常的mysql：</p><p>Goods表：ID addTime goodsName goodsDetails、goodsSEO</p><p>我们去设计索引是将goodsName去拆分出词，按照商品名称搜索到该条记录值，但是我们将这条记录放到互联网，那么搜索范围是不是就小太多了？我如果想根据goodsSEO、goodsDetails中的关键词搜索，是不是范围就大了很多，那如何设计呢？</p><p>有同学肯定说，那就把goodsSEO、goodsDetails中的词也索引了不就得了，一了百了。</p><p>对的，搜索引擎就是这么干的，他把标题、内容都给索引了，这么做，就是倒排&#x2F;倒置索引，正常的数据数据是：key&#x2F;value形式，按照key索引即可，倒排索引是按照value去索引，当然了，es是将每个字段都给索引了，也就是每个字段都给你整了一套分词、索引，是不是很贴心？很low？😂</p><p>将文档内容进行索引，后面的Document代表该条记录的ID值，也就是整条数据，比如找到了Term中butterfly就找到了Document1了。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/568a708ef5364b10bf79ab56b1c2883a.png" alt="img"></p><h3 id="2-3-2-倒排索引的工作原理"><a href="#2-3-2-倒排索引的工作原理" class="headerlink" title="2.3.2.倒排索引的工作原理"></a>2.3.2.倒排索引的工作原理</h3><p>倒排索引的主要工作原理是将文档中的词汇映射到包含这些词汇的文档列表。以下是倒排索引的构建步骤和基本原理：</p><ol><li><strong>文档分词</strong>：首先，将文档中的文本分割成单独的词汇（即分词）。这一步通常使用分词器（Tokenizer）来完成。</li><li><strong>去除停用词</strong>：分词后，通常会去除一些常见但无意义的词汇，如 “the”、”is” 等，这些词汇称为停用词（Stop Words）。</li><li><strong>建立词汇表</strong>：创建一个包含所有唯一词汇的词汇表。</li><li><strong>建立倒排列表</strong>：对于每个词汇，创建一个倒排列表，记录该词汇在哪些文档中出现以及出现的位置。</li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设我们有以下三个文档：</p><ul><li>文档 1：<code>&quot;Elasticsearch is a search engine&quot;</code></li><li>文档 2：<code>&quot;Elasticsearch uses inverted index&quot;</code></li><li>文档 3：<code>&quot;Inverted index improves search efficiency&quot;</code></li></ul><p>分词和去除停用词后，我们得到以下词汇表和倒排列表：</p><ul><li>词汇表：<code>[&quot;Elasticsearch&quot;, &quot;search&quot;, &quot;engine&quot;, &quot;uses&quot;, &quot;inverted&quot;, &quot;index&quot;, &quot;improves&quot;, &quot;efficiency&quot;]</code></li><li>倒排列表： <ul><li><code>&quot;Elasticsearch&quot;</code>：{文档 1, 文档 2}</li><li><code>&quot;search&quot;</code>：{文档 1, 文档 3}</li><li><code>&quot;engine&quot;</code>：{文档 1}</li><li><code>&quot;uses&quot;</code>：{文档 2}</li><li><code>&quot;inverted&quot;</code>：{文档 2, 文档 3}</li><li><code>&quot;index&quot;</code>：{文档 2, 文档 3}</li><li><code>&quot;improves&quot;</code>：{文档 3}</li><li><code>&quot;efficiency&quot;</code>：{文档 3}</li></ul></li></ul><p>通过倒排列表，我们可以快速定位包含特定词汇的文档，从而提高搜索效率。</p><h3 id="2-3-3-倒排索引在-Elasticsearch-中的实现"><a href="#2-3-3-倒排索引在-Elasticsearch-中的实现" class="headerlink" title="2.3.3.倒排索引在 Elasticsearch 中的实现"></a>2.3.3.倒排索引在 Elasticsearch 中的实现</h3><p>在 Elasticsearch 中，每个索引都使用倒排索引来实现快速的全文搜索。以下是 Elasticsearch 中倒排索引的实现和工作流程：</p><ol><li><strong>文档索引</strong>：当文档被索引时，Elasticsearch 会对文档中的文本字段进行分词和分析，生成一系列词汇。</li><li><strong>创建倒排索引</strong>：Elasticsearch 为每个词汇创建倒排列表，并将这些列表存储在索引中。</li><li><strong>搜索查询</strong>：当用户执行搜索查询时，Elasticsearch 使用倒排索引来快速定位包含查询词汇的文档，并根据相关性对结果进行排序。</li></ol><h3 id="2-3-2-1-分词器"><a href="#2-3-2-1-分词器" class="headerlink" title="2.3.2.1.分词器"></a>2.3.2.1.分词器</h3><p>Elasticsearch 使用<strong>分词器和分析器</strong>来处理文档中的文本。分词器将文本分割成词汇，而分析器则包括分词器和一系列过滤器，用于进一步处理词汇（如去除停用词、转换为小写等）。</p><p>在创建索引之前，会对文档中的字符串进行分词。ES中字符串有两种类型，<strong>keyword和text。</strong></p><ul><li><strong>keyword类型的字符串不会被分词</strong>，搜索时全匹配查询</li><li><strong>text类型的字符串会被分词</strong>，搜索时是包含查询</li></ul><p>不同的分词器对相同字符串分词的结果大有不同，选择不同的分词器对索引的创建有很大的影响</p><p>如拆分“中华人民共和国国歌”</p><ol><li>ik_max_word分词器: 最细粒度拆分，分词结果如下：<ul><li>中华人民共和国</li><li>中华人民</li><li>中华</li><li>华人</li><li>人民共和国</li><li>人民</li><li>人</li><li>民</li><li>共和国</li><li>共和</li><li>和</li><li>国国</li><li>国歌</li></ul></li><li>ik_smart分词器: 最粗粒度的拆分，分词结果如下：<ul><li>中华人民共和国</li><li>国歌</li></ul></li></ol><p>可见，再ES中创建索引，选择合适的分词器是很重要的。</p><h3 id="单词-文档矩阵"><a href="#单词-文档矩阵" class="headerlink" title="单词-文档矩阵"></a>单词-文档矩阵</h3><table><thead><tr><th>-</th><th>单词1</th><th>单词2</th><th>单词3</th><th>单词4</th></tr></thead><tbody><tr><td>文档1</td><td>√</td><td></td><td>√</td><td></td></tr><tr><td>文档2</td><td></td><td>√</td><td></td><td></td></tr><tr><td>文档3</td><td></td><td></td><td>√</td><td></td></tr><tr><td>文档4</td><td>√</td><td></td><td></td><td>√</td></tr></tbody></table><p><strong>该矩阵是表达单词和文档两者之间包含关系</strong>的概念模型。<br> 从<strong>横向看</strong>，每行代表文档包含了哪些单词，比如文档1包含了单词1和单词3，而不包含其它单词。<br> 从<strong>纵向看</strong>，每列代表了<strong>某个单词存在于哪些文档</strong>。比如单词1在文档1和文档4中出现过。</p><p>简单来说，<strong>索引就是实现“单词-文档矩阵”的具体数据结构，而倒排索引则是实现了这种数据结构的具体方式</strong>。</p><h3 id="2-3-4-倒排索引的构成"><a href="#2-3-4-倒排索引的构成" class="headerlink" title="2.3.4.倒排索引的构成"></a>2.3.4.倒排索引的构成</h3><p>倒排索引由两部分构成：</p><ul><li><strong>单词词典</strong></li><li><strong>倒排列表</strong></li></ul><p>它的结构如下：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/11f99b7f0a744b93aeeb4fcc66e96d3e.png" alt="img"></p><h3 id="2-3-4-1-单词词典"><a href="#2-3-4-1-单词词典" class="headerlink" title="2.3.4.1.单词词典"></a>2.3.4.1.单词词典</h3><p>单词词典的特性：</p><ol><li>是文档集合中所有单词的集合</li><li>它是保存索引的最小单位</li><li>其中<strong>记录着指向倒排列表的指针</strong></li></ol><p>单词词典的实现：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/51654073cac54c619e266a1b04c1b18a.png" alt="img"></p><p>单词词典有两种数据结构实现：<strong>B+树和Hash表（数据结构那篇文章中有详细介绍）</strong></p><p>B+树和Mysql索引结构中主键索引数据结构一样，这里就不再介绍了</p><p>哈希表的key是单词的hash值，值是单词的链表，因为hash算法会有冲突的情况发生，所以这里的值是一个集合，里面保存着相同hash值得单词以及改词指向倒排列表的指针</p><h3 id="2-3-4-2-倒排列表"><a href="#2-3-4-2-倒排列表" class="headerlink" title="2.3.4.2.倒排列表"></a>2.3.4.2.倒排列表</h3><p>倒排列表特性：</p><ol><li><strong>记录出现过某个单词的文档列表</strong></li><li><strong>同时还记录单词在所有文档中的出现次数和偏移位置</strong></li></ol><p>倒排列表<strong>元素数据结构</strong>：</p><p>其中：</p><ul><li>DocID：出现某单词的文档ID</li><li>TF(Term Frequency)：单词在该文档中出现的次数</li><li>POS：单词在文档中的位置</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>有下面单个文档</p><table><thead><tr><th>-</th><th>内容</th></tr></thead><tbody><tr><td>文档1</td><td>百度的年度目标</td></tr><tr><td>文档2</td><td>AI技术生态部的年度目标</td></tr><tr><td>文档3</td><td>AI市场的年度目标</td></tr></tbody></table><p>则他们生成的倒排索引</p><table><thead><tr><th>单词ID</th><th>单词</th><th>逆向文档频率</th><th>倒排列表(DocID;TF;<POS>)</th></tr></thead><tbody><tr><td>1</td><td>目标</td><td>3</td><td>(1;1;&lt;3&gt;),(2;1;&lt;5&gt;),(3;1;&lt;4&gt;)</td></tr><tr><td>2</td><td>年度</td><td>3</td><td>(1;1;&lt;2&gt;),(2;1;&lt;4&gt;),(3;1;&lt;3&gt;)</td></tr><tr><td>3</td><td>AI</td><td>2</td><td>(2;1;&lt;1&gt;),(3;1;&lt;1&gt;)</td></tr><tr><td>4</td><td>技术</td><td>1</td><td>(2;1;&lt;2&gt;)</td></tr><tr><td>5</td><td>生态</td><td>1</td><td>(2;1;&lt;3&gt;)</td></tr><tr><td>6</td><td>市场</td><td>1</td><td>(3;1;&lt;2&gt;)</td></tr></tbody></table><p>比如单词“年度”，单词ID为2，在三个文档中出现过，所以逆向文档频率为3，同时倒排索引中的元素也有三个：<code>(1;1;&lt;2&gt;),(2;1;&lt;4&gt;),(3;1;&lt;3&gt;)</code>。拿第一个元素<code>(1;1;&lt;2&gt;)</code>进行说明，他表示“年度”再文档ID为1的文档中出现过1次，出现的位置是第二个单词</p><h3 id="2-3-6-倒排索引的搜索过程"><a href="#2-3-6-倒排索引的搜索过程" class="headerlink" title="2.3.6.倒排索引的搜索过程"></a>2.3.6.倒排索引的搜索过程</h3><p>直到了倒排索引的内部结构之后，就能很好理解倒排索引的搜索过程了，其内部搜索过程如下图所示：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/9000224cbbb9463ebd31f7a2f95f03ef.png" alt="img"></p><h3 id="2-3-7-倒排索引的优势"><a href="#2-3-7-倒排索引的优势" class="headerlink" title="2.3.7.倒排索引的优势"></a>2.3.7.倒排索引的优势</h3><p>倒排索引相比其他索引结构具有以下优势：</p><ul><li><strong>高效搜索</strong>：倒排索引允许<strong>快速定位包含特定词汇的文档</strong>，从而实现高效的全文搜索。</li><li><strong>灵活性</strong>：倒排索引适用于各种类型的搜索查询，包括布尔查询、短语查询和范围查询。</li><li><strong>扩展性</strong>：倒排索引可以<strong>轻松扩展以处理大规模数据</strong>，适用于分布式搜索系统。</li></ul><h2 id="2-4-RESTful-API-基本操作示例"><a href="#2-4-RESTful-API-基本操作示例" class="headerlink" title="2.4.RESTful API 基本操作示例"></a>2.4.RESTful API 基本操作示例</h2><p> RESTful API 是一种遵循 REST（Representational State Transfer）架构风格的应用程序接口。它利用 HTTP 协议的各种方法（如 GET、POST、PUT、DELETE 等）进行资源的创建、读取、更新和删除（CRUD 操作）。在 Elasticsearch 中，资源通常是索引、文档和搜索查询等。</p><h3 id="2-4-1-创建索引"><a href="#2-4-1-创建索引" class="headerlink" title="2.4.1. 创建索引"></a>2.4.1. 创建索引</h3><p>在 Elasticsearch 中，索引类似于数据库中的表，用于存储一类相似的文档。可以使用 PUT 请求创建一个新的索引。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /my_index<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;shards_acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-2-添加文档"><a href="#2-4-2-添加文档" class="headerlink" title="2.4.2. 添加文档"></a>2.4.2. 添加文档</h3><p>可以使用 POST 请求将文档添加到索引中。文档以 JSON 格式表示。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Elasticsearch Introduction&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Elasticsearch is a powerful search engine.&quot;</span>,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>  <span class="hljs-string">&quot;publish_date&quot;</span>: <span class="hljs-string">&quot;2024-06-23&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-3-查询文档"><a href="#2-4-3-查询文档" class="headerlink" title="2.4.3. 查询文档"></a>2.4.3. 查询文档</h3><p>可以使用 GET 请求查询特定文档或执行搜索查询。以下示例展示了如何查询特定文档和执行全文搜索。</p><ul><li><strong>查询特定文档：</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /my_index/_doc/1<br></code></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">&#123;<br>  <span class="hljs-comment">&quot;_index&quot;</span>: <span class="hljs-comment">&quot;my_index&quot;</span>,<br>  <span class="hljs-comment">&quot;_type&quot;</span>: <span class="hljs-comment">&quot;_doc&quot;</span>,<br>  <span class="hljs-comment">&quot;_id&quot;</span>: <span class="hljs-comment">&quot;1&quot;</span>,<br>  <span class="hljs-comment">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-comment">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">&quot;found&quot;</span>: <span class="hljs-keyword">true</span>,<br>  <span class="hljs-comment">&quot;_source&quot;</span>: &#123;<br>    <span class="hljs-comment">&quot;title&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch Introduction&quot;</span>,<br>    <span class="hljs-comment">&quot;content&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch is a powerful search engine.&quot;</span>,<br>    <span class="hljs-comment">&quot;author&quot;</span>: <span class="hljs-comment">&quot;John Doe&quot;</span>,<br>    <span class="hljs-comment">&quot;publish_date&quot;</span>: <span class="hljs-comment">&quot;2024-06-23&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>执行全文搜索：</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /my_index/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;search engine&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">&#123;<br>  <span class="hljs-comment">&quot;took&quot;</span>: <span class="hljs-number">12</span>,<br>  <span class="hljs-comment">&quot;timed_out&quot;</span>: <span class="hljs-keyword">false</span>,<br>  <span class="hljs-comment">&quot;_shards&quot;</span>: &#123;<br>    <span class="hljs-comment">&quot;total&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-comment">&quot;successful&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-comment">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-comment">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-comment">&quot;hits&quot;</span>: &#123;<br>    <span class="hljs-comment">&quot;total&quot;</span>: &#123;<br>      <span class="hljs-comment">&quot;value&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-comment">&quot;relation&quot;</span>: <span class="hljs-comment">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-comment">&quot;max_score&quot;</span>: <span class="hljs-number">0.2876821</span>,<br>    <span class="hljs-comment">&quot;hits&quot;</span>: [<br>      &#123;<br>        <span class="hljs-comment">&quot;_index&quot;</span>: <span class="hljs-comment">&quot;my_index&quot;</span>,<br>        <span class="hljs-comment">&quot;_type&quot;</span>: <span class="hljs-comment">&quot;_doc&quot;</span>,<br>        <span class="hljs-comment">&quot;_id&quot;</span>: <span class="hljs-comment">&quot;1&quot;</span>,<br>        <span class="hljs-comment">&quot;_score&quot;</span>: <span class="hljs-number">0.2876821</span>,<br>        <span class="hljs-comment">&quot;_source&quot;</span>: &#123;<br>          <span class="hljs-comment">&quot;title&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch Introduction&quot;</span>,<br>          <span class="hljs-comment">&quot;content&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch is a powerful search engine.&quot;</span>,<br>          <span class="hljs-comment">&quot;author&quot;</span>: <span class="hljs-comment">&quot;John Doe&quot;</span>,<br>          <span class="hljs-comment">&quot;publish_date&quot;</span>: <span class="hljs-comment">&quot;2024-06-23&quot;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-4-更新文档"><a href="#2-4-4-更新文档" class="headerlink" title="2.4.4. 更新文档"></a>2.4.4. 更新文档</h3><p>可以使用 POST 请求更新已存在的文档。更新操作会覆盖指定字段的内容。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/my_index/</span>_update/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Elasticsearch is a powerful and flexible search engine.&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-5-删除文档"><a href="#2-4-5-删除文档" class="headerlink" title="2.4.5. 删除文档"></a>2.4.5. 删除文档</h3><p>可以使用 DELETE 请求删除特定文档。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>响应实例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleted&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日志篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EFK采集k8s日志</title>
    <link href="/2025/04/16/EFK%E9%87%87%E9%9B%86k8s%E6%97%A5%E5%BF%97/"/>
    <url>/2025/04/16/EFK%E9%87%87%E9%9B%86k8s%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>​    在 Kubernetes 集群中，需要全面了解各个 pod 应用运行状态、故障排查和性能分析。但由于 Pod 是动态创建和销毁的，其日志分散且存储不持久，因此需要通过集中式日志采集方案，将日志收集到统一的平台并配置日志可视化分析和监控告警，以实现日志的可追溯性、实时监控和高效分析，从而提升运维效率和系统可靠性。</p><p>官网地址：<a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/logging/">日志架构 | Kubernetes</a></p><h2 id="1-日志采集方案"><a href="#1-日志采集方案" class="headerlink" title="1.日志采集方案"></a>1.日志采集方案</h2><p><strong>方案一：ds控制器</strong></p><p>每个节点有且仅有一个日志采集的Pod。并不需要注入原有的Pod。DaemonSet + nodeSelector调度到指定节点。DaemonSet 相对资源占用要小很多，但扩展性、租户隔离性受限，比较适用于功能单一或业务不是很多的集群。</p><p>优点：节省资源</p><p>缺点：需要配置RBAC权限</p><p><strong>方案二：sidecar</strong></p><p>每个pod再起一个容器，安装filebeat采集数据，使用emptyDir共享pod中日志。Sidecar 相对资源占用较多，但灵活性以及多租户隔离性较强，建议大型的 K8s 集群或作为 PaaS 平台为多个业务方服务的集群使用该方式。</p><p>优点：可以直接和业务容器共享存储和网络，将日志采集到目的端。</p><p>缺点: 如果一个节点有五十个pod，那就要注入五十个filebeat采集，造成资源浪费</p><p><strong>方案三：开发自实现</strong></p><p>让程序本身支持日志采集功能。</p><p>优点：无需运维接入，只需配置对应目标接口</p><p>缺点：跨部门沟通，费时间</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6e5e2bc0104c49a5a5946abebc903b59.png" alt="img"></p><blockquote><p><strong>总结：</strong></p><p>  <strong>1. DaemonSet一般在中小型集群中使用</strong></p><p>   <strong>2. Sidecar推荐在超大型的集群中使用</strong></p><p>  <strong>3. 业务直写推荐在日志量极大的场景中使用</strong></p></blockquote><p><strong>三种方案优缺点：</strong> </p><p><img src="/Untitled.assets/4e47cb38331b43bda5414eaab67214ed.png" alt="img"></p><p>因为方案一在业界使用更为广泛，并且官方也更为推荐，所以我们基于方案一来做k8s的日志采集。</p><h2 id="2-创建单节点elasticsearch的yaml文件"><a href="#2-创建单节点elasticsearch的yaml文件" class="headerlink" title="2.创建单节点elasticsearch的yaml文件"></a>2.创建单节点elasticsearch的yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">efk</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-comment"># 指定需要安装的ES版本号</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch:7.17.22</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">3Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">0.5</span> <br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 配置集群部署模式，此处我由于是实验，配置的是单点</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;discovery.type&quot;</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;single-node&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ES_JAVA_OPTS</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;-Xms256m -Xmx256m&quot;</span> <br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9200</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/elasticsearch/data</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-data</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">es-pvc</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">es-pvc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;nfs-sc&quot;</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9200</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br></code></pre></td></tr></table></figure><h2 id="3-创建kibana的yaml文件"><a href="#3-创建kibana的yaml文件" class="headerlink" title="3.创建kibana的yaml文件"></a>3.创建kibana的yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/kibana/kibana:7.17.22</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">0.5</span> <br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ELASTICSEARCH_HOSTS</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">http://elasticsearch.efk.svc.cherry.com:9200</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">I18N_LOCALE</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">zh-CN</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5601</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">ui</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">5601</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">ui</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">5601</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br></code></pre></td></tr></table></figure><h2 id="4-以DaemonSet的方式创建filebeat的yaml文件"><a href="#4-以DaemonSet的方式创建filebeat的yaml文件" class="headerlink" title="4.以DaemonSet的方式创建filebeat的yaml文件"></a>4.以DaemonSet的方式创建filebeat的yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-config</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">filebeat.yml:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    filebeat.config:</span><br><span class="hljs-string">      inputs:</span><br><span class="hljs-string">        path: $&#123;path.config&#125;/inputs.d/*.yml</span><br><span class="hljs-string">        reload.enabled: false</span><br><span class="hljs-string">      modules:</span><br><span class="hljs-string">        path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="hljs-string">        reload.enabled: false</span><br><span class="hljs-string">    output.elasticsearch:</span><br><span class="hljs-string">      hosts: [&#x27;elasticsearch.efk.svc.cherry.com:9200&#x27;]</span><br><span class="hljs-string">      index: &#x27;k8s-ds-%&#123;+yyyy.MM.dd&#125;&#x27;</span><br><span class="hljs-string"></span><br>    <span class="hljs-attr">setup.ilm.enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">setup.template.name:</span> <span class="hljs-string">&quot;k8s-ds&quot;</span><br>    <span class="hljs-attr">setup.template.pattern:</span> <span class="hljs-string">&quot;k8s-ds*&quot;</span><br>    <span class="hljs-attr">setup.template.overwrite:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">setup.template.settings:</span><br>      <span class="hljs-attr">index.number_of_shards:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">index.number_of_replicas:</span> <span class="hljs-number">0</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-inputs</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">kubernetes.yml:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    - type: container</span><br><span class="hljs-string">      stream: all</span><br><span class="hljs-string">      paths: </span><br><span class="hljs-string">        - &#x27;/var/lib/docker/containers/*/*.log&#x27;</span><br><span class="hljs-string">      processors:</span><br><span class="hljs-string">        - add_kubernetes_metadata:</span><br><span class="hljs-string">            in_cluster: true</span><br><span class="hljs-string"></span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">filebeat</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/beats/filebeat:7.17.22</span><br>        <span class="hljs-attr">args:</span> [<br>          <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/etc/filebeat.yml&quot;</span>,<br>          <span class="hljs-string">&quot;-e&quot;</span>,<br>        ]<br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/filebeat.yml</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">filebeat.yml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">inputs</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/filebeat/inputs.d</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">inputs</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-inputs</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d234b186600f46cab91dfb4d3427d037.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>日志篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WireGuard实现异地组网</title>
    <link href="/2025/04/16/WireGuard%E5%AE%9E%E7%8E%B0%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/"/>
    <url>/2025/04/16/WireGuard%E5%AE%9E%E7%8E%B0%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p> WireGuard是一个易于配置、快速、安全的基于UDP协议的开源VPN软件。Wireguard具有自定义配置路由转发的能力，所以可以被用来在多个不同地域将设备所在的内网网络通过路由转发的方式串通起来，组建一张属于自己的大内网！有时候，我们想将本地计算机上提供的服务与小伙伴分享，但是我们既没有公网IP，又希望能够有足够的安全性，避免使其暴露在公网上。因此，我们基于Wireguard这一项最基本的特性，设计和实现了一套异地组网方案。我们基于Wireguard这一项最基本的特性，设计和实现了一套异地组网方案。这里给大家介绍两种部署方式，以供大家选择。</p><h2 id="一、WireGuard-基本概念"><a href="#一、WireGuard-基本概念" class="headerlink" title="一、WireGuard 基本概念"></a>一、WireGuard 基本概念</h2><p>首先使用 WireGuard 你需要在<a href="https://www.moyann.com/tag/%E7%B3%BB%E7%BB%9F/">系统</a>中创建一块虚拟网卡，并配置好这个虚拟网卡的 IP <a href="https://www.moyann.com/tag/%E5%9C%B0%E5%9D%80/">地址</a>，掩码，网关不需要配置（可以使用 wg-quick@ 自动化）</p><p>然后你使用 WireGuard <a href="https://www.moyann.com/tag/%E8%BF%9E%E6%8E%A5/">连接</a>另一台设备，两台互相 peer 对方并验证各自的公钥私钥是否正确，全部正确后成功建立 peer（可以使用 wg-quick@ 自动化）</p><p>建立成功后，所有前往虚拟网卡的<a href="https://www.moyann.com/tag/%E6%B5%81%E9%87%8F/">流量</a>都将被重新封装后发往另一台设备，由另一台设备解封装然后得到数据报文并在内部查找路由并匹配报文目的地。（可以使用 wg-quick@ 自动化）</p><p>以上为建立一个 WireGuard VPN 链接的过程，建立好后，A 设备与 B 设备互相需要保证虚拟网卡的 IP 在相同网络位的地址段中，并且这个地址段被 WireGuard 的配置<a href="https://www.moyann.com/tag/%E6%96%87%E4%BB%B6/">文件</a> AllowedIPs 所允许通过</p><p>如果你试图从 A 设备访问 B 设备的对端子网，你需要在 A 设备上配置系统路由，将系统三层网络的路由目的地指向对端虚拟 IP 地址，出接口为虚拟网卡，并且这个地址段必须被 WireGuard 的配置文件 AllowedIPs 所允许通过</p><p>最后，在 WireGuard 中的所有数据报文，都采用 UDP 的方式发送。</p><h2 id="二、安装-WireGuard"><a href="#二、安装-WireGuard" class="headerlink" title="二、安装 WireGuard"></a>二、安装 WireGuard</h2><p>1.安装Wireguard</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#root权限</span><br><span class="hljs-built_in">sudo</span> -i<br><br><span class="hljs-comment">#安装wireguard软件</span><br>apt install wireguard resolvconf -y<br><br><span class="hljs-comment">#开启IP转发</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure><p>2.修改目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/wireguard/<br><span class="hljs-built_in">chmod</span> 0777 /etc/wireguard<br><br><span class="hljs-comment">#调整目录默认权限</span><br><span class="hljs-built_in">umask</span> 077<br></code></pre></td></tr></table></figure><p>3.生成服务器密钥</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#生成私钥</span><br>wg genkey &gt; <span class="hljs-keyword">server</span>.key<br><br><span class="hljs-meta">#通过私钥生成公钥</span><br>wg pubkey &lt; <span class="hljs-keyword">server</span>.key &gt; <span class="hljs-keyword">server</span>.key.pub<br></code></pre></td></tr></table></figure><p>4.生成客户端密钥</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment">#生成私钥</span><br>wg genkey &gt; client1.key<br><br><span class="hljs-comment">#通过私钥生成公钥</span><br>wg pubkey <span class="hljs-variable">&lt; client1.key &gt;</span> client1.key.pub<br></code></pre></td></tr></table></figure><p>5.查看密钥</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">cat server.<span class="hljs-keyword">key</span> <span class="hljs-variable">&amp;&amp;</span> cat server.<span class="hljs-keyword">key</span>.pub <span class="hljs-variable">&amp;&amp;</span> cat client1.<span class="hljs-keyword">key</span> <span class="hljs-variable">&amp;&amp;</span> cat client1.<span class="hljs-keyword">key</span>.pub<br></code></pre></td></tr></table></figure><p>6.创建服务端配置文件</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs 1c">echo <span class="hljs-string">&quot;</span><br>[Interface]<br>PrivateKey <span class="hljs-punctuation">=</span> $<span class="hljs-punctuation">(</span>cat server.key<span class="hljs-punctuation">)</span> <span class="hljs-meta"># 填写本机的privatekey 内容</span><br>Address <span class="hljs-punctuation">=</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">8.1</span> <span class="hljs-meta">#本机虚拟局域网IP</span><br><br>PostUp   <span class="hljs-punctuation">=</span> iptables <span class="hljs-punctuation">-</span>A FORWARD <span class="hljs-punctuation">-</span>i wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>A FORWARD <span class="hljs-punctuation">-</span>o wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>t nat <span class="hljs-punctuation">-</span>A POSTROUTING <span class="hljs-punctuation">-</span>o eth0 <span class="hljs-punctuation">-</span>j MASQUERADE<br>PostDown <span class="hljs-punctuation">=</span> iptables <span class="hljs-punctuation">-</span>D FORWARD <span class="hljs-punctuation">-</span>i wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>D FORWARD <span class="hljs-punctuation">-</span>o wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>t nat <span class="hljs-punctuation">-</span>D POSTROUTING <span class="hljs-punctuation">-</span>o eth0 <span class="hljs-punctuation">-</span>j MASQUERADE<br><span class="hljs-meta">#注意eth0需要为本机网卡名称</span><br><br>ListenPort <span class="hljs-punctuation">=</span> <span class="hljs-number">50814</span> <span class="hljs-meta"># 监听端口</span><br>DNS <span class="hljs-punctuation">=</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br>MTU <span class="hljs-punctuation">=</span> <span class="hljs-number">1420</span><br>[Peer]<br>PublicKey <span class="hljs-punctuation">=</span>  $<span class="hljs-punctuation">(</span>cat client1.key.pub<span class="hljs-punctuation">)</span>  <span class="hljs-meta">#自动client1的公钥</span><br>AllowedIPs <span class="hljs-punctuation">=</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">8.10</span>/<span class="hljs-number">32</span> <span class="hljs-meta">#客户端所使用的IP&quot; &gt; wg0.conf</span><br></code></pre></td></tr></table></figure><p>7.启动服务</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#设置开机自启动</span><br>systemctl enable wg-quick<span class="hljs-variable">@wg0</span><br><br><span class="hljs-comment">#启动wg0</span><br>wg-quick up wg0<br><br><span class="hljs-comment">#关闭wg0</span><br>wg-quick down wg0<br><br><span class="hljs-comment">#如果启动失败只有有wg0网卡，需删除再次启动</span><br>ip <span class="hljs-keyword">link</span> <span class="hljs-keyword">delete</span> wg0<br></code></pre></td></tr></table></figure><p>8.配置客户端</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">Windows下载地址：https://www.wireguard.com/install/</span><br><br><span class="hljs-comment">#客户端配置</span><br>[Interface]<br>PrivateKey = 6M8HEZioew+vR3i53sPc64Vg40YsuMzh4vI1Lkc88Xo= <span class="hljs-comment">#此处为client1的私钥</span><br>Address = 10.0.8.10 <span class="hljs-comment">#此处为peer规定的客户端IP</span><br>MTU = 1500<br><br>[Peer]<br>PublicKey = Tt5WEa0Vycf4F+TTjR2TAHDfa2onhh+tY8YOIT3cKjI= <span class="hljs-comment">#此处为server的公钥</span><br>AllowedIPs = 10.0.8.0/24 <span class="hljs-comment">#此处为允许的服务器IP</span><br>Endpoint = 114.132.56.178:50814 <span class="hljs-comment">#服务器对端IP+端口</span><br></code></pre></td></tr></table></figure><p>9.连接</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4658e56cf5dc493194931b981480e24a.png" alt="4658e56cf5dc493194931b981480e24a.png">编辑这时候很明显我电脑和服务器地址不在一个网段，但是我也可以成功访问公司网络咯~</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/09870e03be6c457aaca5f71da26dc80c.png" alt="09870e03be6c457aaca5f71da26dc80c.png"></p><h2 id="三、docker部署"><a href="#三、docker部署" class="headerlink" title="三、docker部署"></a>三、docker部署</h2><p>这种方式简单，前提是需要安装docker。关于docker部署，cicd专栏-kubeadm部署k8s一篇博文中有写到。感兴趣小伙伴可以参考</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --name=wg-easy <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_HOST=<span class="hljs-number">123.123.123.123</span> (🚨这里输入服务器的公网IP) <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e PASSWORD=passwd123 (🚨这里输入你的密码) <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_DEFAULT_ADDRESS=<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span>.x （🚨默认IP地址）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_DEFAULT_DNS=<span class="hljs-number">114.114.114.114</span> （🚨默认DNS）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_ALLOWED_IPS=<span class="hljs-number">10.0.8.0</span>/<span class="hljs-number">24</span> （🚨允许连接的IP段）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_PERSISTENT_KEEPALIVE=<span class="hljs-number">25</span> （🚨重连间隔）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -v ~/.wg-easy:/etc/wireguard <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">51820</span>:<span class="hljs-number">51820</span>/udp <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">51821</span>:<span class="hljs-number">51821</span>/tcp <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --cap-add=NET_ADMIN <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --cap-add=SYS_MODULE <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --sysctl=<span class="hljs-string">&quot;net.ipv4.conf.all.src_valid_mark=1&quot;</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --sysctl=<span class="hljs-string">&quot;net.ipv4.ip_forward=1&quot;</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --restart unless-stopped <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  weejewel/wg-easy<br></code></pre></td></tr></table></figure><p>容器更新命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop wg-easy<br>docker <span class="hljs-built_in">rm</span> wg-easy<br>docker pull weejewel/wg-easy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
